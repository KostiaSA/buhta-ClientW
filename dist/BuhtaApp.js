/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var AppDesigner_1 = __webpack_require__(3);
	var BuhtaHost_1 = __webpack_require__(82); // не удалять
	var fakeBuhtaHost = BuhtaHost_1.buhtaHost; // не удалять
	// ReactDOM.render(
	//     <Hello compiler="TypeScript" framework="React" />,
	//     document.getElementById("example")
	// );
	// ReactDOM.render(
	//     <App/>,
	//     document.body
	// );
	ReactDOM.render(React.createElement(AppDesigner_1.AppDesigner, null), document.body);


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = React;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = ReactDOM;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var Layout_1 = __webpack_require__(7);
	var Fixed_1 = __webpack_require__(8);
	var Flex_1 = __webpack_require__(9);
	var testBuhtaObject1_1 = __webpack_require__(10);
	var ObjectDesigner_1 = __webpack_require__(17);
	var Desktop_1 = __webpack_require__(30);
	var Movable_1 = __webpack_require__(34);
	var App_1 = __webpack_require__(31);
	var Input_1 = __webpack_require__(16);
	var testBuhtaObject2_1 = __webpack_require__(35);
	var AutoForm_1 = __webpack_require__(19);
	var TreeGridColumn_1 = __webpack_require__(36);
	var Button_1 = __webpack_require__(22);
	var SqlTable_1 = __webpack_require__(38);
	var Snapshot_1 = __webpack_require__(26);
	var DesignedObject_1 = __webpack_require__(11);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var Error_1 = __webpack_require__(6);
	var SqlDb_1 = __webpack_require__(46);
	var Schema_1 = __webpack_require__(54);
	var SchemaForm_1 = __webpack_require__(63);
	var ButtonControl_1 = __webpack_require__(69);
	var PanelControl_1 = __webpack_require__(78);
	var Auth_1 = __webpack_require__(51);
	var LocalVariableControl_1 = __webpack_require__(79);
	var TestSelectControlForm_1 = __webpack_require__(81);
	var OneWayBinder_StringValue_1 = __webpack_require__(76);
	var AppDesignerState = (function (_super) {
	    __extends(AppDesignerState, _super);
	    function AppDesignerState() {
	        _super.apply(this, arguments);
	    }
	    return AppDesignerState;
	}(Component_1.ComponentState));
	exports.AppDesignerState = AppDesignerState;
	var AppDesigner = (function (_super) {
	    __extends(AppDesigner, _super);
	    function AppDesigner(props, context) {
	        _super.call(this, props, context);
	        this.sideWidth = 300;
	        this.str = "привет";
	        this.props = props;
	        this.state = new AppDesignerState(this);
	    }
	    // initTest() {
	    //     this.testObject.name = "Тестовый объект1";
	    // }
	    AppDesigner.prototype.moveStart = function (e) {
	        var _this = this;
	        e.bindX(this, "sideWidth", function () {
	            _this.forceUpdate();
	        });
	    };
	    AppDesigner.prototype.testOpenWindow = function () {
	        // let obj = {
	        //     Фамилия: "Савченков",
	        //     Имя: "Константин",
	        //     Отчество: "Владимирович"
	        // };
	        //
	        // let win =
	        //     <Tabs>
	        //         <Tab title="закладка 1">
	        //             <Form>
	        //                 <Input caption="Фамилия" type={InputType.Text} bindObject={obj} bindPropName="Фамилия"/>
	        //                 <Input caption="Имя" type={InputType.Text} bindObject={obj} bindPropName="Имя"/>
	        //                 <InputDivider title="а теперь отчество"></InputDivider>
	        //                 <Input type={InputType.Text} bindObject={obj} bindPropName="Отчество"/>
	        //             </Form>
	        //         </Tab>
	        //         <Tab title="закладка 2"> 22222 </Tab>
	        //     </Tabs>;
	        // appInstance.desktop.openWindow(win);
	    };
	    ;
	    AppDesigner.prototype.testOpenObjectDesigner = function () {
	        var testObject = new testBuhtaObject1_1.TestBuhtaObject1();
	        testObject.firstName = "Игорь0";
	        testObject.lastName = "Сидоренко0";
	        testObject.surName = "Олегович0";
	        //        let win = <ObjectDesigner onChange={()=>{ win2Instance.designedObject=null; win2Instance.forceUpdate(); console.log("test323-change")}} designedObject={testObject} key="1"> </ObjectDesigner>;
	        var win = React.createElement(ObjectDesigner_1.ObjectDesigner, {onChange: function () { testObject = _.cloneDeep(testObject); win2Instance.forceUpdate(); console.log("test999-change"); }, designedObject: testObject, key: "1"}, " ");
	        var testObject2 = new testBuhtaObject2_1.testBuhtaObject2();
	        testObject2.firstName = "Игорь1";
	        testObject2.lastName = "Сидоренко2";
	        testObject2.surName = "Олегович1";
	        testObject2.sex = "мужской";
	        var win2Instance;
	        var win2 = React.createElement(ObjectDesigner_1.ObjectDesigner, {ref: function (e) { win2Instance = e; }, designedObject: testObject2, key: "2"});
	        //getPropertyEditors(testObject);
	        //getPropertyEditors(testObject2);
	        var winwin = React.createElement("div", null, 
	            win, 
	            win2);
	        var openParam = {
	            title: "окно 1",
	            top: 50,
	            left: 50
	        };
	        App_1.appInstance.desktop.openWindow(winwin, openParam);
	    };
	    ;
	    AppDesigner.prototype.testImmutable = function () {
	        // //let fake=new Table([]);
	        //
	        // const xxx = Immutable.Map<string, number>();
	        //
	        // let obj = {
	        //     name: "Оганизация",
	        //     columns: {"Номер": {colName: "Номер", type: "string"}, "Название": {colName: "Название", type: "string"}}
	        // };
	        //
	        // let objI = Immutable.fromJS(obj);
	        //
	        // //let m = Immutable.Map<string,number| Immutable.Map<number,string>>();
	        // //let x = m.set("13yyt333332", 12);
	        // //let y = m.set("xxx", Immutable.Map<number,string>());
	        //
	        // //let y=m.update("xxx",Immutable.Map<number,string>());
	        //
	        // console.log(objI.toString());
	        // let x = objI.getIn(['columns', 'Номер', 'colName']);
	        // console.log(x);
	    };
	    ;
	    AppDesigner.prototype.testAutoForm = function () {
	        var win2 = React.createElement(AutoForm_1.AutoForm, {sizeTo: "content"}, 
	            React.createElement(Input_1.Input, {type: Input_1.InputType.Text, bindObject: this, bindPropName: "str"}), 
	            React.createElement(Input_1.Input, {inputTab: "параметры1", inputCaption: "eee1", type: Input_1.InputType.Text, bindObject: this, bindPropName: "str"}), 
	            React.createElement(Input_1.Input, {inputTab: "параметры1", inputCaption: "eee2", type: Input_1.InputType.Text, bindObject: this, bindPropName: "str"}), 
	            React.createElement(Input_1.Input, {inputTab: "параметры1", inputCaption: "eee3", type: Input_1.InputType.Text, bindObject: this, bindPropName: "str"}), 
	            React.createElement(Input_1.Input, {inputTab: "параметры2", inputCaption: "eee4", type: Input_1.InputType.Text, bindObject: this, bindPropName: "str"}));
	        //        <Input inputTab="параметры" inputCaption="eee" type={InputType.Text} bindObject={this} bindPropName="str"/>
	        var openParam = {
	            title: "auto form",
	            top: 10,
	            left: 10
	        };
	        App_1.appInstance.desktop.openWindow(win2, openParam);
	    };
	    AppDesigner.prototype.testGrid = function () {
	        // executeSQL("select TOP 5000 Ключ,Номер,Название from [Вид ТМЦ] order by Номер")
	        //     .done((table) => {
	        //         let dataSource = table.rows.map<DesignedObject>((r) => {
	        //             return {Ключ: r["Ключ"], Номер: r["Номер"], Название: r["Название"]};
	        //         });
	        //
	        //
	        //         let ds = new TreeGridArrayDataSource(dataSource);
	        //         console.log("select TOP 5000 Ключ,Номер,Название from [Вид ТМЦ] order by Номер =>" + table.rows[0].getValue(1));
	        //
	        //         let win2 =
	        //             <TreeGrid
	        //                 dataSource={ dataSource }
	        //                 treeMode={true}
	        //                 hierarchyFieldName="Номер"
	        //                 hierarchyDelimiters="."
	        //                 autoExpandNodesToLevel={0}
	        //                 editable={true}
	        //                 denyDelete={true}
	        //             >
	        //                 <TreeGridColumns>
	        //                     <TreeGridColumn caption="Колонка2" propertyName="Номер" showHierarchyTree={false}
	        //                                     width={100}>
	        //                     </TreeGridColumn>
	        //                     <TreeGridColumn caption="Колонка3" propertyName="Название" showHierarchyTree={true}
	        //                                     width={200}>
	        //                     </TreeGridColumn>
	        //                     <TreeGridColumn caption="Колонка1" propertyName="Ключ" width={80}>
	        //                     </TreeGridColumn>
	        //                 </TreeGridColumns>
	        //             </TreeGrid>;
	        //
	        //         let openParam: OpenWindowParams = {
	        //             title: "auto form",
	        //             top: 10,
	        //             left: 10,
	        //             height: 800
	        //         };
	        //
	        //         appInstance.desktop.openWindow(win2, openParam);
	        //
	        //
	        //     })
	        //     .fail((err) => {
	        //         alert(err.message);
	        //     });
	        //
	    };
	    AppDesigner.prototype.testFlex = function () {
	        var win2 = React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent", style: { border: "2px dotted red", position: "absolute", top: 0, left: 0, right: 0, bottom: 0 }}, 
	            React.createElement(Fixed_1.Fixed, {style: { border: "2px dotted blue" }}, 
	                React.createElement(Button_1.Button, null, "Один")
	            ), 
	            React.createElement(Flex_1.Flex, {style: { border: "2px dotted green" }}, 
	                React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent", style: { border: "1px solid red" }}, 
	                    React.createElement(Fixed_1.Fixed, {style: { border: "1px solid blue" }}, 
	                        React.createElement(Button_1.Button, null, "------Один")
	                    ), 
	                    React.createElement(Flex_1.Flex, {style: { border: "1px solid green" }}, 
	                        React.createElement("div", {style: {}}, 
	                            React.createElement(Button_1.Button, null, "-------Два"), 
	                            React.createElement("br", null), 
	                            React.createElement(Button_1.Button, null, "--------Два1")), 
	                        React.createElement("table", null, 
	                            React.createElement("tr", null, 
	                                React.createElement("td", null, "1111"), 
	                                React.createElement("td", null, "2222")), 
	                            React.createElement("tr", null, 
	                                React.createElement("td", null, "1111"), 
	                                React.createElement("td", null, "2222")), 
	                            React.createElement("tr", null, 
	                                React.createElement("td", null, "1111"), 
	                                React.createElement("td", null, "2222")), 
	                            React.createElement("tr", null, 
	                                React.createElement("td", null, "1111"), 
	                                React.createElement("td", null, "2222")))), 
	                    React.createElement(Fixed_1.Fixed, {style: { border: "1px solid maroon" }}, 
	                        React.createElement(Button_1.Button, null, "--------Три")
	                    ))
	            ), 
	            React.createElement(Fixed_1.Fixed, {style: { border: "2px dotted maroon" }}, 
	                React.createElement(Button_1.Button, null, "Три")
	            ));
	        var openParam = {
	            title: "test FLEX",
	            top: 10,
	            left: 10
	        };
	        App_1.appInstance.desktop.openWindow(win2, openParam);
	    };
	    AppDesigner.prototype.testTableDesigner = function () {
	        var table = new SqlTable_1.SqlTable();
	        table.name = "Организация";
	        table.sqlname = "dbo.Организация";
	        table.addColumn(function (col) {
	            col.name = "Номер";
	            col.dataType = "varchar(10)";
	        });
	        table.addColumn(function (col) {
	            col.name = "Название";
	            col.dataType = "varchar(50)";
	        });
	        var win = React.createElement(ObjectDesigner_1.ObjectDesigner, {onChange: function () { console.log("table-change"); }, designedObject: table});
	        var openParam = {
	            title: "Организация",
	            top: 50,
	            left: 50
	        };
	        App_1.appInstance.desktop.openWindow(win, openParam);
	    };
	    ;
	    AppDesigner.prototype.testSnapshot = function () {
	        var table = new SqlTable_1.SqlTable();
	        table.name = "Организация";
	        table.sqlname = "dbo.Организация";
	        table.addColumn(function (col) {
	            col.name = "Номер";
	            col.dataType = "varchar(10)";
	        });
	        table.addColumn(function (col) {
	            col.name = "Название";
	            col.dataType = "varchar(50)";
	        });
	        console.log(table);
	        var s = new Snapshot_1.Snapshot();
	        s.saveObject(table, "table1");
	        console.log(table);
	        table.name = "жопа";
	        table.columns.length = 0;
	        console.log(table);
	        s.restoreObject(table, "table1");
	        console.log(table);
	        this.testSnapshotPreformance();
	    };
	    ;
	    AppDesigner.prototype.testSnapshotPreformance = function () {
	        var x = [];
	        for (var i = 0; i < 100; i++) {
	            var table = new SqlTable_1.SqlTable();
	            table.name = "Организация";
	            table.sqlname = "dbo.Организация";
	            table.addColumn(function (col) {
	                col.name = "Номер";
	                col.dataType = "varchar(10)";
	            });
	            table.addColumn(function (col) {
	                col.name = "Название";
	                col.dataType = "varchar(50)";
	            });
	            x.push(table);
	        }
	        var s = new Snapshot_1.Snapshot();
	        console.time("x1");
	        s.saveObject(x, "x");
	        console.timeEnd("x1");
	        x.length = 0;
	        s.restoreObject(x, "x");
	        console.log(x);
	    };
	    ;
	    AppDesigner.prototype.testGrid2 = function () {
	        var Vid = (function (_super) {
	            __extends(Vid, _super);
	            function Vid() {
	                _super.apply(this, arguments);
	            }
	            Vid.prototype.getClassName = function () {
	                return "Вид товара";
	            };
	            Vid.prototype.toString = function () {
	                return ("[" + this.Num + "]  ") + this.Name;
	            };
	            __decorate([
	                StringPropertyEditor_1.StringEditor(),
	                TreeGridColumn_1.GridColumn({ caption: "это номер" })
	            ], Vid.prototype, "Num", void 0);
	            __decorate([
	                StringPropertyEditor_1.StringEditor(),
	                TreeGridColumn_1.GridColumn({})
	            ], Vid.prototype, "Name", void 0);
	            return Vid;
	        }(DesignedObject_1.DesignedObject));
	        // executeSQL("select TOP 10 Ключ,Номер,Название from [Вид ТМЦ] order by Номер")
	        //     .done((table: DataTable|string) => {
	        //
	        //         if (table instanceof DataTable) {
	        //             let vids = table.rows.map<Vid>((r) => {
	        //
	        //                 let vid = new Vid();
	        //                 vid.Num = "*" + r["Номер"];
	        //                 vid.Name = "*" + r["Название"];
	        //
	        //                 return vid;
	        //             });
	        //
	        //             console.log("select TOP 10 ==> ");
	        //             //console.log(vids);
	        //
	        //             let dataSource = new TreeGridArrayDataSource(vids);
	        //             dataSource.params.getNewRow = () => new Vid();
	        //             //dataSource.params.getEmptyDataSourceMessage = () => "Все пусто, блин! Жми на газ!";
	        //             dataSource.params.getEmptyDataSourceMessage = () =>
	        //                 <span>"Все пусто, <i>блин!</i> Жми на газ!"</span>;
	        //
	        //             let win2 =
	        //                 <TreeGrid
	        //                     dataSource={dataSource}
	        //                     editable={true}
	        //                 >
	        //                 </TreeGrid>;
	        //
	        //             let openParam: OpenWindowParams = {
	        //                 title: "test grid 2",
	        //                 top: 20,
	        //                 left: 20,
	        //                 height: 500
	        //             };
	        //
	        //             appInstance.desktop.openWindow(win2, openParam);
	        //         }
	        //
	        //     })
	        //     .fail((err: any) => {
	        //         throwError(err);
	        //     });
	    };
	    AppDesigner.prototype.testWindowAutoSize = function () {
	        try {
	            if (true)
	                Error_1.throwError(new Error("333++"));
	        }
	        catch (error) {
	        }
	        var mag = "Get the current coordinates of the first element in the set of matched elements, relative to ";
	        var win2 = React.createElement("div", null, 
	            "Привет уроды", 
	            React.createElement(Button_1.Button, null, "Да и нет "), 
	            React.createElement(Button_1.Button, null, "Да и нет "), 
	            React.createElement("br", null), 
	            React.createElement(Button_1.Button, null, "Да и нет "), 
	            React.createElement("br", null), 
	            React.createElement(Button_1.Button, null, "Да и нет "), 
	            React.createElement("br", null), 
	            React.createElement(Button_1.Button, null, "Да и нет "), 
	            React.createElement("br", null), 
	            React.createElement(Button_1.Button, {onClick: function (sender, e) {
	                console.log("sender");
	                console.log(sender);
	                App_1.appInstance.desktop.openMessageWindow(mag, { style: "information", parentWindowId: sender.getParentWindowId() });
	                console.log(e.target);
	                e.stopPropagation();
	            }}, "Новое"));
	        var openParam = {
	            title: "test AUTOSIZE",
	            autoSize: "content",
	            autoPosition: "desktop-center"
	        };
	        App_1.appInstance.desktop.openWindow(win2, openParam);
	    };
	    AppDesigner.prototype.testObservable = function () {
	        var db = new SqlDb_1.SqlDb();
	        //        db.dbName = "schema-pg";
	        //        db.dialect = "pg";
	        //        db.dbName = "schema-mssql";
	        //      db.dialect = "mssql";
	        db.dbName = "schema-mysql";
	        db.dialect = "mysql";
	        db.selectToObject("SELECT * FROM sakila.film", {}, "assign").done(function (obj) {
	            console.log(obj);
	        });
	        db.executeSQL("SELECT * FROM sakila.film")
	            .then(function (obj) {
	            console.log(obj);
	        })
	            .catch(function (err) {
	            console.error(err);
	        });
	        // db.selectToObject<any>("SELECT * FROM sakila.film; select 'qqq' as qqq, now() as now, 0xc9c9c8c7c6 as blober, null as null777", {}, "assign").done((obj) => {
	        //     console.log(obj);
	        // });
	        // db.selectToObject<any>("select E'\\x01020304' as bbb, * from \"SchemaObject\"", {}, "assign").done((obj) => {
	        //     console.log(obj);
	        // });
	        //
	        //
	        // let sql = new CreateTableStmt();
	        // sql.table("SchemaObject333");
	        // sql.column({column: "id", dataType: "guid", notNull: true, primaryKey: true});
	        // sql.column("parentObjectID", "guid");
	        // sql.column("name", "string", 128);
	        // sql.column("description", "text");
	        //
	        // sql.column("createDateTime", "datetime");
	        // sql.column("updateDateTime", "datetime");
	        // sql.column("createUserId", "guid");
	        // sql.column("updateUserId", "guid");
	        //
	        // sql.column("lockByUserId", "guid");
	        // sql.column("lockDateTime", "datetime");
	        //
	        // console.log(sql.toSql("pg"));
	        // console.log(sql.toSql("mysql"));
	        //
	        // db.executeSQL(sql)
	        //     .then((fake) => {
	        //         console.log("create SchemaObject333 ok");
	        //     })
	        //     .catch((error) => {
	        //         throwError(error);
	        //     });
	        //throwError("жопа");
	        // interface xxx {
	        //     Жопа?: string;
	        // }
	        //
	        // let sql = new SelectStmt();
	        // sql.column("*");
	        // sql.addFrom("SchemaObject");
	        // sql.addWhere("name", "LIKE", "'%таблица%'");
	        //
	        // let x: SchemaObject = new SchemaObject(new Schema());
	        // db.selectToObject<SchemaObject>(sql, x, "assign").done((obj) => {
	        //     console.log(x);
	        //
	        // });
	        //
	        // db.selectToObject<any>(sql, {}, "assign").done((obj) => {
	        //     console.log(obj);
	        //
	        // });
	        //
	        // let sql2 = new UpdateStmt();
	        // sql2.table("SchemaObject");
	        // sql2.addColumnAndValue("JSON", "'это json 33'");
	        // sql2.addColumnAndValue("JSON2", "'это json 332'");
	        // sql2.addWhere("name", "LIKE", "'%НоваяТаблица12%'");
	        // sql2.addWhere("id", "=", 12);
	        //
	        // console.log(sql2.toSql("mssql"));
	        //
	        // db.selectToObject<SchemaObject>("select top 1 * from SchemaObject", x).done((obj) => {
	        //     console.log(x);
	        //
	        // });
	        // db.executeSQL("select * from SchemaObject")
	        //     .then((table) => {
	        //         console.log(table);
	        //     })
	        //     .catch((error) => {
	        //         throwError(error);
	        //     });
	        // let x=Sql.select("номер","название",":qwert as 12")
	        //     .from(["Организация","org"])
	        //     .where("город",">=","Страна")
	        //     .andWhere("город2","!=","Страна2")
	        //     ;//.eq("");
	        // let x = new SelectStmt();
	        // x.column("номер");
	        // x.column("название");
	        // x.addFrom("Организация");
	        //
	        // console.log(x.toSql("mssql"));
	        // let xxx: any = {};
	        // let proxyHandler = {
	        //     get: (target: any, p: PropertyKey, receiver: any): any => {
	        //         //console.log("handlerGet???");
	        //         //console.log(p);
	        //         return target[p];
	        //     },
	        //     set: (target: any, p: PropertyKey, value: any, receiver: any): any => {
	        //         console.log("handlerSet");
	        //         console.log(p);
	        //         console.log(value);
	        //         target[p] = value;
	        //         return true;
	        //     }
	        // };
	        // console.log("-----Proxy-----");
	        // let proxy = new Proxy(xxx, proxyHandler);
	        // proxy.x111 = 333;
	        // proxy.o = {};
	        // proxy.o.eee = "eee1";
	        //console.log(proxy.x111);
	        //console.log(proxy);
	        // let x = new Object();
	        //
	        // class A extends Proxy<Array<any>> {
	        //     constructor() {
	        //
	        //         let handler: ProxyHandler<Array<any>> = {
	        //             get: (target: Array<any>, p: PropertyKey, receiver: any): any => {
	        //                 console.log("handlerGet");
	        //             }
	        //         };
	        //
	        //         super([], handler);
	        //     }
	        //
	        // }
	        //
	        // console.log("9");
	        // let a = new A();
	        // a.push(10);
	        // console.log("10");
	    };
	    AppDesigner.prototype.testOpenSchemaForm = function () {
	        var form = new SchemaForm_1.SchemaForm(Schema_1.getSchema());
	        var but1 = new ButtonControl_1.ButtonControl();
	        but1.text = "Буттон1";
	        form.children.push(but1);
	        var but2 = new ButtonControl_1.ButtonControl();
	        but2.text = "Буттон2";
	        form.children.push(but2);
	        var panel = new PanelControl_1.PanelControl();
	        form.children.push(panel);
	        var but3 = new ButtonControl_1.ButtonControl();
	        but3.text = "Буттон3";
	        panel.children.push(but3);
	        var but4 = new ButtonControl_1.ButtonControl();
	        but4.text = "Буттон4";
	        panel.children.push(but4);
	        var openParam = {
	            title: "окно 1 222222",
	            top: 250,
	            left: 250
	        };
	        App_1.appInstance.desktop.openSchemaForm(form, openParam);
	    };
	    ;
	    AppDesigner.prototype.testSchemaFormDesigner = function () {
	        Auth_1.checkAuth().then(function () {
	            var form = new SchemaForm_1.SchemaForm(Schema_1.getSchema());
	            form.id = "1F2D95A0-5AF4-11E6-91EA-8FBA7805DE8D";
	            var v = new LocalVariableControl_1.LocalVariableControl();
	            v.variableName = "ИмяКнопки";
	            v.variableType = "string";
	            form.children.push(v);
	            var v1 = new LocalVariableControl_1.LocalVariableControl();
	            v1.variableName = "ДатаКнопки";
	            v1.variableType = "date";
	            form.children.push(v1);
	            var but1 = new ButtonControl_1.ButtonControl();
	            but1.text = "Буттон 1222";
	            form.children.push(but1);
	            var but2 = new ButtonControl_1.ButtonControl();
	            but2.text = new OneWayBinder_StringValue_1.OneWayBinder_StringValue("Буттон 2222-222");
	            //let x=new OneWayBinder_NumberValue(100);
	            form.children.push(but2);
	            var panel = new PanelControl_1.PanelControl();
	            form.children.push(panel);
	            var but3 = new ButtonControl_1.ButtonControl();
	            but3.text = "Буттон3";
	            panel.children.push(but3);
	            var but4 = new ButtonControl_1.ButtonControl();
	            but4.text = "Буттон4";
	            panel.children.push(but4);
	            var panel1 = new PanelControl_1.PanelControl();
	            form.children.push(panel1);
	            var but5 = new ButtonControl_1.ButtonControl();
	            but5.text = "Буттон5";
	            panel1.children.push(but5);
	            var but6 = new ButtonControl_1.ButtonControl();
	            but6.text = "Буттон6";
	            panel1.children.push(but6);
	            var openParam = {
	                title: "дизайнер компонента",
	                top: 50,
	                left: 50
	            };
	            App_1.appInstance.desktop.openSchemaComponentDesigner(form, openParam);
	        });
	    };
	    ;
	    AppDesigner.prototype.testOpenSchemaFormDesigner = function () {
	        Schema_1.getSchema().getObject("1F2D95A0-5AF4-11E6-91EA-8FBA7805DE8D").then(function (form) {
	            var openParam = {
	                title: "дизайнер компонента",
	                top: 50,
	                left: 50
	            };
	            App_1.appInstance.desktop.openSchemaComponentDesigner(form, openParam);
	        });
	    };
	    ;
	    AppDesigner.prototype.render = function () {
	        var _this = this;
	        this.addClassName("app-designer");
	        this.addProps({ sizeTo: "parent" });
	        return (React.createElement(App_1.App, __assign({}, this.getRenderProps()), 
	            React.createElement(Layout_1.Layout, {sizeTo: "parent", type: "column"}, 
	                React.createElement(Fixed_1.Fixed, {className: "header1"}, "Fixed Header"), 
	                React.createElement(Flex_1.Flex, null, 
	                    React.createElement(Layout_1.Layout, {type: "row", sizeTo: "parent"}, 
	                        React.createElement(Fixed_1.Fixed, {className: "sidebar", style: { width: this.sideWidth }}, 
	                            "Fixed Sidebar 123", 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testOpenWindow(); }}, " test open window"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testOpenObjectDesigner(); }}, "open designer"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testImmutable(); }}, "testImmutable"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testAutoForm(); }}, "test autoform"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testGrid(); }}, "test GRID"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testFlex(); }}, "test FLEX"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testTableDesigner(); }}, "test TABLE DESIGNER"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testSnapshot(); }}, "test SNAPSHOT"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testGrid2(); }}, "test GRID-2"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testWindowAutoSize(); }}, "test WIN AUTOSIZE"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testObservable(); }}, "test OBSERVABLE"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testOpenSchemaForm(); }}, "test SchemaForm"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testSchemaFormDesigner(); }}, "test SchemaFormDesigner"), 
	                            React.createElement("br", null), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { _this.testOpenSchemaFormDesigner(); }}, "test OpenSchemaFormDesigner"), 
	                            React.createElement("br", null), 
	                            React.createElement("button", {onClick: function () { TestSelectControlForm_1.showTestSelectControlForm(); }}, "showTestSelectControlForm")), 
	                        React.createElement(Flex_1.Flex, {className: "XXXcontent"}, 
	                            React.createElement(Desktop_1.Desktop, null, 
	                                React.createElement(Movable_1.Movable, {onMoveStart: this.moveStart.bind(this)}, "MOV")
	                            )
	                        ))
	                ))
	        ));
	    };
	    return AppDesigner;
	}(Component_1.Component));
	exports.AppDesigner = AppDesigner;


/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = _;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	var ComponentState = (function () {
	    function ComponentState(component) {
	        this.component = component;
	    }
	    ComponentState.prototype.forceUpdate = function () {
	        this.component.forceUpdate();
	    };
	    return ComponentState;
	}());
	exports.ComponentState = ComponentState;
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(props, context /*stateClass?: Function*/) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.plugins = [];
	        this.renderClasses = [];
	        this.renderProps = {};
	        this.renderStyles = {};
	        this.componentDidMount = function () {
	            _this.didMount();
	        };
	        this.componentWillMount = function () {
	            _this.willMount();
	            if (_this.props.onWillMount)
	                _this.props.onWillMount(_this.state);
	        };
	        this.componentWillReceiveProps = function (nextProps) {
	            _this.willReceiveProps(nextProps);
	        };
	        // protected shallowCompare(nextProps: P): boolean {
	        //     //console.log("shallow-0 " + this.constructor.toString().substring(0, 30));
	        //     //console.time("22");
	        //     let ret = shallowCompare(this, nextProps, this.state);
	        //     //console.timeEnd("22");
	        //     return ret;
	        // }
	        //
	        // private shouldComponentUpdate = (nextProps: P, nextState: S) => {
	        //     return this.shallowCompare(nextProps);
	        // }
	        this.componentDidUpdate = function (prevProps, prevState, prevContext) {
	            _this.didUpdate(prevProps, prevState, prevContext);
	        };
	        this.componentWillUnmount = function () {
	            _this.willUnmount();
	        };
	        this.props = props;
	        // this.plugins.forEach((plug) => {
	        //     let plugInstance: any = new plug(this);
	        //     this.plugins.push(plugInstance);
	        // });
	    }
	    Component.prototype.getParentWindow = function () {
	        var parent = ReactDOM.findDOMNode(this);
	        while (parent) {
	            if (parent.$$window)
	                return parent.$$window;
	            parent = parent.parentElement;
	        }
	        return null;
	    };
	    Component.prototype.getParentDesktop = function () {
	        var parent = ReactDOM.findDOMNode(this);
	        while (parent) {
	            if (parent.$$desktop)
	                return parent.$$desktop;
	            parent = parent.parentElement;
	        }
	        Error_1.throwError("getParentDesktop(): desktop not found");
	        return {}; // fake typescript 2
	    };
	    Component.prototype.getParentWindowId = function () {
	        var parentWin = this.getParentWindow();
	        if (parentWin) {
	            return parentWin.state.id;
	        }
	        else
	            return "";
	    };
	    Component.prototype.addProps = function (props) {
	        _.assignWith(this.renderProps, props, function (objectValue, sourceValue, key) {
	            if (key === "class" || key === "className")
	                console.error("invalid property '" + key + "', use functions addClassName(), toggleClassName()");
	            if (key === "style")
	                console.error("invalid property '" + key + "', use functions addStyles(), removeStyle()");
	            return sourceValue;
	        });
	    };
	    Component.prototype.addStyles = function (styles) {
	        _.assign(this.renderStyles, styles);
	    };
	    Component.prototype.clearStyles = function () {
	        this.renderStyles = {};
	    };
	    Component.prototype.removeStyle = function (style) {
	        delete this.renderStyles[style];
	    };
	    Component.prototype.removeStyles = function (styles) {
	        var _this = this;
	        styles.forEach(function (style) {
	            delete _this.renderStyles[style];
	        });
	    };
	    Component.prototype.didMount = function () {
	        this.plugins.forEach(function (plug) {
	            plug.didMount();
	        });
	    };
	    Component.prototype.willMount = function () {
	        this.plugins.forEach(function (plug) {
	            plug.willMount();
	        });
	    };
	    Component.prototype.willReceiveProps = function (nextProps) {
	        this.plugins.forEach(function (plug) {
	            plug.willReceiveProps(nextProps);
	        });
	    };
	    Component.prototype.isPropsEqual = function (obj1, obj2, excludeProps) {
	        //Loop through properties in object 1
	        for (var p in obj1) {
	            if (excludeProps && excludeProps.indexOf(p) >= 0)
	                continue;
	            //Check property exists on both objects
	            if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p))
	                return false;
	            if (obj1[p] !== obj2[p]) {
	                //console.log("1 not equal " + p);
	                return false;
	            }
	        }
	        //Check object 2 for any extra properties
	        for (var p in obj2) {
	            if (typeof (obj1[p]) === "undefined" && typeof (obj2[p]) !== "undefined") {
	                //console.log("2 not equal " + p);
	                //console.log(obj1);
	                //console.log(obj2);
	                return false;
	            }
	        }
	        return true;
	    };
	    ;
	    Component.prototype.didUpdate = function (prevProps, prevState, prevContext) {
	        this.plugins.forEach(function (plug) {
	            plug.willReceiveProps(prevProps);
	        });
	    };
	    Component.prototype.willUnmount = function () {
	        this.plugins.forEach(function (plug) {
	            plug.willUnmount();
	        });
	    };
	    Component.prototype.addClassName = function (classNames) {
	        var _this = this;
	        if (classNames)
	            classNames.split(" ").forEach(function (name) {
	                if (_this.renderClasses.indexOf(name) === -1)
	                    _this.renderClasses.push(name);
	            });
	    };
	    Component.prototype.toggleClassName = function (boolValue, trueClassNames, falseClassNames) {
	        if (boolValue) {
	            this.addClassName(trueClassNames);
	            if (falseClassNames)
	                this.removeClassName(falseClassNames);
	        }
	        else {
	            this.removeClassName(trueClassNames);
	            if (falseClassNames)
	                this.addClassName(falseClassNames);
	        }
	    };
	    Component.prototype.removeClassName = function (classNames) {
	        var _this = this;
	        if (classNames)
	            classNames.split(" ").forEach(function (name) {
	                if (_this.renderClasses.indexOf(name) !== -1)
	                    _this.renderClasses.splice(_this.renderClasses.indexOf(name), 1);
	            });
	    };
	    Component.prototype.renderClassName = function () {
	        this.addClassName(this.props.className);
	        if (this.renderClasses.length > 0)
	            return this.renderClasses.join(" ");
	        else
	            return null;
	    };
	    Component.prototype.getRenderProps = function () {
	        // if (this.props.buhtaControl)
	        //     this.props.buhtaControl.reactElement = this;
	        this.renderProps.className = this.renderClassName();
	        this.renderProps.style = this.renderStyles;
	        _.assign(this.renderProps.style, this.props.style);
	        return this.renderProps;
	    };
	    // getReactElementClassName(element): string {
	    //     return element && element.type ? element.type.toString().split("(")[0].split(" ")[1] : "";
	    // }
	    Component.prototype.getChildren = function (childType) {
	        var ret = [];
	        React.Children.toArray(this.props.children).forEach(function (child) {
	            if (childType === child.type)
	                ret.push(child);
	        });
	        return ret;
	    };
	    Component.prototype.getChildrenOfProps = function (props, childType) {
	        var ret = [];
	        React.Children.toArray(props.children).forEach(function (child) {
	            if (childType === child.type)
	                ret.push(child);
	        });
	        return ret;
	    };
	    Component.prototype.showErrorWindow = function (messageContent) {
	        var params = {
	            style: "error",
	            parentWindowId: this.getParentWindowId(),
	            okButtonContent: "Закрыть",
	        };
	        this.getParentDesktop().openMessageWindow(messageContent, params);
	    };
	    Component.prototype.showConfirmationWindow = function (messageContent, resultCallback, okButtonText, cancelButtonText) {
	        var params = {
	            style: "confirmation",
	            parentWindowId: this.getParentWindowId(),
	            okButtonContent: okButtonText || "Да",
	            cancelButtonContent: cancelButtonText || "Нет",
	            resultCallback: resultCallback
	        };
	        this.getParentDesktop().openMessageWindow(messageContent, params);
	    };
	    Component.prototype.showDeleteConfirmationWindow = function (messageContent, resultCallback, okButtonText, cancelButtonText) {
	        var params = {
	            style: "danger",
	            parentWindowId: this.getParentWindowId(),
	            okButtonContent: okButtonText || "Да",
	            cancelButtonContent: cancelButtonText || "Нет",
	            resultCallback: resultCallback
	        };
	        this.getParentDesktop().openMessageWindow(messageContent, params);
	    };
	    Component.prototype.closeParentWindow = function () {
	        this.getParentDesktop().closeWindow(this.getParentWindowId());
	    };
	    Component.contextTypes = {
	        parentDesktop: React.PropTypes.any,
	        parentWindow: React.PropTypes.any
	    };
	    return Component;
	}(React.Component));
	exports.Component = Component;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	function throwError(error) {
	    // todo: отключить в production режиме
	    console.error(error);
	    var err;
	    if (error instanceof Error)
	        err = error;
	    else
	        err = new Error(error);
	    err.$$isThrowError = true;
	    throw err;
	}
	exports.throwError = throwError;
	function throwAbstractError() {
	    // todo: отключить в production режиме
	    console.error("abstract error");
	    var err;
	    err = new Error("abstract error");
	    err.$$isThrowError = true;
	    throw err;
	}
	exports.throwAbstractError = throwAbstractError;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Layout = (function (_super) {
	    __extends(Layout, _super);
	    function Layout() {
	        _super.apply(this, arguments);
	    }
	    Layout.prototype.render = function () {
	        this.clearStyles();
	        this.addClassName("Layout");
	        this.addStyles({ display: "flex", position: "relative", flexDirection: this.props.type });
	        if (this.props.sizeTo === "parent") {
	            this.addStyles({ height: "100%" });
	        }
	        // if (this.props.sizeTo === "parent") {
	        //     let style: any = {
	        //         display: "flex",
	        //         height:"100%",
	        //         position: "relative",
	        //         //position: "absolute",
	        //         // left: 0,
	        //         // right: 0,
	        //         // top: 0,
	        //         // bottom: 0,
	        //
	        //        // overflow: "auto"
	        //     };
	        //     style.flexDirection = this.props.type;
	        //     this.addStyles(style);
	        // }
	        // else {
	        //     let style: any = {
	        //         display: "flex",
	        //         position: "relative",
	        //         //overflow: "auto"
	        //     };
	        //     style.flexDirection = this.props.type;
	        //     this.addStyles(style);
	        // }
	        this.addProps({ onClick: this.props.onClick });
	        return (React.createElement("div", __assign({}, this.getRenderProps()), this.props.children));
	    };
	    return Layout;
	}(Component_1.Component));
	exports.Layout = Layout;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Fixed = (function (_super) {
	    __extends(Fixed, _super);
	    function Fixed() {
	        _super.apply(this, arguments);
	    }
	    Fixed.prototype.render = function () {
	        this.addClassName("Fixed");
	        this.clearStyles();
	        var style = {
	            position: "relative",
	            flex: "0 0 auto"
	        };
	        this.addStyles(style);
	        return (React.createElement("div", __assign({}, this.getRenderProps()), this.props.children));
	    };
	    return Fixed;
	}(Component_1.Component));
	exports.Fixed = Fixed;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var Component_1 = __webpack_require__(5);
	var React = __webpack_require__(1);
	var Flex = (function (_super) {
	    __extends(Flex, _super);
	    function Flex() {
	        _super.apply(this, arguments);
	    }
	    Flex.prototype.render = function () {
	        this.addClassName("Flex");
	        this.clearStyles();
	        var style = {
	            flex: "1",
	            position: 'relative',
	            overflow: "auto"
	        };
	        this.addStyles(style);
	        return (React.createElement("div", __assign({}, this.getRenderProps()), this.props.children));
	    };
	    return Flex;
	}(Component_1.Component));
	exports.Flex = Flex;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var DesignedObject_1 = __webpack_require__(11);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var TestBuhtaObject1 = (function (_super) {
	    __extends(TestBuhtaObject1, _super);
	    function TestBuhtaObject1() {
	        _super.apply(this, arguments);
	    }
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Фамилия",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Фамилия абонента"
	        })
	    ], TestBuhtaObject1.prototype, "firstName", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя"
	        })
	    ], TestBuhtaObject1.prototype, "lastName", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Отчество",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Отчество абонента"
	        })
	    ], TestBuhtaObject1.prototype, "surName", void 0);
	    return TestBuhtaObject1;
	}(DesignedObject_1.DesignedObject));
	exports.TestBuhtaObject1 = TestBuhtaObject1;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	//import {ObservableOnChangeHandler} from "../buhta-core/Observable";
	var getObjectConstructorName_1 = __webpack_require__(12);
	var DesignedObject = (function () {
	    function DesignedObject() {
	        var _this = this;
	        this.$$unwatchedProps = ["propertyEditors", "$$unwatchedProps"];
	        //$$onChange: ObservableOnChangeHandler<DesignedObject>;
	        this.$$getHostConstructor = function () {
	            return "buhta." + getObjectConstructorName_1.getObjectConstructorName(_this);
	        };
	        // id: string;
	        // name: string;
	        // className: string;
	        // inheritFrom: string;
	        // moduleName: string;
	        // references: Array<string> = [];
	        //private static propertyEditors: { [propertyName: string]: PropertyEditorInfo; } = {};
	        // static registerPropertyEditor(propertyName: string,
	        //                               propertyPage: string,
	        //                               propertyGroup: string,
	        //                               propertyDescription: string,
	        //                               objectType: typeof DesignedObject,
	        //                               editorType: typeof BasePropertyEditor,
	        //                               propertyType: typeof Object | typeof String) {
	        //
	        //     let info: PropertyEditorInfo = {
	        //         propertyName: propertyName,
	        //         propertyPage: propertyPage,
	        //         propertyGroup: propertyGroup,
	        //         propertyDescription: propertyDescription,
	        //         objectType: objectType,
	        //         editorType: editorType,
	        //         propertyType: propertyType,
	        //     }
	        //
	        //     DesignedObject.propertyEditors[propertyName] = info;
	        //
	        //     console.log("registerPropertyEditor " + propertyName);
	        //     console.log(info);
	        //
	        // }
	        // get propertyEditors():{ [propertyName: string]: PropertyEditorInfo; }{
	        //     return (DesignedObject as any).$$propertyEditors;
	        // }
	        // registerPropertyEditors() {
	        //     this.propertyEditors.length = 0;
	        // }
	        //
	        //
	        // registerPropertyEditor(propertyName: string, propertyEditor: BasePropertyEditor) {
	        //     propertyEditor.designedObject = this;
	        //     propertyEditor.propertyName = propertyName;
	        //     this.propertyEditors.push(propertyEditor);
	        // }
	        // emitTsCode(): string {
	        //
	        //     this.registerPropertyEditors();
	        //
	        //     let tsCode = new TsCode(this.moduleName, this.className, this.inheritFrom, this.references);
	        //
	        //     this.propertyEditors.forEach((editor) => {
	        //         editor.designedObject = this;
	        //         editor.emitTsCode(tsCode);
	        //     });
	        //
	        //     return tsCode.getCode();
	        // }
	        this.testProc1 = function () {
	        };
	    }
	    DesignedObject.prototype.getClassName = function () {
	        return "Объект";
	    };
	    DesignedObject.prototype.toString = function () {
	        var funcNameRegex = /function (.{1,})\(/;
	        var results = (funcNameRegex).exec((this).constructor.toString());
	        return (results && results.length > 1) ? results[1] : "";
	    };
	    return DesignedObject;
	}());
	exports.DesignedObject = DesignedObject;


/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	function getObjectConstructorName(obj) {
	    var funcNameRegex = /function (.{1,})\(/;
	    var results = (funcNameRegex).exec((obj).constructor.toString());
	    return (results && results.length > 1) ? results[1] : "";
	}
	exports.getObjectConstructorName = getObjectConstructorName;
	;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var BasePropertyEditor_1 = __webpack_require__(14);
	var registerPropertyEditor_1 = __webpack_require__(15);
	var Input_1 = __webpack_require__(16);
	var StringPropertyEditor = (function (_super) {
	    __extends(StringPropertyEditor, _super);
	    function StringPropertyEditor() {
	        _super.apply(this, arguments);
	    }
	    StringPropertyEditor.prototype.handleChange = function (event) {
	        // this.props.designedObject[this.props.propertyName] = (event.target as any).value;
	        // console.log("change === " + this.props.propertyName + " " + this.props.designedObject[this.props.propertyName]);
	    };
	    StringPropertyEditor.prototype.render = function () {
	        var autoFormControlProps = {
	            inputCaption: this.props.inputCaption,
	            inputTab: this.props.inputTab,
	            inputGroup: this.props.inputGroup,
	            inputDescription: this.props.inputDescription
	        };
	        this.addProps(autoFormControlProps);
	        return (React.createElement(Input_1.Input, __assign({type: Input_1.InputType.Text, bindObject: this.props.designedObject, bindPropName: this.props.propertyName, onChange: this.props.onChange}, this.getRenderProps())));
	    };
	    return StringPropertyEditor;
	}(BasePropertyEditor_1.BasePropertyEditor));
	exports.StringPropertyEditor = StringPropertyEditor;
	function StringEditor(params) {
	    if (params === void 0) { params = {}; }
	    return function (target, propertyName) {
	        //  console.log({target, propertyName, constr:target.constructor});
	        var propertyEditorInfo = {
	            propertyName: propertyName,
	            objectType: target.constructor,
	            editorType: StringPropertyEditor,
	            propertyType: String
	        };
	        _.assign(propertyEditorInfo, params);
	        registerPropertyEditor_1.registerPropertyEditor(propertyEditorInfo);
	        // registerPropertyEditor({
	        //     inputCaption: params.inputCaption,
	        //     inputTab: params.inputTab,
	        //     inputGroup: params.inputGroup,
	        //     inputDescription: params.inputDescription,
	        //     propertyName: propertyName,
	        //
	        //     objectType: target.constructor,
	        //     editorType: StringPropertyEditor,
	        //     propertyType: String
	        // });
	    };
	}
	exports.StringEditor = StringEditor;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var BasePropertyEditor = (function (_super) {
	    __extends(BasePropertyEditor, _super);
	    function BasePropertyEditor(props, context) {
	        _super.call(this, props, context);
	    }
	    // propertyName: string;
	    // designedObject: DesignedObject;
	    // getPropertyType(): string {
	    //     return "Object";
	    // }
	    // renderEditor(index: number): JSX.Element {
	    //     return (<span>editor not defined</span>);
	    // }
	    BasePropertyEditor.prototype.render = function () {
	        return (React.createElement("span", null, "property editor not defined"));
	    };
	    return BasePropertyEditor;
	}(Component_1.Component));
	exports.BasePropertyEditor = BasePropertyEditor;


/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	function registerPropertyEditor(editor) {
	    var objType = editor.objectType;
	    if (!objType.$$propertyEditors)
	        objType.$$propertyEditors = [];
	    objType.$$propertyEditors.push(editor);
	    //console.log("registerPropertyEditor " + editor.propertyName);
	    //console.log(editor);
	}
	exports.registerPropertyEditor = registerPropertyEditor;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	(function (InputType) {
	    InputType[InputType["Text"] = 0] = "Text";
	    InputType[InputType["Number"] = 1] = "Number";
	    InputType[InputType["Date"] = 2] = "Date";
	})(exports.InputType || (exports.InputType = {}));
	var InputType = exports.InputType;
	var Input = (function (_super) {
	    __extends(Input, _super);
	    function Input(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.getText = function () {
	            if (_this.props.bindObject && _this.props.bindPropName) {
	                if (_this.props.bindObject[_this.props.bindPropName])
	                    return _this.props.bindObject[_this.props.bindPropName].toString();
	                else
	                    return "";
	            }
	            else
	                return "<unbinded>";
	        };
	        this.getNumber = function () {
	            if (_this.props.bindObject && _this.props.bindPropName) {
	                if (_this.props.bindObject[_this.props.bindPropName])
	                    return _this.props.bindObject[_this.props.bindPropName].toString();
	                else
	                    return "";
	            }
	            else
	                return "<unbinded>";
	        };
	        this.handleOnChangeText = function (event) {
	            if (_this.props.bindObject && _this.props.bindPropName)
	                _this.props.bindObject[_this.props.bindPropName] = event.target.value;
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.handleOnChangeNumber = function (event) {
	            if (_this.props.bindObject && _this.props.bindPropName)
	                _this.props.bindObject[_this.props.bindPropName] = event.target.value;
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.props = props;
	    }
	    Input.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	    };
	    Input.prototype.render = function () {
	        switch (this.props.type) {
	            case InputType.Text:
	                return this.renderText();
	            case InputType.Number:
	                return this.renderNumber();
	            default:
	                throw "Input.render():=> unknown InputType '" + this.props.type + "'";
	        }
	    };
	    Input.prototype.renderText = function () {
	        this.clearStyles();
	        this.addClassName("input");
	        this.addStyles({ width: 300 });
	        //   this.addStyles(this.props.style);
	        return (React.createElement("input", __assign({type: "text", value: this.getText(), onChange: this.handleOnChangeText}, this.getRenderProps())));
	    };
	    Input.prototype.renderNumber = function () {
	        this.clearStyles();
	        this.addClassName("input");
	        this.addStyles({ width: 150 });
	        return (React.createElement("input", __assign({type: "number", value: this.getNumber(), onChange: this.handleOnChangeNumber}, this.getRenderProps())));
	    };
	    return Input;
	}(Component_1.Component));
	exports.Input = Input;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var DesignedObject_1 = __webpack_require__(11);
	var BasePropertyEditor_1 = __webpack_require__(14);
	var getPropertyEditors_1 = __webpack_require__(18);
	var AutoForm_1 = __webpack_require__(19);
	var Snapshot_1 = __webpack_require__(26);
	//import {Observable} from "../../buhta-core/Observable";
	var deepClone_1 = __webpack_require__(27);
	var isDeepEqual_1 = __webpack_require__(29);
	var ObjectDesigner = (function (_super) {
	    __extends(ObjectDesigner, _super);
	    function ObjectDesigner(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.snapshot = new Snapshot_1.Snapshot();
	        this.needToSave = false;
	        this.handleSaveChanges = function () {
	            console.log("save-changes");
	            //console.log(this.props.designedObject);
	            _.assign(_this.props.designedObject, _this.clonedDesignedObject);
	            if (_this.props.onSaveChanges)
	                _this.props.onSaveChanges();
	        };
	        this.handleCancelChanges = function () {
	            console.log("cancel-changes");
	            //this.snapshot.restoreObject(this.props.designedObject, "root");
	            if (_this.props.onCancelChanges)
	                _this.props.onCancelChanges();
	            //console.log(this.props.designedObject);
	        };
	        this.props = props;
	    }
	    //observableDesignedObject: DesignedObject;
	    ObjectDesigner.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        this.needToSave = false;
	        this.clonedDesignedObject = deepClone_1.deepClone(this.props.designedObject);
	    };
	    ObjectDesigner.prototype.startCheckDesignedObjectIsChanged = function () {
	        var _this = this;
	        this.compareInterval = setInterval(function () {
	            if (!isDeepEqual_1.isDeepEqual(_this.clonedDesignedObject, _this.props.designedObject)) {
	                clearInterval(_this.compareInterval);
	                _this.needToSave = true;
	                _this.forceUpdate();
	            }
	        }, 200);
	    };
	    ObjectDesigner.prototype.willUnmount = function () {
	        _super.prototype.willUnmount.call(this);
	        clearInterval(this.compareInterval);
	    };
	    ObjectDesigner.prototype.didMount = function () {
	        _super.prototype.didMount.call(this);
	        this.startCheckDesignedObjectIsChanged();
	        //this.snapshot.saveObject(this.props.designedObject, "root");
	    };
	    ObjectDesigner.prototype.renderPropertyDesigners = function () {
	        var _this = this;
	        var ret = [];
	        getPropertyEditors_1.getPropertyEditors(this.clonedDesignedObject).forEach(function (propInfo, index) {
	            //console.log(propInfo);
	            var editorProps = {
	                designedObject: _this.clonedDesignedObject,
	                //propertyEditorInfo: propInfo,
	                index: index,
	                key: index,
	                onChange: _this.props.onChange,
	                // это из propInfo: PropertyEditorInfo, заполяется далее через _.assign
	                propertyName: "",
	                objectType: DesignedObject_1.DesignedObject,
	                editorType: BasePropertyEditor_1.BasePropertyEditor,
	                propertyType: null
	            };
	            _.assign(editorProps, propInfo);
	            if (!editorProps.inputCaption)
	                editorProps.inputCaption = editorProps.propertyName;
	            //console.log(editorProps);
	            ret.push(React.createElement(propInfo.editorType, editorProps, {}));
	        });
	        return ret;
	    };
	    ObjectDesigner.prototype.render = function () {
	        this.addClassName("object-designer");
	        this.addProps({ onChange: this.props.onChange });
	        return (React.createElement(AutoForm_1.AutoForm, __assign({sizeTo: "parent", onSaveChanges: this.handleSaveChanges, onCancelChanges: this.handleCancelChanges, needToSave: this.needToSave}, this.getRenderProps()), 
	            "Object designer", 
	            this.renderPropertyDesigners()));
	    };
	    return ObjectDesigner;
	}(Component_1.Component));
	exports.ObjectDesigner = ObjectDesigner;


/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	function getPropertyEditors(obj) {
	    var editors = obj.constructor.$$propertyEditors;
	    editors = editors.filter(function (edt) { return obj instanceof edt.objectType; });
	    //console.log("getPropertyEditors") ;
	    //console.log(editors);
	    return editors;
	}
	exports.getPropertyEditors = getPropertyEditors;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var Tabs_1 = __webpack_require__(20);
	var Form_1 = __webpack_require__(21);
	var Layout_1 = __webpack_require__(7);
	var Flex_1 = __webpack_require__(9);
	var Fixed_1 = __webpack_require__(8);
	var Button_1 = __webpack_require__(22);
	var emptyTabName = "закладка";
	var AutoForm = (function (_super) {
	    __extends(AutoForm, _super);
	    function AutoForm() {
	        var _this = this;
	        _super.apply(this, arguments);
	        this.handleSaveButtonClick = function (sender, e) {
	            if (_this.props.onSaveChanges)
	                _this.props.onSaveChanges();
	            _this.getParentWindow().close();
	            e.stopPropagation();
	        };
	        this.handleCancelButtonClick = function (sender, e) {
	            if (_this.props.onCancelChanges)
	                _this.props.onCancelChanges();
	            _this.getParentWindow().close();
	            e.stopPropagation();
	        };
	    }
	    AutoForm.prototype.getInputs = function () {
	        return React.Children.toArray(this.props.children)
	            .filter(function (c) { return c.props; })
	            .map(function (c) { return c.props; });
	    };
	    AutoForm.prototype.getTabsList = function () {
	        return _.uniq(this.getInputs().map(function (input) {
	            return input.inputTab || "";
	        }));
	    };
	    AutoForm.prototype.getTabInputs = function (tab) {
	        return React.Children.toArray(this.props.children)
	            .filter(function (c) {
	            return c.props &&
	                ((c.props.inputTab || "") === tab);
	        });
	    };
	    AutoForm.prototype.renderTab = function (tab) {
	        return React.createElement(Form_1.Form, {sizeTo: this.props.sizeTo}, this.getTabInputs(tab));
	    };
	    AutoForm.prototype.renderTabs = function () {
	        var _this = this;
	        var tabs = this.getTabsList();
	        //console.log(tabs);
	        //console.log(this.getInputs());
	        if (tabs.length === 0) {
	            return null;
	        }
	        else if (tabs.length === 1) {
	            return this.renderTab(tabs[0]);
	        }
	        else {
	            return (React.createElement(Tabs_1.Tabs, {sizeTo: "parent", onWillMount: function (state) { console.log("onWillMount-auto-form-tabs"); }, onChangeActiveTab: function (state, tab) { console.log("setActiveTab"); console.log(tab); }}, tabs.map(function (tab, index) {
	                return (React.createElement(Tabs_1.Tab, {key: index, title: tab === "" ? emptyTabName : tab}, _this.renderTab(tab)));
	            })));
	        }
	    };
	    AutoForm.prototype.render = function () {
	        this.addClassName("auto-form");
	        console.log("render-auto-form");
	        if (this.props.sizeTo === "parent") {
	            var style = {
	                position: "relative",
	                height: "100%"
	            };
	            this.addStyles(style);
	        }
	        else {
	            var style = {
	                position: "relative",
	            };
	            this.addStyles(style);
	        }
	        return (React.createElement("div", __assign({}, this.getRenderProps()), 
	            React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent"}, 
	                React.createElement(Flex_1.Flex, null, this.renderTabs()), 
	                React.createElement(Fixed_1.Fixed, null, 
	                    React.createElement(Layout_1.Layout, {className: "auto-form-footer", type: "row", sizeTo: "content"}, 
	                        React.createElement(Flex_1.Flex, null), 
	                        React.createElement(Fixed_1.Fixed, null, 
	                            React.createElement(Button_1.Button, {visible: this.props.needToSave, className: "is-success is-outlined", onClick: this.handleSaveButtonClick}, "Сохранить"), 
	                            React.createElement(Button_1.Button, {onClick: this.handleCancelButtonClick}, this.props.needToSave ? "Отмена" : "Закрыть")))
	                ))
	        ));
	    };
	    return AutoForm;
	}(Component_1.Component));
	exports.AutoForm = AutoForm;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Layout_1 = __webpack_require__(7);
	var Fixed_1 = __webpack_require__(8);
	var Flex_1 = __webpack_require__(9);
	var TabsState = (function (_super) {
	    __extends(TabsState, _super);
	    function TabsState() {
	        _super.apply(this, arguments);
	        this.tabs = [];
	    }
	    TabsState.prototype.setActiveTab = function (tabInfo) {
	        if (!tabInfo.isActive) {
	            this.tabs.forEach(function (tab) { return tab.isActive = false; });
	            tabInfo.isActive = true;
	            if (this.component.props.onChangeActiveTab)
	                this.component.props.onChangeActiveTab(this, tabInfo);
	            this.forceUpdate();
	        }
	    };
	    return TabsState;
	}(Component_1.ComponentState));
	exports.TabsState = TabsState;
	var TabInfo = (function () {
	    function TabInfo() {
	    }
	    return TabInfo;
	}());
	exports.TabInfo = TabInfo;
	var Tabs = (function (_super) {
	    __extends(Tabs, _super);
	    function Tabs(props, context) {
	        _super.call(this, props, context);
	        this.props = props;
	        this.state = new TabsState(this);
	    }
	    Tabs.prototype.createInitTabsState = function () {
	        var _this = this;
	        var tabTags = this.getChildren(Tab);
	        tabTags.forEach(function (tabTag, index) {
	            var tabProps = tabTag.props;
	            var tabInfo = {
	                title: tabProps.title,
	                content: tabProps.children,
	                isActive: index === 0
	            };
	            _this.state.tabs.push(tabInfo);
	        });
	    };
	    Tabs.prototype.willMount = function () {
	        this.createInitTabsState();
	        _super.prototype.willMount.call(this);
	        // let tabTags = this.getChildren(Tab);
	        //
	        // tabTags.forEach((tabTag, index) => {
	        //
	        //     let tabProps = tabTag.props as TabProps;
	        //
	        //     let tabInfo: TabInfo = {
	        //         title: tabProps.title,
	        //         content: tabProps.children,
	        //         isActive: index === 0
	        //     }
	        //
	        //     this.tabs.push(tabInfo);
	        // });
	    };
	    // openWindow(win: JSX.Element): WindowInfo {
	    //     let modal = document.createElement('div');
	    //     modal.id = Math.random().toString(36).slice(2, 12);
	    //     // для поднятия вверх при активации окна
	    //     modal.onclick = (e)=> {
	    //         setTimeout(()=> {
	    //             if (modal.id !== "deleted")
	    //                 this.nativeElement.appendChild(modal);
	    //         }, 1);
	    //     }
	    //
	    //     this.nativeElement.appendChild(modal);
	    //
	    //     let winInstance = ReactDOM.render(win, modal) as Window;
	    //
	    //     let info: WindowInfo = {
	    //         id: modal.id,
	    //         winInstance: winInstance,
	    //         divWrapper: modal
	    //     };
	    //
	    //     this.windows.push(info);
	    //
	    //     return info;
	    // };
	    //
	    // closeWindow(win: Window) {
	    //
	    //     this.windows.forEach((info, index)=> {
	    //         if (info.winInstance === win) {
	    //             info.divWrapper.id = "deleted";
	    //             this.nativeElement.removeChild(info.divWrapper);
	    //             delete this.windows[index];
	    //             return;
	    //         }
	    //     });
	    // }
	    //
	    // activateWindow(win: Window) {
	    //
	    //     this.windows.forEach((info, index)=> {
	    //         if (info.winInstance === win) {
	    //             this.nativeElement.appendChild(info.divWrapper);
	    //             return;
	    //         }
	    //     });
	    // }
	    Tabs.prototype.renderTabs = function () {
	        var _this = this;
	        var list = [];
	        this.state.tabs.forEach(function (tabInfo, index) {
	            var className = tabInfo.isActive ? "is-active" : null;
	            var element = React.createElement("li", {className: className, key: index, onClick: function (e) { _this.state.setActiveTab(tabInfo); }}, 
	                React.createElement("a", null, tabInfo.title)
	            );
	            list.push(element);
	        });
	        return (React.createElement("div", {className: "tabs"}, 
	            React.createElement("ul", null, list)
	        ));
	    };
	    Tabs.prototype.renderPanels = function () {
	        var _this = this;
	        var list = [];
	        this.state.tabs.forEach(function (tabInfo, index) {
	            var style = { paddingTop: 10, paddingBottom: 10 };
	            if (_this.props.sizeTo === "parent")
	                style.height = "100%";
	            var className = !tabInfo.isActive ? "is-hidden" : null;
	            var element = React.createElement("div", {className: className, key: index, style: style}, tabInfo.content);
	            list.push(element);
	        });
	        return list;
	        // return (
	        //     <div ref>
	        //         {list}
	        //     </div>
	        // )
	    };
	    Tabs.prototype.render = function () {
	        var _this = this;
	        this.addStyles({ height: "100%" });
	        this.addStyles({ position: "relative", overflow: "auto" });
	        return (React.createElement(Layout_1.Layout, __assign({sizeTo: this.props.sizeTo, type: "column", ref: function (e) { _this.nativeElement = e; }}, this.getRenderProps()), 
	            React.createElement(Fixed_1.Fixed, null, this.renderTabs()), 
	            React.createElement(Flex_1.Flex, null, this.renderPanels())));
	    };
	    return Tabs;
	}(Component_1.Component));
	exports.Tabs = Tabs;
	var Tab = (function (_super) {
	    __extends(Tab, _super);
	    function Tab(props, context) {
	        _super.call(this, props, context);
	        this.props = props;
	    }
	    return Tab;
	}(Component_1.Component));
	exports.Tab = Tab;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Form = (function (_super) {
	    __extends(Form, _super);
	    function Form(props, context) {
	        _super.call(this, props, context);
	        this.props = props;
	    }
	    Form.prototype.renderControls = function () {
	        var list = [];
	        React.Children.toArray(this.props.children).forEach(function (control, index) {
	            var controlProps = control.props;
	            if (controlProps && (controlProps.inputCaption || controlProps.bindPropName)) {
	                // if (control.type === InputDivider) {
	                //     console.log("InputDivider");
	                // }
	                var node = React.createElement("tr", {className: "control", key: index}, 
	                    React.createElement("td", {style: { textAlign: "right", verticalAlign: "middle" }}, 
	                        React.createElement("span", {className: "caption"}, controlProps.inputCaption ? controlProps.inputCaption : controlProps.bindPropName)
	                    ), 
	                    React.createElement("td", {style: { textAlign: "left", verticalAlign: "middle" }}, 
	                        React.createElement("div", {className: "control"}, control)
	                    ));
	                list.push(node);
	            }
	            else {
	                var node = React.createElement("tr", {className: "control", key: index}, 
	                    React.createElement("td", {colSpan: "10", style: { textAlign: "left", verticalAlign: "middle" }}, 
	                        React.createElement("div", {className: "control"}, control)
	                    )
	                );
	                list.push(node);
	            }
	        });
	        return list;
	    };
	    Form.prototype.render = function () {
	        var _this = this;
	        this.addClassName("form");
	        //this.addStyles({margin:10});
	        if (React.Children.toArray(this.props.children).length === 1) {
	            if (this.props.sizeTo === "parent")
	                this.addStyles({ height: "100%" });
	            // let controlProps: any = (this.props.children as any)[0].props;
	            //
	            // if (controlProps && controlProps.inputCaption ) {
	            //     return (
	            //         <div {...this.getRenderProps()}>
	            //             <span
	            //                 className="caption">{controlProps.inputCaption ? controlProps.inputCaption : controlProps.bindPropName}
	            //             </span>
	            //             {this.props.children}
	            //         </div>
	            //     );
	            // }
	            // else
	            return React.createElement("div", __assign({}, this.getRenderProps()), this.props.children);
	        }
	        else {
	            this.addStyles({ width: "inherit" });
	            return (React.createElement("table", __assign({ref: function (e) { _this.nativeElement = e; }}, this.getRenderProps()), 
	                React.createElement("tbody", null, this.renderControls())
	            ));
	        }
	    };
	    return Form;
	}(Component_1.Component));
	exports.Form = Form;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var VisiblePlugin_1 = __webpack_require__(23);
	var OnClickPlugin_1 = __webpack_require__(25);
	var Component_1 = __webpack_require__(5);
	var ButtonState = (function (_super) {
	    __extends(ButtonState, _super);
	    function ButtonState() {
	        _super.apply(this, arguments);
	    }
	    return ButtonState;
	}(Component_1.ComponentState));
	exports.ButtonState = ButtonState;
	var Button = (function (_super) {
	    __extends(Button, _super);
	    function Button(props, context) {
	        _super.call(this, props, context);
	        this.props = props;
	        this.state = new ButtonState(this);
	        this.plugins.push(new VisiblePlugin_1.VisiblePlugin(this));
	        this.plugins.push(new OnClickPlugin_1.OnClickPlugin(this));
	    }
	    Button.prototype.render = function () {
	        this.addClassName("button");
	        return (React.createElement("a", __assign({}, this.getRenderProps()), 
	            this.props.text, 
	            this.props.children));
	    };
	    return Button;
	}(Component_1.Component));
	exports.Button = Button;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Plugin_1 = __webpack_require__(24);
	var VisiblePlugin = (function (_super) {
	    __extends(VisiblePlugin, _super);
	    function VisiblePlugin() {
	        _super.apply(this, arguments);
	    }
	    // constructor(owner: any) {
	    //     super(owner);
	    // }
	    VisiblePlugin.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        //console.log("visible willMount()")
	        if (this.props.visible !== undefined && this.props.defaultVisible !== undefined) {
	            console.error("VisiblePlugin: only one of the properties must be specified 'visible' or 'defaultVisible'");
	        }
	        if (this.props.visible !== undefined) {
	            this.state.visible = this.props.visible;
	        }
	        else if (this.props.defaultVisible !== undefined) {
	            this.state.visible = this.props.defaultVisible;
	        }
	        else
	            this.state.visible = true;
	        this.owner.toggleClassName(!this.state.visible, "is-hidden");
	    };
	    VisiblePlugin.prototype.willReceiveProps = function (nextProps) {
	        //let state = this.owner.state as VisiblePluginState;
	        if (nextProps.visible !== undefined) {
	            this.state.visible = nextProps.visible;
	        }
	        else
	            this.state.visible = true;
	        this.owner.toggleClassName(!this.state.visible, "is-hidden");
	    };
	    return VisiblePlugin;
	}(Plugin_1.ComponentPlugin));
	exports.VisiblePlugin = VisiblePlugin;
	// export function VisiblePlugin(target: any) {
	//     target.plugins.push(VisiblePluginClass);
	//     return target;
	// }


/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	var ComponentPlugin = (function () {
	    function ComponentPlugin(owner) {
	        this.owner = owner;
	    }
	    ComponentPlugin.prototype.didMount = function () {
	    };
	    ComponentPlugin.prototype.willMount = function () {
	    };
	    ComponentPlugin.prototype.willUnmount = function () {
	    };
	    ComponentPlugin.prototype.willReceiveProps = function (nextProps) {
	    };
	    ComponentPlugin.prototype.didUpdate = function (prevProps, prevState, prevContext) {
	    };
	    Object.defineProperty(ComponentPlugin.prototype, "state", {
	        get: function () {
	            return this.owner.state;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentPlugin.prototype, "props", {
	        get: function () {
	            return this.owner.props;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentPlugin;
	}());
	exports.ComponentPlugin = ComponentPlugin;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Plugin_1 = __webpack_require__(24);
	var OnClickPlugin = (function (_super) {
	    __extends(OnClickPlugin, _super);
	    function OnClickPlugin() {
	        var _this = this;
	        _super.apply(this, arguments);
	        this.handleClick = function (event) {
	            if (_this.props.onClick) {
	                _this.props.onClick(_this.owner, event);
	            }
	            event.stopPropagation();
	        };
	    }
	    OnClickPlugin.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        this.owner.addProps({ onClick: this.handleClick });
	    };
	    OnClickPlugin.prototype.willReceiveProps = function (nextProps) {
	        _super.prototype.willReceiveProps.call(this, nextProps);
	        this.owner.addProps({ onClick: this.handleClick });
	    };
	    return OnClickPlugin;
	}(Plugin_1.ComponentPlugin));
	exports.OnClickPlugin = OnClickPlugin;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	// объект может иметь массивы:
	// $$unsavedProps - имена свойств, которые не сохраняются
	// $$savedByRefProps - имена свойств, которые сохраняются как ссылки
	// не сохраняются свойства, которые начинаются с $$
	var Snapshot = (function () {
	    function Snapshot() {
	        this.snapshots = [];
	    }
	    Snapshot.prototype.saveObject = function (obj, snapshotName) {
	        var snap = new InternalSnapshot();
	        snap.obj = obj;
	        snap.snapshotName = snapshotName;
	        snap.saveProps();
	        this.snapshots.push(snap);
	    };
	    Snapshot.prototype.restoreObject = function (obj, snapshotName) {
	        var snap = this.getInternalSnapshot(obj, snapshotName);
	        if (snap) {
	            if (_.isArray(obj)) {
	                obj.length = 0;
	                snap.arrayElements.forEach(function (element) { return obj.push(element); });
	            }
	            else {
	                snap.objProps.forEach(function (prop) { return prop.restoreValue(); });
	            }
	        }
	    };
	    Snapshot.prototype.getInternalSnapshot = function (obj, snapshotName) {
	        var ret = this.snapshots.filter(function (snap) { return snap.obj === obj && snap.snapshotName === snapshotName; });
	        if (ret.length === 0) {
	            Error_1.throwError("Snapshot '" + snapshotName + "' not found");
	            throw "fake";
	        }
	        else
	            return ret[0];
	    };
	    return Snapshot;
	}());
	exports.Snapshot = Snapshot;
	var InternalSnapshot = (function () {
	    function InternalSnapshot() {
	        this.objProps = [];
	        this.refsClones = {};
	    }
	    InternalSnapshot.prototype.saveProps = function () {
	        var _this = this;
	        if (_.isArray(this.obj)) {
	            this.arrayElements = this.obj.map(function (v) { return _this.cloneValue(v); });
	        }
	        else {
	            this.objProps = [];
	            for (var propName in this.obj) {
	                if (this.obj.hasOwnProperty(propName) && propName.substring(0, 2) !== "$$") {
	                    var p = new SnapshotProperty();
	                    p.propName = propName;
	                    p.snapshot = this;
	                    p.saveValue();
	                    this.objProps.push(p);
	                }
	            }
	        }
	    };
	    InternalSnapshot.prototype.cloneValue = function (value) {
	        var _this = this;
	        if (value === this.obj) {
	            return value;
	        }
	        else if (_.isArray(value)) {
	            return value.map(function (v) { return _this.cloneValue(v); });
	        }
	        else if (_.isFunction(value)) {
	            return value;
	        }
	        else if (_.isObject(value)) {
	            //let refsIndex = this.snapshot.refs.indexOf(value);
	            if (value.$$uniqueObjectId)
	                return this.refsClones[value.$$uniqueObjectId];
	            var valueCopy = new value.constructor();
	            valueCopy.$$isClone = true;
	            value.$$uniqueObjectId = Math.random().toString(36).slice(2, 16);
	            this.refsClones[value.$$uniqueObjectId] = valueCopy;
	            for (var propName in value) {
	                if (value.hasOwnProperty(propName) && propName.substring(0, 2) !== "$$") {
	                    valueCopy[propName] = this.cloneValue(value[propName]);
	                }
	            }
	            return valueCopy;
	        }
	        else {
	            return value;
	        }
	    };
	    return InternalSnapshot;
	}());
	var SnapshotProperty = (function () {
	    function SnapshotProperty() {
	    }
	    SnapshotProperty.prototype.saveValue = function () {
	        this.propValue = this.snapshot.cloneValue(this.snapshot.obj[this.propName]);
	    };
	    SnapshotProperty.prototype.restoreValue = function () {
	        this.snapshot.obj[this.propName] = this.propValue;
	    };
	    return SnapshotProperty;
	}());


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	var getRandomString_1 = __webpack_require__(28);
	function deepClone(obj) {
	    // todo clone ArrayBuffer
	    if (!obj)
	        Error_1.throwError("deepClone(): obj === null");
	    var refsClones = {};
	    if (_.isArray(obj))
	        return cloneArray(obj, refsClones);
	    else
	        return cloneObject(obj, refsClones);
	}
	exports.deepClone = deepClone;
	function cloneObject(obj, refsClones) {
	    if (obj === undefined)
	        return undefined;
	    if (obj === null)
	        return null;
	    if (obj.$$uniqueObjectId !== undefined && refsClones[obj.$$uniqueObjectId] !== undefined)
	        return refsClones[obj.$$uniqueObjectId];
	    var cloned = new obj.constructor();
	    cloned.$$isClone = true;
	    obj.$$uniqueObjectId = getRandomString_1.getRandomString();
	    refsClones[obj.$$uniqueObjectId] = cloned;
	    for (var propName in obj) {
	        if (obj.hasOwnProperty(propName)) {
	            var propValue = obj[propName];
	            if (propName.substring(0, 2) !== "$$") {
	                if (_.isDate(propValue)) {
	                    cloned[propName] = new Date(obj[propName].getTime());
	                }
	                else if (_.isArray(propValue)) {
	                    cloned[propName] = cloneArray(propValue, refsClones);
	                }
	                else if (_.isObject(propValue)) {
	                    cloned[propName] = cloneObject(propValue, refsClones);
	                }
	                else
	                    cloned[propName] = obj[propName];
	            }
	            else {
	                cloned[propName] = cloneObject$$(propValue, refsClones);
	            }
	        }
	    }
	    return cloned;
	}
	function cloneObject$$(obj, refsClones) {
	    if (obj === undefined)
	        return undefined;
	    if (obj === null)
	        return null;
	    if (obj.$$uniqueObjectId && refsClones[obj.$$uniqueObjectId])
	        return refsClones[obj.$$uniqueObjectId];
	    else
	        return obj;
	}
	function cloneArray(obj, refsClones) {
	    if (obj === undefined)
	        return undefined;
	    if (obj === null)
	        return null;
	    if (obj.$$uniqueObjectId && refsClones[obj.$$uniqueObjectId])
	        return refsClones[obj.$$uniqueObjectId];
	    var cloned = [];
	    cloned.$$isClone = true;
	    obj.$$uniqueObjectId = Math.random().toString(36).slice(2, 16);
	    refsClones[obj.$$uniqueObjectId] = cloned;
	    obj.forEach(function (arrayItem) {
	        if (_.isDate(arrayItem)) {
	            cloned.push(new Date(arrayItem.getTime()));
	        }
	        else if (_.isArray(arrayItem)) {
	            cloned.push(cloneArray(arrayItem, refsClones));
	        }
	        else if (_.isObject(arrayItem)) {
	            cloned.push(cloneObject(arrayItem, refsClones));
	        }
	        else
	            cloned.push(arrayItem);
	    });
	    return cloned;
	}


/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	function getRandomString(length) {
	    if (length === void 0) { length = 24; }
	    return Math.random().toString(36).slice(2, 16);
	}
	exports.getRandomString = getRandomString;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var getRandomString_1 = __webpack_require__(28);
	// $$deepEqualId
	function isDeepEqual(obj1, obj2, compared) {
	    if (_.isUndefined(obj1)) {
	        if (!_.isUndefined(obj2))
	            return false;
	    }
	    if (_.isNull(obj1)) {
	        if (!_.isNull(obj2))
	            return false;
	    }
	    if (_.isNumber(obj1)) {
	        if (obj1 !== obj2)
	            return false;
	    }
	    if (_.isArrayBuffer(obj1)) {
	        if (!_.isArrayBuffer(obj2))
	            return false;
	        if (obj1 !== obj2)
	            return false;
	    }
	    if (_.isString(obj1)) {
	        if (!_.isString(obj2))
	            return false;
	        if (obj1 !== obj2)
	            return false;
	    }
	    if (_.isDate(obj1)) {
	        if (!_.isDate(obj2))
	            return false;
	        if (obj1.getTime() !== obj2.getTime())
	            return false;
	    }
	    if (compared === undefined)
	        compared = {};
	    if (_.isArray(obj1)) {
	        if (!_.isArray(obj2))
	            return false;
	        if (obj1.length !== obj2.length)
	            return false;
	        for (var i = 0; i < obj1.length; i++) {
	            if (!isDeepEqual(obj1[i], obj2[i], compared))
	                return false;
	        }
	    }
	    if (_.isObject(obj1)) {
	        if (!_.isObject(obj2))
	            return false;
	        if (obj1.$$deepEqualId === undefined)
	            obj1.$$deepEqualId = getRandomString_1.getRandomString();
	        if (obj2.$$deepEqualId === undefined)
	            obj2.$$deepEqualId = getRandomString_1.getRandomString();
	        if (compared[obj1.$$deepEqualId + obj2.$$deepEqualId] === true)
	            return true;
	        for (var propName in obj1) {
	            if (obj1.hasOwnProperty(propName) && propName.substring(0, 2) !== "$$") {
	                if (!isDeepEqual(obj1[propName], obj2[propName], compared))
	                    return false;
	            }
	        }
	        for (var propName in obj2) {
	            if (obj2.hasOwnProperty(propName) && propName.substring(0, 2) !== "$$") {
	                if (!isDeepEqual(obj1[propName], obj2[propName], compared)) {
	                    return false;
	                }
	            }
	        }
	        compared[obj1.$$deepEqualId + obj2.$$deepEqualId] === true;
	    }
	    return true;
	}
	exports.isDeepEqual = isDeepEqual;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var App_1 = __webpack_require__(31);
	var Window_1 = __webpack_require__(33);
	var Button_1 = __webpack_require__(22);
	var DesktopState = (function (_super) {
	    __extends(DesktopState, _super);
	    function DesktopState() {
	        _super.apply(this, arguments);
	        this.windows = []; // последнее активно
	    }
	    return DesktopState;
	}(Component_1.ComponentState));
	exports.DesktopState = DesktopState;
	var DesktopWindow = (function () {
	    function DesktopWindow() {
	    }
	    return DesktopWindow;
	}());
	exports.DesktopWindow = DesktopWindow;
	var Desktop = (function (_super) {
	    __extends(Desktop, _super);
	    function Desktop(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.handleActivate = function (state) {
	            _this.activateWindow(state.id);
	        };
	        this.handleClose = function (state) {
	            // this.closeWindow(state.id);
	        };
	        this.context = context;
	        this.props = props;
	        this.state = new DesktopState(this);
	    }
	    Desktop.prototype.getChildContext = function () {
	        return { parentDesktop: this };
	    };
	    Desktop.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        if (App_1.appInstance)
	            App_1.appInstance.desktop = this;
	    };
	    //    private windows: WindowInfo[] = [];
	    Desktop.prototype.openSchemaForm = function (form, openParams) {
	        var winContent = form.render();
	        this.openWindow(winContent, openParams);
	    };
	    Desktop.prototype.openSchemaComponentDesigner = function (component, openParams) {
	        var winContent = component.getDesigner();
	        this.openWindow(winContent, openParams);
	    };
	    Desktop.prototype.openWindow = function (winContent, openParams) {
	        if (!openParams)
	            openParams = {};
	        var newWin = new DesktopWindow();
	        newWin.content = winContent;
	        newWin.title = openParams.title || ".";
	        newWin.id = Math.random().toString(36).slice(2, 12);
	        newWin.left = openParams.left;
	        newWin.top = openParams.top;
	        newWin.height = openParams.height;
	        newWin.width = openParams.width;
	        newWin.right = openParams.right;
	        newWin.bottom = openParams.bottom;
	        if (!newWin.left) {
	            if (!newWin.right && !newWin.width) {
	                newWin.left = 50;
	                newWin.width = 500;
	            }
	            else if (newWin.right) {
	                newWin.width = 500;
	            }
	            else {
	                newWin.left = 50;
	            }
	        }
	        else {
	            if (!newWin.right && !newWin.width) {
	                newWin.width = 500;
	            }
	        }
	        if (!newWin.top) {
	            if (!newWin.bottom && !newWin.height) {
	                newWin.top = 50;
	                newWin.height = 400;
	            }
	            else if (newWin.bottom) {
	                newWin.height = 400;
	            }
	            else {
	                newWin.top = 50;
	            }
	        }
	        else {
	            if (!newWin.bottom && !newWin.height) {
	                newWin.height = 400;
	            }
	        }
	        newWin.autoPosition = openParams.autoPosition;
	        newWin.autoSize = openParams.autoSize;
	        newWin.minHeight = openParams.minHeight || 100;
	        newWin.minWidth = openParams.minWidth || 100;
	        newWin.parentWindowId = openParams.parentWindowId;
	        if (newWin.parentWindowId) {
	            this.getWindowById(newWin.parentWindowId).disabled = true;
	        }
	        this.state.windows.push(newWin);
	        this.forceUpdate();
	    };
	    ;
	    Desktop.prototype.openMessageWindow = function (winContent, openParams) {
	        if (!openParams)
	            openParams = { style: "information" };
	        var winParams = {
	            title: openParams.title,
	            parentWindowId: openParams.parentWindowId,
	            autoPosition: "parent-center",
	            autoSize: "content"
	        };
	        if (!winParams.parentWindowId)
	            winParams.autoPosition = "desktop-center";
	        var buttonStyle = { minWidth: 65, marginLeft: 8 };
	        var okButton = [];
	        if (openParams.okButtonContent) {
	            var buttonClassName = "is-outlined";
	            if (openParams.style === "danger")
	                buttonClassName += " is-danger";
	            if (openParams.style === "error")
	                buttonClassName += " is-danger";
	            okButton =
	                React.createElement(Button_1.Button, {className: buttonClassName, style: buttonStyle, onClick: function (sender, e) {
	                    sender.closeParentWindow();
	                    if (openParams && openParams.resultCallback)
	                        openParams.resultCallback(true);
	                    e.stopPropagation();
	                }}, openParams.okButtonContent);
	        }
	        var cancelButton = [];
	        if (openParams.cancelButtonContent) {
	            cancelButton =
	                React.createElement(Button_1.Button, {className: "is-outlined", style: buttonStyle, onClick: function (sender, e) {
	                    sender.closeParentWindow();
	                    if (openParams && openParams.resultCallback)
	                        openParams.resultCallback(false);
	                    e.stopPropagation();
	                }}, openParams.cancelButtonContent);
	        }
	        var win = React.createElement("div", {style: { minWidth: 200, textAlign: "center" }}, 
	            winContent, 
	            React.createElement("div", {style: { padding: 10 }}, 
	                okButton, 
	                cancelButton));
	        console.log(openParams);
	        this.openWindow(win, winParams);
	    };
	    ;
	    Desktop.prototype.activateWindow = function (id) {
	        var win = this.getTopParentWindow(id);
	        if (win && this.state.windows.indexOf(win) !== this.state.windows.length - 1) {
	            _.pull(this.state.windows, win);
	            this.state.windows.push(win);
	            this.forceUpdate();
	            // поднимаем дочерние окна
	            var childWin = this.state.windows.filter(function (w) { return w.parentWindowId === win.id; })[0];
	            if (childWin)
	                this.activateChildWindow(childWin.id);
	        }
	    };
	    Desktop.prototype.activateChildWindow = function (id) {
	        var win = this.getWindowById(id);
	        if (win && this.state.windows.indexOf(win) !== this.state.windows.length - 1) {
	            _.pull(this.state.windows, win);
	            this.state.windows.push(win);
	            this.forceUpdate();
	            // поднимаем дочерние окна
	            var childWin = this.state.windows.filter(function (w) { return w.parentWindowId === win.id; })[0];
	            if (childWin)
	                this.activateWindow(childWin.id);
	        }
	    };
	    Desktop.prototype.getTopParentWindow = function (id) {
	        var topParent = this.getWindowById(id);
	        while (topParent && topParent.parentWindowId) {
	            topParent = this.getWindowById(topParent.parentWindowId);
	        }
	        return topParent;
	    };
	    Desktop.prototype.getWindowById = function (id) {
	        for (var _i = 0, _a = this.state.windows; _i < _a.length; _i++) {
	            var w = _a[_i];
	            if (w.id === id)
	                return w;
	        }
	        console.warn("DesktopWindow id='" + id + "' not found");
	        return null;
	    };
	    Desktop.prototype.closeWindow = function (id) {
	        var win = this.getWindowById(id);
	        _.pull(this.state.windows, win);
	        if (win && win.parentWindowId) {
	            this.activateWindow(win.parentWindowId);
	            this.getWindowById(win.parentWindowId).disabled = false;
	        }
	        this.forceUpdate();
	    };
	    Desktop.prototype.didMount = function () {
	        _super.prototype.didMount.call(this);
	        this.nativeElement["$$desktop"] = this;
	    };
	    Desktop.prototype.render = function () {
	        var _this = this;
	        this.addClassName("desktop");
	        this.addStyles({ height: "100%" });
	        this.addStyles({ position: "relative", overflow: "auto" });
	        return (React.createElement("div", __assign({ref: function (e) { _this.nativeElement = e; }}, this.getRenderProps()), this.state.windows.map(function (w, index) {
	            console.log("render-desktop-win");
	            return (React.createElement(Window_1.Window, {key: w.id, id: w.id, title: w.title, top: w.top, left: w.left, width: w.width, height: w.height, right: w.right, bottom: w.bottom, disabled: w.disabled, minWidth: w.minWidth, minHeight: w.minHeight, autoSize: w.autoSize, autoPosition: w.autoPosition, parentWindowId: w.parentWindowId, onActivate: _this.handleActivate, onClose: _this.handleClose}, w.content));
	        })));
	    };
	    Desktop.childContextTypes = {
	        parentDesktop: React.PropTypes.any
	    };
	    return Desktop;
	}(Component_1.Component));
	exports.Desktop = Desktop;
	//onMoveStart={ w.handleMoveStart }
	//onResizeRightBottomCornerStart={ w.handleResizeRightBottomCornerStart }


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var AppErrorBar_1 = __webpack_require__(32);
	var AppWindow = (function () {
	    function AppWindow() {
	        this.id = Math.random().toString(36).slice(2, 12);
	    }
	    return AppWindow;
	}());
	exports.AppWindow = AppWindow;
	var AppState = (function (_super) {
	    __extends(AppState, _super);
	    function AppState() {
	        _super.apply(this, arguments);
	        this.windows = []; // последнее активно
	    }
	    return AppState;
	}(Component_1.ComponentState));
	exports.AppState = AppState;
	var App = (function (_super) {
	    __extends(App, _super);
	    function App(props, context) {
	        _super.call(this, props, context);
	        this.props = props;
	        this.state = new AppState(this);
	    }
	    App.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        exports.appInstance = this;
	    };
	    App.prototype.render = function () {
	        this.addClassName("app");
	        if (this.props.sizeTo === "parent")
	            this.addStyles({ height: "100%" });
	        return (React.createElement("div", __assign({}, this.getRenderProps()), 
	            React.createElement(AppErrorBar_1.AppErrorBar, null), 
	            this.props.children));
	    };
	    return App;
	}(Component_1.Component));
	exports.App = App;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var AppErrorBarState = (function (_super) {
	    __extends(AppErrorBarState, _super);
	    function AppErrorBarState() {
	        _super.apply(this, arguments);
	    }
	    return AppErrorBarState;
	}(Component_1.ComponentState));
	exports.AppErrorBarState = AppErrorBarState;
	var AppErrorBar = (function (_super) {
	    __extends(AppErrorBar, _super);
	    function AppErrorBar(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.handleError = function (msg, url, line, col, error) {
	            _this.errorMessage = msg;
	            if (!error.$$isThrowError)
	                console.error(error.stack);
	            _this.state.visible = true;
	            _this.forceUpdate();
	            var suppressErrorAlert = true;
	            return suppressErrorAlert;
	        };
	        this.handlePromiseError = function (reason) {
	            if (reason.message)
	                _this.errorMessage = reason.message;
	            _this.state.visible = true;
	            _this.forceUpdate();
	        };
	        this.state = new AppErrorBarState(this);
	        this.state.visible = false;
	    }
	    // protected willMount() {
	    //     super.willMount();
	    // }
	    AppErrorBar.prototype.didMount = function () {
	        _super.prototype.didMount.call(this);
	        window.onerror = this.handleError;
	        window.onunhandledrejection = this.handlePromiseError.bind(this);
	    };
	    AppErrorBar.prototype.render = function () {
	        var _this = this;
	        this.addClassName("app-error-bar");
	        this.toggleClassName(!this.state.visible, "is-hidden");
	        this.clearStyles();
	        this.addStyles({ color: "white", background: "#ff4e4e", cursor: "default" });
	        return (React.createElement("div", __assign({onClick: function (e) { _this.state.visible = false; _this.forceUpdate(); }}, this.getRenderProps()), this.errorMessage));
	    };
	    return AppErrorBar;
	}(Component_1.Component));
	exports.AppErrorBar = AppErrorBar;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var Layout_1 = __webpack_require__(7);
	var Fixed_1 = __webpack_require__(8);
	var Flex_1 = __webpack_require__(9);
	var Movable_1 = __webpack_require__(34);
	var Error_1 = __webpack_require__(6);
	var WindowState = (function (_super) {
	    __extends(WindowState, _super);
	    function WindowState() {
	        _super.apply(this, arguments);
	    }
	    return WindowState;
	}(Component_1.ComponentState));
	exports.WindowState = WindowState;
	var Window = (function (_super) {
	    __extends(Window, _super);
	    function Window(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.moveStart = function (e) {
	            e.bindX(_this.state, "left", function () {
	                $(_this.nativeElement).css("left", _this.state.left);
	            });
	            e.bindY(_this.state, "top", function () {
	                $(_this.nativeElement).css("top", _this.state.top);
	            });
	            _this.handleOnClick();
	        };
	        this.resizeRightBottomCornerStart = function (e) {
	            e.bindX(_this.state, "width", function () {
	                if (_this.state.width < _this.state.minWidth)
	                    _this.state.width = _this.state.minWidth;
	                $(_this.nativeElement).css("width", _this.state.width);
	            });
	            e.bindY(_this.state, "height", function () {
	                if (_this.state.height < _this.state.minHeight)
	                    _this.state.height = _this.state.minHeight;
	                $(_this.nativeElement).css("height", _this.state.height);
	            });
	            _this.handleOnClick();
	        };
	        this.handleOnClick = function (e) {
	            if (_this.props.onActivate)
	                _this.props.onActivate(_this.state);
	        };
	        this.handleCloseButtonClick = function (e) {
	            _this.close();
	            e.stopPropagation();
	        };
	        this.shouldComponentUpdate = function (nextProps, nextState) {
	            var oldDisabled = _this.state.disabled === true;
	            var newDisabled = nextProps.disabled === true;
	            _this.state.disabled = newDisabled;
	            return oldDisabled !== newDisabled;
	        };
	        this.props = props;
	        this.state = new WindowState(this);
	    }
	    Window.prototype.createInitState = function () {
	        _.assign(this.state, this.props);
	    };
	    Window.prototype.willMount = function () {
	        this.createInitState();
	        _super.prototype.willMount.call(this);
	    };
	    Window.prototype.willReceiveProps = function (nextProps) {
	        _super.prototype.willReceiveProps.call(this, nextProps);
	        //this.state.disabled = nextProps.disabled;
	    };
	    Window.prototype.getChildContext = function () {
	        return { parentWindow: this };
	    };
	    Window.prototype.getParentDesktopElement = function () {
	        var parent = ReactDOM.findDOMNode(this);
	        while (parent) {
	            if (parent.$$desktop)
	                return parent;
	            parent = parent.parentElement;
	        }
	        Error_1.throwError("Window.getParentDesktopElement(): parent desktop not found");
	        throw "fake";
	    };
	    // private centerTo(parent: JQuery) {
	    //     let win = $(this.nativeElement);
	    //
	    //     this.state.top = (parent.outerHeight() - win.outerHeight()) / 2;
	    //     if (this.state.top > parent.outerHeight() - win.outerHeight())
	    //         this.state.top = parent.outerHeight() - win.outerHeight();
	    //     if (this.state.top < 0) this.state.top = 0;
	    //
	    //     this.state.left = (parent.outerWidth() - win.outerWidth()) / 2;
	    //     if (this.state.left > parent.outerWidth() - win.outerWidth())
	    //         this.state.left = parent.outerWidth() - win.outerWidth();
	    //     if (this.state.left < 0) this.state.left = 0;
	    //
	    //     this.forceUpdate();
	    // }
	    //
	    Window.prototype.centerToDesktop = function () {
	        var win = $(this.nativeElement);
	        var desktop = $(this.getParentDesktopElement());
	        this.state.top = (desktop.outerHeight() - win.outerHeight()) / 2;
	        this.state.left = (desktop.outerWidth() - win.outerWidth()) / 2;
	        if (this.state.top > desktop.outerHeight() - win.outerHeight())
	            this.state.top = desktop.outerHeight() - win.outerHeight();
	        if (this.state.top < 0)
	            this.state.top = 0;
	        this.state.left = (desktop.outerWidth() - win.outerWidth()) / 2;
	        if (this.state.left > desktop.outerWidth() - win.outerWidth())
	            this.state.left = desktop.outerWidth() - win.outerWidth();
	        if (this.state.left < 0)
	            this.state.left = 0;
	        this.forceUpdate();
	        //this.centerTo($(this.getParentDesktopElement()));
	    };
	    Window.prototype.centerToParentWindow = function () {
	        var win = $(this.nativeElement);
	        var parent = $("#" + this.state.parentWindowId);
	        var desktop = $(this.getParentDesktopElement());
	        this.state.top = (parent.outerHeight() - win.outerHeight()) / 2 + parent.position().top;
	        this.state.left = (parent.outerWidth() - win.outerWidth()) / 2 + parent.position().left;
	        if (this.state.top > desktop.outerHeight() - win.outerHeight())
	            this.state.top = desktop.outerHeight() - win.outerHeight();
	        if (this.state.top < 0)
	            this.state.top = 0;
	        if (this.state.left > desktop.outerWidth() - win.outerWidth())
	            this.state.left = desktop.outerWidth() - win.outerWidth();
	        if (this.state.left < 0)
	            this.state.left = 0;
	        this.forceUpdate();
	        //this.centerTo($("#" + this.state.parentWindowId));
	    };
	    Window.prototype.didMount = function () {
	        _super.prototype.didMount.call(this);
	        this.nativeElement["$$window"] = this;
	        if (this.state.autoPosition === "desktop-center")
	            this.centerToDesktop();
	        else if (this.state.autoPosition === "parent-center")
	            this.centerToParentWindow();
	    };
	    Window.prototype.close = function () {
	        this.getParentDesktop().closeWindow(this.state.id);
	        if (this.props.onClose)
	            this.props.onClose(this.state);
	    };
	    Window.prototype.renderRightBottomCornerResizer = function () {
	        if (this.state.autoSize === "content") {
	            return [];
	        }
	        else {
	            return (React.createElement(Movable_1.Movable, {className: "window-resizer", style: { position: "absolute", height: 10, width: 10, right: 0, bottom: 0, borderRadius: "0 0 5px 0", cursor: "se-resize" }, onMoveStart: this.resizeRightBottomCornerStart}));
	        }
	    };
	    Window.prototype.render = function () {
	        var _this = this;
	        this.clearStyles();
	        this.addProps({ id: this.state.id });
	        this.addClassName("window box");
	        this.addStyles({ position: "absolute" });
	        this.addStyles({
	            top: this.state.top,
	            left: this.state.left,
	            right: this.state.right,
	            bottom: this.state.bottom,
	            minHeight: this.state.minHeight,
	            minWidth: this.state.minWidth,
	            padding: 0,
	            overflow: "hidden"
	        });
	        if (this.state.autoSize === "content") {
	        }
	        else {
	            this.addStyles({
	                height: this.state.height,
	                width: this.state.width
	            });
	        }
	        var headerButtonStyle = {
	            border: "0px",
	            height: "100%",
	            paddingLeft: 2,
	            paddingRight: 2,
	        };
	        console.log("render-win");
	        //console.log(this.props.disabled);
	        //console.log(this.state.disabled);
	        var disabledWrapperClass = "window-disabled-wrapper";
	        if (!this.state.disabled || this.state.disabled === false)
	            disabledWrapperClass += " is-hidden";
	        return (React.createElement("div", __assign({className: "window"}, this.getRenderProps(), {ref: function (e) { _this.nativeElement = e; }, onClick: this.handleOnClick}), 
	            React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent"}, 
	                React.createElement(Fixed_1.Fixed, {className: "window-header", style: { borderRadius: "5px 5px 0px 0px", position: "relative", paddingLeft: 10 }}, 
	                    React.createElement(Layout_1.Layout, {type: "row", sizeTo: "parent"}, 
	                        React.createElement(Flex_1.Flex, null, 
	                            React.createElement("span", {className: "window-title"}, this.props.title), 
	                            React.createElement(Movable_1.Movable, {style: { position: "absolute", top: 0, left: 0, right: 0, bottom: 0 }, onMoveStart: this.moveStart})), 
	                        React.createElement(Fixed_1.Fixed, null, 
	                            React.createElement("p", {className: "control has-addons buttons-bar", style: { paddingTop: 2, paddingRight: 4 }}, 
	                                React.createElement("a", {className: "button is-small minimize-button", style: headerButtonStyle}, 
	                                    React.createElement("span", {className: "icon is-small ", style: { marginLeft: 0 }}, 
	                                        React.createElement("i", {className: "fa fa-minus", style: { top: 3 }})
	                                    )
	                                ), 
	                                React.createElement("a", {className: "button is-small maximize-button", style: headerButtonStyle}, 
	                                    React.createElement("span", {className: "icon is-small", style: { marginLeft: 0 }}, 
	                                        React.createElement("i", {className: "fa fa-square-o", style: { fontWeight: "bold" }})
	                                    )
	                                ), 
	                                React.createElement("a", {className: "button is-small close-button", style: headerButtonStyle, onClick: this.handleCloseButtonClick}, 
	                                    React.createElement("span", {className: "icon is-small", style: { marginLeft: 0 }}, 
	                                        React.createElement("i", {className: "fa fa-close", style: { top: -1 }})
	                                    )
	                                ))
	                        ))
	                ), 
	                React.createElement(Flex_1.Flex, {className: "window-body", style: { padding: 10, overflow: "hidden" }}, 
	                    this.props.children, 
	                    this.renderRightBottomCornerResizer())), 
	            React.createElement("div", {className: disabledWrapperClass, style: { position: "absolute", left: 0, top: 0, right: 0, bottom: 0 }})));
	    };
	    Window.childContextTypes = {
	        parentWindow: React.PropTypes.any
	    };
	    return Window;
	}(Component_1.Component));
	exports.Window = Window;
	// <div className="window-body" style={{ height:"100%" }}>
	//     {this.props.children}
	// </div>


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Movable = (function (_super) {
	    __extends(Movable, _super);
	    function Movable(props, context) {
	        _super.call(this, props, context);
	        this.bindedX = [];
	        this.bindedY = [];
	        this.props = props;
	    }
	    Movable.prototype.bindX = function (obj, propName, movedCallback) {
	        this.bindedX.push({
	            obj: obj,
	            propName: propName,
	            startValue: obj[propName],
	            movedCallback: movedCallback,
	            lastValue: obj[propName]
	        });
	    };
	    ;
	    Movable.prototype.bindY = function (obj, propName, movedCallback) {
	        this.bindedY.push({
	            obj: obj,
	            propName: propName,
	            startValue: obj[propName],
	            movedCallback: movedCallback,
	            lastValue: obj[propName]
	        });
	    };
	    ;
	    Movable.prototype.handleDragStart = function (e) {
	        this.startClientX = e.clientX;
	        this.startClientY = e.clientY;
	        if (this.props.onMoveStart)
	            this.props.onMoveStart({ bindX: this.bindX.bind(this), bindY: this.bindY.bind(this) });
	        e.dataTransfer.setData("movable", "");
	        //e.dataTransfer.dropEffect = 'move';
	        this.dragOver_Binded = this.handleDragOver.bind(this);
	        document.addEventListener("dragover", this.dragOver_Binded);
	    };
	    Movable.prototype.handleDragEnd = function (e) {
	        document.removeEventListener("dragover", this.dragOver_Binded);
	        if (this.props.onMoveEnd)
	            this.props.onMoveEnd({
	                deltaX: e.clientX - this.startClientX,
	                deltaY: e.clientY - this.startClientY
	            });
	        this.bindedX = [];
	        this.bindedY = [];
	    };
	    Movable.prototype.handleDragOver = function (e) {
	        var _this = this;
	        e.dataTransfer.effectAllowed = "move";
	        this.bindedX.forEach(function (bind) {
	            var newValue = bind.startValue + e.clientX - _this.startClientX;
	            if (newValue !== bind.lastValue) {
	                bind.obj[bind.propName] = newValue;
	                bind.lastValue = newValue;
	                if (bind.movedCallback)
	                    bind.movedCallback();
	            }
	        });
	        this.bindedY.forEach(function (bind) {
	            var newValue = bind.startValue + e.clientY - _this.startClientY;
	            if (newValue !== bind.lastValue) {
	                bind.obj[bind.propName] = newValue;
	                bind.lastValue = newValue;
	                if (bind.movedCallback)
	                    bind.movedCallback();
	            }
	        });
	        if (this.props.onMove)
	            this.props.onMove({
	                deltaX: e.clientX - this.startClientX,
	                deltaY: e.clientY - this.startClientY
	            });
	        event.preventDefault();
	    };
	    Movable.prototype.render = function () {
	        this.addClassName("movable");
	        this.addProps({ draggable: true });
	        this.addStyles({ cursor: "move" });
	        //return React.createElement(propInfo.editorType, editorProps, null)
	        return (React.createElement("div", __assign({}, this.getRenderProps(), {onDragStart: this.handleDragStart.bind(this), onDragEnd: this.handleDragEnd.bind(this)}), this.props.children));
	    };
	    return Movable;
	}(Component_1.Component));
	exports.Movable = Movable;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var StringPropertyEditor_1 = __webpack_require__(13);
	var testBuhtaObject1_1 = __webpack_require__(10);
	var testBuhtaObject2 = (function (_super) {
	    __extends(testBuhtaObject2, _super);
	    function testBuhtaObject2() {
	        _super.apply(this, arguments);
	    }
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Пол/sex",
	            inputTab: "Дополнительно",
	            inputGroup: "Основная",
	            inputDescription: "Потолок абонента"
	        })
	    ], testBuhtaObject2.prototype, "sex", void 0);
	    return testBuhtaObject2;
	}(testBuhtaObject1_1.TestBuhtaObject1));
	exports.testBuhtaObject2 = testBuhtaObject2;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var registerGridColumn_1 = __webpack_require__(37);
	var TreeGridColumn = (function (_super) {
	    __extends(TreeGridColumn, _super);
	    function TreeGridColumn(props, context) {
	        _super.call(this, props, context);
	        //this.state.disabled = false;
	    }
	    return TreeGridColumn;
	}(Component_1.Component));
	exports.TreeGridColumn = TreeGridColumn;
	function GridColumn(params) {
	    return function (target, propertyName) {
	        //  console.log({target, propertyName, constr:target.constructor});
	        var regColumn = {
	            propertyName: propertyName,
	            objectType: target.constructor
	        };
	        _.assign(regColumn, params);
	        registerGridColumn_1.registerGridColumn(regColumn);
	        // registerGridColumn({
	        //     caption: params.caption,
	        //     width: params.width,
	        //     showHierarchyTree: params.showHierarchyTree,
	        //     showHierarchyPadding: params.showHierarchyPadding,
	        //     order: params.order || 0,
	        //     propertyName: propertyName,
	        //     objectType: target.constructor,
	        // });
	    };
	}
	exports.GridColumn = GridColumn;


/***/ },
/* 37 */
/***/ function(module, exports) {

	"use strict";
	function registerGridColumn(columnInfo) {
	    var objType = columnInfo.objectType;
	    if (!objType.$$gridColumnInfos)
	        objType.$$gridColumnInfos = [];
	    objType.$$gridColumnInfos.push(columnInfo);
	    //console.log("registerPropertyEditor " + editor.propertyName);
	    //console.log(editor);
	}
	exports.registerGridColumn = registerGridColumn;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var DesignedObject_1 = __webpack_require__(11);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var ListPropertyEditor_1 = __webpack_require__(39);
	var TreeGridColumn_1 = __webpack_require__(36);
	var SqlTable = (function (_super) {
	    __extends(SqlTable, _super);
	    function SqlTable() {
	        _super.apply(this, arguments);
	        this.columns = [];
	    }
	    SqlTable.prototype.addColumn = function (initCallback) {
	        var col = new SqlTableColumn(this);
	        if (initCallback)
	            initCallback(col);
	        this.columns.push(col);
	        return col;
	    };
	    SqlTable.prototype.getClassName = function () {
	        return "sql-таблица";
	    };
	    SqlTable.prototype.toString = function () {
	        return this.name;
	    };
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя таблицы"
	        })
	    ], SqlTable.prototype, "name", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "sql имя",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "sql имя таблицы"
	        })
	    ], SqlTable.prototype, "sqlname", void 0);
	    __decorate([
	        ListPropertyEditor_1.ListEditor({
	            inputTab: "Колонки",
	            getNewListItem: function (table) {
	                return new SqlTableColumn(table);
	            }
	        })
	    ], SqlTable.prototype, "columns", void 0);
	    return SqlTable;
	}(DesignedObject_1.DesignedObject));
	exports.SqlTable = SqlTable;
	var SqlTableColumn = (function (_super) {
	    __extends(SqlTableColumn, _super);
	    function SqlTableColumn($$table) {
	        _super.call(this);
	        this.$$table = $$table;
	    }
	    Object.defineProperty(SqlTableColumn.prototype, "table", {
	        get: function () {
	            return this.$$table;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SqlTableColumn.prototype, "testColumn", {
	        get: function () {
	            return this.name + "+" + this.dataType + "->" + this.table.name + this.table.$$uniqueObjectId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    SqlTableColumn.prototype.getClassName = function () {
	        return "sql-колонка";
	    };
	    SqlTableColumn.prototype.toString = function () {
	        return this.name + " of (" + this.table.name + ")";
	    };
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя колонки",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя колонки"
	        }),
	        TreeGridColumn_1.GridColumn({ caption: "Имя колонки" })
	    ], SqlTableColumn.prototype, "name", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "тип",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "sql тип колонки"
	        }),
	        TreeGridColumn_1.GridColumn({ caption: "Тип" })
	    ], SqlTableColumn.prototype, "dataType", void 0);
	    __decorate([
	        TreeGridColumn_1.GridColumn({ caption: "test", order: -1 })
	    ], SqlTableColumn.prototype, "testColumn", null);
	    return SqlTableColumn;
	}(DesignedObject_1.DesignedObject));
	exports.SqlTableColumn = SqlTableColumn;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var BasePropertyEditor_1 = __webpack_require__(14);
	var registerPropertyEditor_1 = __webpack_require__(15);
	var TreeGrid_1 = __webpack_require__(40);
	var TreeGridArrayDataSource_1 = __webpack_require__(44);
	var ListPropertyEditor = (function (_super) {
	    __extends(ListPropertyEditor, _super);
	    function ListPropertyEditor() {
	        _super.apply(this, arguments);
	    }
	    ListPropertyEditor.prototype.handleChange = function (event) {
	        // this.props.designedObject[this.props.propertyName] = (event.target as any).value;
	        // console.log("change === " + this.props.propertyName + " " + this.props.designedObject[this.props.propertyName]);
	    };
	    ListPropertyEditor.prototype.render = function () {
	        var _this = this;
	        var autoFormControlProps = {
	            inputCaption: this.props.inputCaption,
	            inputTab: this.props.inputTab,
	            inputGroup: this.props.inputGroup,
	            inputDescription: this.props.inputDescription
	        };
	        this.addProps(autoFormControlProps);
	        // return (
	        //     <Input
	        //         type={InputType.Text}
	        //         bindObject={this.props.designedObject}
	        //         bindPropName={this.props.propertyName}
	        //         onChange={this.props.onChange}
	        //         {...this.getRenderProps()}
	        //     />
	        // );
	        var dataSource = new TreeGridArrayDataSource_1.TreeGridArrayDataSource(this.props.designedObject[this.props.propertyName]);
	        dataSource.params.getNewRow = function () { return _this.props.customParams.getNewListItem(_this.props.designedObject); };
	        return (React.createElement(TreeGrid_1.TreeGrid, {dataSource: dataSource, treeMode: "flat", editable: true}));
	    };
	    return ListPropertyEditor;
	}(BasePropertyEditor_1.BasePropertyEditor));
	exports.ListPropertyEditor = ListPropertyEditor;
	function ListEditor(params) {
	    return function (target, propertyName) {
	        registerPropertyEditor_1.registerPropertyEditor({
	            inputCaption: params.inputCaption,
	            inputTab: params.inputTab,
	            inputGroup: params.inputGroup,
	            inputDescription: params.inputDescription,
	            propertyName: propertyName,
	            objectType: target.constructor,
	            editorType: ListPropertyEditor,
	            propertyType: String,
	            customParams: params
	        });
	    };
	}
	exports.ListEditor = ListEditor;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	//import {executeSQL} from "../buhta-core/SQL";
	var Component_1 = __webpack_require__(5);
	var TreeGridColumns_1 = __webpack_require__(41);
	var TreeGridColumn_1 = __webpack_require__(36);
	var Keycode_1 = __webpack_require__(42);
	var Movable_1 = __webpack_require__(34);
	var getScrollBarWidth_1 = __webpack_require__(43);
	var Button_1 = __webpack_require__(22);
	var Layout_1 = __webpack_require__(7);
	var Fixed_1 = __webpack_require__(8);
	var Flex_1 = __webpack_require__(9);
	var ObjectDesigner_1 = __webpack_require__(17);
	var Error_1 = __webpack_require__(6);
	var TreeGridState = (function (_super) {
	    __extends(TreeGridState, _super);
	    function TreeGridState(treeGrid) {
	        _super.call(this, treeGrid);
	        this.treeGrid = treeGrid;
	    }
	    TreeGridState.prototype.getFocusedRow = function () {
	        return this.dataSource.getRow(this.focusedRowIndex);
	    };
	    TreeGridState.prototype.refreshRow = function (rowIndex) {
	        this.treeGrid.refreshRow(rowIndex);
	    };
	    TreeGridState.prototype.refreshFocusedRow = function () {
	        this.treeGrid.refreshRow(this.focusedRowIndex);
	    };
	    return TreeGridState;
	}(Component_1.ComponentState));
	exports.TreeGridState = TreeGridState;
	var InternalColumn = (function () {
	    function InternalColumn() {
	    }
	    return InternalColumn;
	}());
	exports.InternalColumn = InternalColumn;
	var InternalRow = (function () {
	    function InternalRow(gridState) {
	        this.gridState = gridState;
	        //    sourceRow: any;
	        //    sourceIndex: number;
	        this.cellElements = [];
	    }
	    InternalRow.prototype.getSourceObject = function () {
	        return this.gridState.dataSource.getRow(this.node.sourceIndex);
	        //
	        // if (this.node.sourceRow === undefined)
	        //     return this.gridState.dataSource.getDataRows()[this.node.sourceIndex];
	        // else
	        //     return this.node.sourceRow;
	    };
	    return InternalRow;
	}());
	exports.InternalRow = InternalRow;
	var InternalTreeNode = (function () {
	    function InternalTreeNode(gridState) {
	        this.gridState = gridState;
	        //sourceRow: any;
	        //sourceRowContainer: any;  // массив children, в котором сидит sourceRow, используется в DragDrop
	        this.cellElements = [];
	        this.children = [];
	    }
	    InternalTreeNode.prototype.pushRowRecursive = function (rows, maxPageLength) {
	        if (rows.length >= maxPageLength)
	            return;
	        var row = new InternalRow(this.gridState);
	        //row.node.sourceIndex = this.sourceIndex;
	        //row.sourceRow = this.sourceRow;
	        row.node = this;
	        rows.push(row);
	        if (this.expanded) {
	            this.children.forEach(function (child) {
	                child.pushRowRecursive(rows, maxPageLength);
	            });
	        }
	    };
	    InternalTreeNode.prototype.iterateRecursive = function (callback) {
	        callback(this);
	        this.children.forEach(function (child) {
	            child.iterateRecursive(callback);
	        });
	    };
	    return InternalTreeNode;
	}());
	exports.InternalTreeNode = InternalTreeNode;
	//const vertScrollBarWidth = 30;
	var TreeGrid = (function (_super) {
	    __extends(TreeGrid, _super);
	    function TreeGrid(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.handleUpdateButtonClick = function () {
	            _this.openEditForm(_this.state.rows[_this.state.focusedRowIndex]);
	        };
	        this.handleInsertButtonClick = function () {
	            _this.openInsertForm();
	        };
	        this.handleDeleteButtonClick = function () {
	            _this.openDeleteForm(_this.state.rows[_this.state.focusedRowIndex]);
	        };
	        this.lastBodyWrapperHeight = 0;
	        this.lastBodyWrapperWidth = 0;
	        this.handleBodyWrapperElementResize = function () {
	            var newHeight = _this.state.bodyWrapperElement.offsetHeight;
	            if (newHeight !== _this.lastBodyWrapperHeight) {
	                _this.lastBodyWrapperHeight = newHeight;
	                _this.handleScroll();
	            }
	            var newWidth = _this.state.bodyWrapperElement.offsetWidth;
	            if (newWidth !== _this.lastBodyWrapperWidth) {
	                _this.lastBodyWrapperWidth = newWidth;
	                _this.handleScroll();
	            }
	        };
	        this.handleDragStart = function (e) {
	            var $tr = $(e.target).parents("tr").first();
	            var index = Number.parseInt($tr.attr("data-source-index"));
	            var mode = "move";
	            if (e.ctrlKey)
	                mode = "copy";
	            if (_this.state.dataSource.canDragRow(index, mode)) {
	                _this.state.isCellDragging = true;
	                _this.state.draggingRowSourceIndex = index;
	                _this.state.draggingMode = mode;
	                e.dataTransfer.effectAllowed = mode;
	                e.dataTransfer.setData("movable", "");
	            }
	            else
	                _this.state.isCellDragging = false;
	        };
	        this.handleDragEnd = function (e) {
	            _this.state.isCellDragging = false;
	            var $tbody = $(e.target).parents("tbody").first();
	            $tbody.find(".drop-allow-after-cell").removeClass("drop-allow-after-cell");
	            $tbody.find(".drop-deny-after-cell").removeClass("drop-deny-after-cell");
	            $tbody
	                .find(".drop-arrow")
	                .addClass("is-hidden")
	                .removeClass("drop-deny-into-cell")
	                .removeClass("drop-allow-into-cell");
	            _this.forceUpdate();
	        };
	        this.handleDrop = function (e) {
	            // console.log("handleDrop");
	            var $tr = $(e.target).parents("tr").first();
	            var $tr_prev = $tr.prev();
	            var index = Number.parseInt($tr.attr("data-source-index"));
	            var index_prev = Number.parseInt($tr_prev.attr("data-source-index"));
	            var relativeY = (e.clientY - $tr.offset().top) / $tr.outerHeight();
	            if (relativeY < 0.33) {
	                _this.state.dataSource.dropAfter(_this.state.draggingRowSourceIndex, index_prev, _this.state.draggingMode);
	            }
	            else if (relativeY < 0.66) {
	                _this.state.dataSource.dropInto(_this.state.draggingRowSourceIndex, index, _this.state.draggingMode);
	            }
	            else {
	                _this.state.dataSource.dropAfter(_this.state.draggingRowSourceIndex, index, _this.state.draggingMode);
	            }
	            _this.refreshDataSource();
	            _this.forceUpdate();
	        };
	        this.handleDragOver = function (e) {
	            var $tbody = $(e.target).parents("tbody").first();
	            $tbody.find(".drop-allow-after-cell").removeClass("drop-allow-after-cell");
	            $tbody.find(".drop-deny-after-cell").removeClass("drop-deny-after-cell");
	            $tbody
	                .find(".drop-arrow")
	                .addClass("is-hidden")
	                .removeClass("drop-deny-into-cell")
	                .removeClass("drop-allow-into-cell");
	            var $tr = $(e.target).parents("tr").first();
	            var $tr_prev = $tr.prev();
	            var index = Number.parseInt($tr.attr("data-source-index"));
	            var index_prev = Number.parseInt($tr_prev.attr("data-source-index"));
	            var relativeY = (e.clientY - $tr.offset().top) / $tr.outerHeight();
	            if (relativeY < 0.33) {
	                if (_this.state.dataSource.canDropAfter(_this.state.draggingRowSourceIndex, index_prev, _this.state.draggingMode)) {
	                    $tr_prev.children("td").addClass("drop-allow-after-cell");
	                    e.preventDefault();
	                }
	                else {
	                    $tr_prev.children("td").addClass("drop-deny-after-cell");
	                }
	            }
	            else if (relativeY < 0.66) {
	                if (_this.state.dataSource.canDropInto(_this.state.draggingRowSourceIndex, index, _this.state.draggingMode)) {
	                    $tr.children("td").find(".drop-arrow").removeClass("is-hidden").addClass("drop-allow-into-cell");
	                    e.preventDefault();
	                }
	                else {
	                    $tr.children("td").find(".drop-arrow").removeClass("is-hidden").addClass("drop-deny-into-cell");
	                }
	            }
	            else {
	                if (_this.state.dataSource.canDropAfter(_this.state.draggingRowSourceIndex, index, _this.state.draggingMode)) {
	                    $tr.children("td").addClass("drop-allow-after-cell");
	                    e.preventDefault();
	                }
	                else {
	                    $tr.children("td").addClass("drop-deny-after-cell");
	                }
	            }
	        };
	        this.columnResizeStart = function (event, col) {
	            event.bindX(col, "width", function () {
	                $(col.headerWidthNativeElement).attr("width", col.width);
	                $(col.bodyWidthNativeElement).attr("width", col.width);
	                $(col.footerWidthNativeElement).attr("width", col.width);
	                var tableWidth = _this.calcTotalColumnsWidth();
	                $(_this.state.headerTableElement).css("width", tableWidth);
	                $(_this.state.bodyTableElement).css("width", tableWidth);
	                $(_this.state.footerTableElement).css("width", tableWidth);
	                $(_this.state.bodyWrapperElement).css("max-width", tableWidth + getScrollBarWidth_1.getScrollbarWidth() + 1);
	            });
	            // this.handleOnClick(null);
	        };
	        this.state = new TreeGridState(this);
	    }
	    TreeGrid.prototype.iterateAllNodes = function (callback) {
	        this.state.nodes.forEach(function (node) {
	            node.iterateRecursive(callback);
	        });
	    };
	    TreeGrid.prototype.expandAll = function () {
	        this.state.nodes.forEach(function (node) {
	            node.iterateRecursive(function (nod) {
	                nod.expanded = true;
	            });
	        });
	        this.createRows();
	        this.forceUpdate();
	    };
	    TreeGrid.prototype.collapseAll = function () {
	        this.iterateAllNodes(function (nod) {
	            nod.expanded = false;
	        });
	        this.createRows();
	        this.forceUpdate();
	    };
	    TreeGrid.prototype.getRowIndex = function (sourceIndex) {
	        // TODO: сделать вариант для treeMode
	        for (var i = 0; i < this.state.rows.length; i++) {
	            if (this.state.rows[i].node.sourceIndex === sourceIndex)
	                return i;
	        }
	        return -1;
	    };
	    TreeGrid.prototype.refreshRow = function (sourceIndex) {
	        this.createRows();
	        var index = this.getRowIndex(sourceIndex);
	        this.state.focusedRowIndex = index;
	        this.forceUpdate();
	        // TODO: сделать прокрутку, если focused не видна на экране
	    };
	    TreeGrid.prototype.openDeleteForm = function (rowToDelete) {
	        var _this = this;
	        //let rowToDelete = this.state.rows[this.state.focusedRowIndex];
	        var row = rowToDelete.getSourceObject();
	        var objectClassName = "запись";
	        if (row.getClassName)
	            objectClassName = row.getClassName();
	        var objectName = "";
	        if (row.toString)
	            objectName = row.toString();
	        var message = React.createElement("div", {className: "color-red"}, 
	            "Удалить \"", 
	            objectClassName, 
	            "\"?", 
	            React.createElement("br", null), 
	            objectName);
	        this.showDeleteConfirmationWindow(message, function (okResult) {
	            console.log(okResult);
	            if (okResult) {
	                _this.state.dataSource.deleteRow(rowToDelete.node.sourceIndex);
	                if (_this.state.dataSource.getRows().length === 0)
	                    _this.refreshDataSource();
	                else {
	                    var newFocusedIndex = _this.state.rows.indexOf(rowToDelete);
	                    if (newFocusedIndex > _this.state.rows.length - 2)
	                        newFocusedIndex = _this.state.rows.length - 2;
	                    _this.refreshRow(_this.state.rows[newFocusedIndex].node.sourceIndex);
	                }
	                _this.forceUpdate();
	            }
	        });
	    };
	    TreeGrid.prototype.openInsertForm = function () {
	        var _this = this;
	        var designedObject = this.state.dataSource.getNewRow();
	        if (designedObject) {
	            var win = React.createElement(ObjectDesigner_1.ObjectDesigner, {designedObject: designedObject, onSaveChanges: function () {
	                var index = _this.state.dataSource.addRow(designedObject);
	                if (_this.state.dataSource.getRows().length === 1)
	                    _this.refreshDataSource();
	                else
	                    _this.refreshRow(index);
	            }});
	            var openParam = {
	                title: "добавление",
	                top: 50,
	                left: 50,
	                parentWindowId: this.getParentWindowId()
	            };
	            this.getParentDesktop().openWindow(win, openParam);
	        }
	    };
	    TreeGrid.prototype.openEditForm = function (row) {
	        var _this = this;
	        var designedObject = this.state.dataSource.getRows()[row.node.sourceIndex];
	        var win = React.createElement(ObjectDesigner_1.ObjectDesigner, {designedObject: designedObject, onSaveChanges: function () { _this.refreshRow(row.node.sourceIndex); }});
	        var openParam = {
	            title: "редактирование",
	            top: 50,
	            left: 50,
	            parentWindowId: this.getParentWindowId()
	        };
	        this.getParentDesktop().openWindow(win, openParam);
	    };
	    TreeGrid.prototype.createColumns = function () {
	        var _this = this;
	        this.state.columns = [];
	        // сначала колонки заполняем из тегов <TreeGridColumn>
	        var columnsTag = this.getChildren(TreeGridColumns_1.TreeGridColumns);
	        columnsTag.forEach(function (tag) {
	            var columnTagList = _this.getChildrenOfProps(tag.props, TreeGridColumn_1.TreeGridColumn);
	            columnTagList = columnTagList.sort(function (a, b) {
	                var A = a.props;
	                var B = b.props;
	                return A.order - B.order;
	            });
	            columnTagList.forEach(function (propCol) {
	                var col = new InternalColumn();
	                col.props = propCol.props;
	                col.width = propCol.props.width || 150;
	                col.caption = propCol.props.caption;
	                col.fieldName = propCol.props.propertyName;
	                col.caption = propCol.props.caption || col.fieldName;
	                _this.state.columns.push(col);
	            });
	        });
	        // если тегов <TreeGridColumn> нет, то заполняем из DataSource
	        if (this.state.columns.length === 0) {
	            if (this.state.dataSource.isTreeGridDataSource) {
	                var ds = this.state.dataSource;
	                var columns = ds.getTreeGridColumns().sort(function (a, b) {
	                    return a.order - b.order;
	                });
	                columns.forEach(function (propCol) {
	                    var col = new InternalColumn();
	                    col.props = propCol;
	                    col.width = propCol.width || 150;
	                    col.caption = propCol.caption || "";
	                    col.fieldName = propCol.propertyName || "";
	                    col.caption = propCol.caption || col.fieldName;
	                    _this.state.columns.push(col);
	                });
	            }
	        }
	        if (this.state.columns.length === 0)
	            Error_1.throwError("TreeGrid: список колонок не определен.");
	    };
	    TreeGrid.prototype.initFocused = function () {
	        this.state.focusedRowIndex = 0;
	        this.state.focusedCellIndex = 0;
	    };
	    TreeGrid.prototype.createNodes = function () {
	        if (this.props.treeMode === "flat")
	            this.createNodesFromFlat();
	        else if (this.props.treeMode === "delimiterChar") {
	            this.createNodesFromHierarchyField();
	        }
	        else if (this.props.treeMode === "childrenList") {
	            this.createNodesFromChildrenList();
	        }
	        else
	            Error_1.throwError("TreeGrid.createNodes(): unknown treeMode '" + this.props.treeMode + "'");
	    };
	    TreeGrid.prototype.createNodesFromFlat = function () {
	        var _this = this;
	        this.state.nodes = [];
	        this.state.dataSource.getRows().forEach(function (dataRow, index) {
	            var node = new InternalTreeNode(_this.state);
	            node.sourceIndex = index;
	            //node.sourceRow = dataRow;
	            _this.state.nodes.push(node);
	        }, this);
	    };
	    TreeGrid.prototype.createNodesFromChildrenList = function () {
	        //if (!this.props.hierarchyFieldName)
	        //  throwError("TreeGrid: property 'hierarchyFieldName' is undefined");
	        var _this = this;
	        this.state.nodes = [];
	        var addChildren = function (toArray, dataRow, level) {
	            var node = new InternalTreeNode(_this.state);
	            node.sourceIndex = dataRow.$$flatIndex;
	            //node.sourceRow = dataRow;
	            node.level = level;
	            node.expanded = node.level < _this.props.autoExpandNodesToLevel;
	            toArray.push(node);
	            var children = _this.state.dataSource.getRowChildren(node.sourceIndex); //dataRow[this.props.hierarchyFieldName!];
	            if (!children)
	                Error_1.throwError("TreeGrid: dataRow has no children list property '" + _this.props.hierarchyFieldName + "'");
	            if (!_.isArray(children))
	                Error_1.throwError("TreeGrid: children list property '" + _this.props.hierarchyFieldName + "' should be array");
	            children.forEach(function (dataRow, index) {
	                addChildren(node.children, dataRow, level + 1);
	            });
	        };
	        this.state.dataSource.getRows().forEach(function (dataRow, index) {
	            addChildren(_this.state.nodes, dataRow, 0);
	        }, this);
	    };
	    TreeGrid.prototype.createNodesFromHierarchyField = function () {
	        var _this = this;
	        if (!this.state.dataSource)
	            return;
	        if (!this.props.hierarchyFieldName)
	            Error_1.throwError("TreeGrid: property 'hierarchyFieldName' is undefined");
	        if (!this.props.hierarchyDelimiters) {
	            Error_1.throwError("TreeGrid: property 'hierarchyDelimiters' is undefined");
	        }
	        var sorted = this.state.dataSource.getRows().map(function (obj, index) {
	            return {
	                hierarchyStr: obj[_this.props.hierarchyFieldName || ""].toString(),
	                objIndex: index
	            };
	        });
	        sorted = _.sortBy(sorted, ["hierarchyStr"]);
	        var cache = {};
	        this.state.nodes = [];
	        sorted.forEach(function (s, index) {
	            var hierarchyDelimiters = _this.props.hierarchyDelimiters || ".";
	            var splitted = s.hierarchyStr.split(hierarchyDelimiters);
	            var parentId;
	            var nodeId;
	            if (splitted.length === 1)
	                nodeId = s.hierarchyStr;
	            else {
	                nodeId = _.last(splitted);
	                parentId = splitted.slice(0, splitted.length - 1).join(hierarchyDelimiters.slice(0, 1));
	            }
	            if (!parentId) {
	                if (cache[nodeId])
	                    Error_1.throwError("XTreeGrid: nodeId '" + nodeId + "' is duplicated");
	                else {
	                    var node = new InternalTreeNode(_this.state);
	                    node.sourceIndex = s.objIndex;
	                    // todo fill node.sourceRow
	                    node.level = 0;
	                    node.expanded = node.level < _this.props.autoExpandNodesToLevel;
	                    cache[nodeId] = node;
	                    _this.state.nodes.push(node);
	                }
	            }
	            else {
	                var parentNode = cache[parentId];
	                var node = new InternalTreeNode(_this.state);
	                node.sourceIndex = s.objIndex;
	                // todo fill node.sourceRow
	                node.level = parentNode.level + 1;
	                node.expanded = node.level < _this.props.autoExpandNodesToLevel;
	                cache[s.hierarchyStr] = node;
	                parentNode.children.push(node);
	            }
	            // console.log({str: s.hierarchyStr, parentId, nodeId});
	        });
	    };
	    TreeGrid.prototype.createRows = function () {
	        var _this = this;
	        this.state.rows = [];
	        //if (this.props.treeMode !== "flat") {
	        if (this.state.nodes) {
	            this.state.nodes.forEach(function (node) {
	                node.pushRowRecursive(_this.state.rows, _this.state.pageLength);
	            });
	        }
	        //}
	        //else {
	        //throwError("?");
	        // if (!this.state.dataSource)
	        //     return;
	        //
	        // if (this.state.dataSource.isTreeGridDataSource) {
	        //     let ds = this.state.dataSource as TreeGridDataSource;
	        //     ds.getDataRows().forEach((obj: any, index: number) => {
	        //         let row = new InternalRow(this.state);
	        //         row.sourceIndex = index;
	        //         this.state.rows.push(row);
	        //     });
	        // }
	        // else {
	        //     this.state.dataSource.getDataRows().forEach((obj: any, index: number) => {
	        //         let row = new InternalRow(this.state);
	        //         row.sourceIndex = index;
	        //         this.state.rows.push(row);
	        //     });
	        // }
	        //this.initFocused();
	        //}
	        if (this.state.columns && this.state.columns.length > 0 && this.state.dataSource)
	            this.state.columns[0].footer = this.state.dataSource.getRows().length + " поз.";
	    };
	    TreeGrid.prototype.filterData = function () {
	        //            if (this.props.dataSource) {
	        //                this.state.data = this.props.dataSource.map((row) => row);
	        //            }
	        //this.rows = window["xxx"].filter((row) => row["Название"].indexOf("Phil") > -1);
	    };
	    TreeGrid.prototype.didMount = function () {
	        this.handleChangeFocused();
	        this.handleScroll();
	        this.bodyWrapperElementInterval = setInterval(this.handleBodyWrapperElementResize, 10);
	    };
	    TreeGrid.prototype.willUnmount = function () {
	        clearInterval(this.bodyWrapperElementInterval);
	    };
	    TreeGrid.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        this.state.dataSource = this.props.dataSource;
	        this.createColumns();
	        this.createNodes();
	        this.createRows();
	        this.state.pageLength = 500;
	    };
	    TreeGrid.prototype.refreshDataSource = function () {
	        this.state.dataSource = this.props.dataSource;
	        this.createColumns();
	        this.createNodes();
	        this.createRows();
	        this.forceUpdate();
	    };
	    // private testLoad500() {
	    //
	    //     executeSQL("select TOP 5000 Ключ,Номер,Название from [Вид ТМЦ] order by Номер")
	    //         .done((table) => {
	    //
	    //             this.dataSource = table.rows.map((r) => {
	    //                 return {Ключ: r["Ключ"], Номер: r["Номер"], Название: r["Название"]};
	    //             });
	    //             this.createColumns();
	    //             this.createNodes();
	    //             this.createRows();
	    //             this.forceUpdate();
	    //
	    //
	    //             console.log("select top 5006* Ключ,Номер,Название from [Вид ТМЦ] order by Ключ --> " + table.rows[0].getValue(2));
	    //         })
	    //         .fail((err) => {
	    //             alert(err.message);
	    //         });
	    //
	    // }
	    TreeGrid.prototype.willReceiveProps = function (nextProps) {
	    };
	    TreeGrid.prototype.didUpdate = function (prevProps, prevState, prevContext) {
	        this.handleChangeFocused();
	        this.handleScroll();
	    };
	    TreeGrid.prototype.renderRows = function () {
	        var _this = this;
	        //console.log("renderRows-start()");
	        var ret = [];
	        if (!this.state.rows)
	            return ret;
	        console.log("render-rows: " + this.state.rows.length);
	        this.state.rows.forEach(function (row, index) {
	            ret.push(_this.renderRow(row, index));
	            // if (this.state.isCellDragging) {
	            //     let fakeRow = (
	            //         <tr>
	            //             <td colspan="100">уроды</td>
	            //         </tr>
	            //     );
	            //     ret.push(fakeRow);
	            // }
	        });
	        //console.log("renderRows-end()");
	        return ret;
	    };
	    TreeGrid.prototype.renderRow = function (row, rowIndex) {
	        return (React.createElement("tr", {key: rowIndex, "data-source-index": row.node.sourceIndex, ref: function (e) { row.element = e; }}, this.renderCells(row, rowIndex)));
	    };
	    TreeGrid.prototype.renderCells = function (row, rowIndex) {
	        var _this = this;
	        var ret = [];
	        this.state.columns.forEach(function (col, colIndex) {
	            ret.push(_this.renderCell(row, rowIndex, col, colIndex));
	        });
	        return ret;
	    };
	    TreeGrid.prototype.clearDragCssClasses = function (target) {
	    };
	    TreeGrid.prototype.renderCell = function (row, rowIndex, col, colIndex) {
	        var _this = this;
	        var sourceObject = row.getSourceObject();
	        var cellContent = "";
	        if (col.props.propertyName === undefined)
	            cellContent = "'propertyName' undefined";
	        else if (sourceObject[col.props.propertyName] === undefined)
	            cellContent = "bad property '" + col.props.propertyName + "'";
	        else
	            cellContent = sourceObject[col.props.propertyName]; // todo col.props.propertyName || ""
	        var node = row.node;
	        var hierarchyPaddingDiv = [];
	        if (this.props.treeMode !== "flat" && (col.props.showHierarchyPadding || col.props.showHierarchyTree)) {
	            hierarchyPaddingDiv = React.createElement("span", {style: { width: node.level * 20, display: "inline-block" }});
	        }
	        var tdStyle = { overflow: "hidden" };
	        // if (this.props.treeMode !== "flat" && col.props.showHierarchyTree) {
	        //     tdStyle.borderBottomColor = "rgba(255, 0, 0, 0)";
	        // }
	        var strSpanStyle = {
	            lineHeight: "100%",
	            display: "inline-block"
	        };
	        if (this.props.treeMode !== "flat" && col.props.showHierarchyTree && node.expanded && node.children.length > 0) {
	            strSpanStyle.fontWeight = "bold";
	        }
	        var strSpanProps = {};
	        if (this.props.dragDropNodes === true && col.props.showHierarchyTree === true) {
	            strSpanProps.draggable = true;
	            strSpanProps.className = "draggable";
	            strSpanProps.onDragStart = this.handleDragStart;
	            strSpanProps.onDragEnd = this.handleDragEnd;
	        }
	        var strSpan = React.createElement("span", __assign({style: strSpanStyle}, strSpanProps), cellContent);
	        var collapseIconDiv = [];
	        if (this.props.treeMode !== "flat" && col.props.showHierarchyTree) {
	            if (node.children.length > 0) {
	                if (node.expanded) {
	                    collapseIconDiv = (React.createElement("div", {className: "row-collapse-icon", style: { width: 20, flex: "0 0 auto" }}, 
	                        React.createElement("span", {className: "icon is-small", style: { cursor: "pointer" }, onClick: function (e) { node.expanded = false; _this.createRows(); _this.forceUpdate(); }}, 
	                            React.createElement("i", {className: "fa fa-caret-down"})
	                        )
	                    ));
	                }
	                else {
	                    collapseIconDiv = (React.createElement("div", {className: "row-collapse-icon", style: { width: 20, flex: "0 0 auto" }}, 
	                        React.createElement("span", {className: "icon is-small", style: { cursor: "pointer" }, onClick: function (e) { node.expanded = true; _this.createRows(); _this.forceUpdate(); }}, 
	                            React.createElement("i", {className: "fa fa-caret-right"})
	                        )
	                    ));
	                }
	            }
	            else {
	                collapseIconDiv = (React.createElement("div", {className: "row-collapse-icon", style: { width: 20, flex: "0 0 auto" }}));
	            }
	        }
	        var tdDragOver;
	        var tdDrop;
	        if (this.props.dragDropNodes === true) {
	            tdDragOver = this.handleDragOver;
	            tdDrop = this.handleDrop;
	        }
	        var dropArrowDiv;
	        if (col.props.showHierarchyTree) {
	            dropArrowDiv = (React.createElement("div", {className: "drop-arrow is-hidden", style: { flex: "0 0 auto" }}, 
	                React.createElement("i", {className: "fa fa-arrow-right", style: { verticalAlign: "middle" }})
	            ));
	        }
	        return (React.createElement("td", {key: colIndex, style: tdStyle, ref: function (e) { return row.cellElements[colIndex] = e; }, onClick: function (e) { _this.setFocusedCell(rowIndex, colIndex); }, onDragOver: tdDragOver, onDrop: tdDrop}, 
	            React.createElement("div", {style: { display: "flex", flexDirection: "row", alignItems: "center" }}, 
	                dropArrowDiv, 
	                React.createElement("div", {className: "row-checkbox", style: { flex: "0 0 auto" }}), 
	                React.createElement("div", {className: "row-padding", style: { flex: "0 0 auto" }}, hierarchyPaddingDiv), 
	                collapseIconDiv, 
	                React.createElement("div", {className: "row-icon", style: { flex: "0 0 auto" }}), 
	                React.createElement("div", {className: "row-str", style: { flex: "0 1 auto" }}, strSpan))
	        ));
	    };
	    TreeGrid.prototype.setFocusedCell = function (rowIndex, cellIndex) {
	        this.state.focusedRowIndex = rowIndex;
	        this.state.focusedCellIndex = cellIndex;
	        this.handleChangeFocused();
	    };
	    TreeGrid.prototype.handleTableWheel = function (e) {
	        // if (e.deltaY > 0)
	        //     this.incPageStartIndex(3);
	        // else if (e.deltaY < 0)
	        //     this.decPageStartIndex(3);
	        // console.log(e.deltaY);
	        // this.forceUpdate();
	    };
	    TreeGrid.prototype.handleScroll = function () {
	        $(this.state.headerWrapperElement).css({ top: this.state.bodyWrapperElement.scrollTop });
	        var pos = this.state.bodyWrapperElement.scrollTop + this.state.bodyWrapperElement.clientHeight - $(this.state.footerWrapperElement).outerHeight() - 0;
	        $(this.state.footerWrapperElement).css({ top: pos });
	        $(this.state.headerFakeRow).css({ height: $(this.state.headerWrapperElement).outerHeight() });
	        $(this.state.footerFakeRow).css({ height: $(this.state.footerWrapperElement).outerHeight() });
	    };
	    TreeGrid.prototype.handleChangeFocused = function () {
	        if (!this.state.rows)
	            return;
	        this.state.rows.forEach(function (row) {
	            if (row.element)
	                $(row.element).removeClass("tree-grid-focused-row");
	            row.cellElements.forEach(function (cell) {
	                if (cell)
	                    $(cell).removeClass("tree-grid-focused-cell");
	            });
	        });
	        var focusedRow = this.state.rows[this.state.focusedRowIndex];
	        if (focusedRow && focusedRow.element) {
	            $(focusedRow.element).addClass("tree-grid-focused-row");
	            var focusedCellElement = focusedRow.cellElements[this.state.focusedCellIndex];
	            if (focusedCellElement) {
	                $(focusedCellElement).addClass("tree-grid-focused-cell");
	            }
	        }
	        if (this.props.onChangeFocusedRow !== undefined)
	            this.props.onChangeFocusedRow(this.state);
	    };
	    TreeGrid.prototype.getFocusedCellElement = function () {
	        return this.state.rows[this.state.focusedRowIndex].cellElements[this.state.focusedCellIndex];
	    };
	    TreeGrid.prototype.getFocusedRowElement = function () {
	        return this.state.rows[this.state.focusedRowIndex].element;
	    };
	    TreeGrid.prototype.moveFocusedCellDown = function () {
	        if (!this.state.rows)
	            return;
	        if (this.state.focusedRowIndex < this.state.rows.length - 1) {
	            this.state.focusedRowIndex++;
	            this.handleChangeFocused();
	            var rowEl = $(this.getFocusedRowElement());
	            // ушло за пределы видимости
	            if (rowEl.position().top + rowEl.height() >
	                this.state.bodyWrapperElement.scrollTop + this.state.bodyWrapperElement.clientHeight - $(this.state.footerWrapperElement).outerHeight()) {
	                this.state.bodyWrapperElement.scrollTop = rowEl.position().top + rowEl.height() -
	                    this.state.bodyWrapperElement.clientHeight + $(this.state.footerWrapperElement).outerHeight();
	            }
	        }
	    };
	    TreeGrid.prototype.moveFocusedCellLeft = function () {
	        if (!this.state.rows)
	            return;
	        if (this.state.focusedCellIndex > 0) {
	            this.state.focusedCellIndex--;
	            this.handleChangeFocused();
	        }
	    };
	    TreeGrid.prototype.moveFocusedCellRight = function () {
	        if (!this.state.rows)
	            return;
	        if (this.state.focusedCellIndex < this.state.columns.length - 1) {
	            this.state.focusedCellIndex++;
	            this.handleChangeFocused();
	        }
	    };
	    TreeGrid.prototype.moveFocusedCellUp = function () {
	        if (!this.state.rows)
	            return;
	        if (this.state.focusedRowIndex > 0) {
	            this.state.focusedRowIndex--;
	            this.handleChangeFocused();
	            var rowEl = $(this.getFocusedRowElement());
	            // ушло за пределы видимости
	            if (rowEl.position().top < this.state.bodyWrapperElement.scrollTop + $(this.state.headerWrapperElement).outerHeight()) {
	                this.state.bodyWrapperElement.scrollTop = rowEl.position().top - $(this.state.headerWrapperElement).outerHeight();
	            }
	        }
	    };
	    TreeGrid.prototype.handleBodyKeyDown = function (e) {
	        if (e.key === Keycode_1.Keycode.Down) {
	            this.moveFocusedCellDown();
	            e.preventDefault();
	        }
	        else if (e.key === Keycode_1.Keycode.Up) {
	            this.moveFocusedCellUp();
	            e.preventDefault();
	        }
	        else if (e.key === Keycode_1.Keycode.Left) {
	            this.moveFocusedCellLeft();
	            e.preventDefault();
	        }
	        else if (e.key === Keycode_1.Keycode.Right) {
	            this.moveFocusedCellRight();
	            e.preventDefault();
	        }
	    };
	    TreeGrid.prototype.renderColumnHeaders = function () {
	        var _this = this;
	        if (this.state.dataSource.getRows().length === 0)
	            return [];
	        var colWidths = [];
	        var colHeaders = [];
	        this.state.columns.forEach(function (col, index) {
	            colWidths.push(React.createElement("col", {key: index, width: col.width.toString() + "px", ref: function (e) { col.headerWidthNativeElement = e; }}));
	            var tdStyle = { overflow: "hidden" };
	            colHeaders.push(React.createElement("td", {key: index, style: tdStyle}, 
	                col.caption, 
	                React.createElement(Movable_1.Movable, {style: { position: "absolute", top: 0, width: 5, right: 0, bottom: 0, cursor: "col-resize" }, onMoveStart: function (event) { _this.columnResizeStart(event, col); console.log("MoveStart"); }}), 
	                React.createElement(Movable_1.Movable, {style: { position: "absolute", top: 0, width: index === 0 ? 0 : 5, left: 0, bottom: 0, cursor: "col-resize" }, onMoveStart: function (event) {
	                    // ресайзим предыдущую колонку
	                    _this.columnResizeStart(event, _this.state.columns[index - 1]);
	                }})));
	        });
	        return (React.createElement("div", {ref: function (e) { return _this.state.headerWrapperElement = e; }, style: { position: "absolute" }}, 
	            React.createElement("table", {className: "tree-grid-header", style: { tableLayout: "fixed", borderCollapse: "collapse", width: this.calcTotalColumnsWidth() }, ref: function (e) { return _this.state.headerTableElement = e; }}, 
	                React.createElement("colgroup", null, colWidths), 
	                React.createElement("tbody", null, 
	                    React.createElement("tr", null, colHeaders)
	                ))
	        ));
	    };
	    TreeGrid.prototype.renderColumnFooters = function () {
	        var _this = this;
	        if (this.state.dataSource.getRows().length === 0)
	            return [];
	        var colWidths = [];
	        var colFooters = [];
	        var isFooterEmpty = true;
	        this.state.columns.forEach(function (col, index) {
	            colWidths.push(React.createElement("col", {key: index, width: col.width.toString() + "px", ref: function (e) { col.footerWidthNativeElement = e; }}));
	            if (col.footer)
	                isFooterEmpty = false;
	            var tdStyle = { overflow: "hidden" };
	            colFooters.push(React.createElement("td", {key: index, style: tdStyle}, col.footer));
	        });
	        if (!isFooterEmpty)
	            return (React.createElement("div", {ref: function (e) { return _this.state.footerWrapperElement = e; }, style: { position: "absolute" }}, 
	                React.createElement("table", {className: "tree-grid-footer", style: { tableLayout: "fixed", borderCollapse: "collapse", width: this.calcTotalColumnsWidth() }, ref: function (e) { return _this.state.footerTableElement = e; }}, 
	                    React.createElement("colgroup", null, colWidths), 
	                    React.createElement("tbody", null, 
	                        React.createElement("tr", null, colFooters)
	                    ))
	            ));
	        else
	            return [];
	    };
	    TreeGrid.prototype.renderEmptyDataSourceMessage = function () {
	        if (this.state.dataSource.getRows().length > 0)
	            return [];
	        var message = this.state.dataSource.getEmptyDataSourceMessage();
	        return (React.createElement("div", {className: "tree-grid-empty-body"}, message));
	    };
	    TreeGrid.prototype.renderGridBody = function () {
	        var _this = this;
	        if (this.state.dataSource.getRows().length === 0)
	            return [];
	        var colWidths = [];
	        this.state.columns.forEach(function (col, index) {
	            colWidths.push(React.createElement("col", {key: index, width: col.width.toString() + "px", ref: function (e) { col.bodyWidthNativeElement = e; }}));
	        });
	        return (React.createElement("table", {className: "tree-grid-body", tabIndex: 0, onKeyDown: function (e) { _this.handleBodyKeyDown(e); }, style: { tableLayout: "fixed", borderCollapse: "collapse", position: "relative", width: this.calcTotalColumnsWidth() }, ref: function (e) { return _this.state.bodyTableElement = e; }}, 
	            React.createElement("colgroup", null, colWidths), 
	            React.createElement("tbody", null, 
	                React.createElement("tr", null, 
	                    React.createElement("td", {ref: function (e) { return _this.state.headerFakeRow = e; }})
	                ), 
	                this.renderRows(), 
	                React.createElement("tr", null, 
	                    React.createElement("td", {style: { border: "none" }, ref: function (e) { return _this.state.footerFakeRow = e; }})
	                ))));
	    };
	    TreeGrid.prototype.calcTotalColumnsWidth = function () {
	        var ret = 0;
	        this.state.columns.forEach(function (col) {
	            if (!col.hidden)
	                ret += col.width;
	        });
	        return ret;
	    };
	    TreeGrid.prototype.shallowCompare = function (nextProps) {
	        console.log("shallow-tree-grid");
	        //console.log("shallow-win -> isEqial = " + this.isPropsEqual(this.props, nextProps, ["children"]));
	        return !this.isPropsEqual(this.props, nextProps, ["children", "dataSource"]);
	    };
	    TreeGrid.prototype.renderEditableButtons = function () {
	        var buttons = [];
	        if (this.props.editable) {
	            if (this.props.denyInsert !== true)
	                buttons.push(React.createElement(Button_1.Button, {key: "insert", className: "is-outlined is-success", onClick: this.handleInsertButtonClick}, "Добавить"));
	            if (this.props.denyUpdate !== true)
	                buttons.push(React.createElement(Button_1.Button, {key: "update", className: "is-outlined is-info", onClick: this.handleUpdateButtonClick}, "Изменить"));
	            if (this.props.denyDelete !== true)
	                buttons.push(React.createElement(Button_1.Button, {key: "delete", className: "is-outlined is-danger", onClick: this.handleDeleteButtonClick}, "Удалить"));
	        }
	        return buttons;
	    };
	    TreeGrid.prototype.render = function () {
	        var _this = this;
	        //this.addClassName("button");
	        console.log("render-tree-grid");
	        var maxBodyWrapperWidth = this.calcTotalColumnsWidth() + getScrollBarWidth_1.getScrollbarWidth() + 1;
	        if (this.state.columns.length === 0)
	            maxBodyWrapperWidth = 0;
	        return (React.createElement(Layout_1.Layout, __assign({className: "tree-grid", type: "column", sizeTo: "parent"}, this.getRenderProps()), 
	            React.createElement(Fixed_1.Fixed, {className: "tree-grid-header-wrapper"}, 
	                React.createElement("button", {onClick: function () { }}, "refresh 5001"), 
	                React.createElement("button", {onClick: function () { _this.filterData(); _this.forceUpdate(); console.log("forceUpdate"); }}, "filter"), 
	                React.createElement("button", {onClick: function () { _this.expandAll(); }}, "expand all"), 
	                React.createElement("button", {onClick: function () { _this.collapseAll(); }}, "collapse all"), 
	                "заголовок и т.д."), 
	            React.createElement("div", {className: "tree-grid-body-wrapper", style: { position: "relative", overflow: "auto", flex: "1", maxWidth: maxBodyWrapperWidth }, onScroll: this.handleScroll.bind(this), ref: function (e) { _this.state.bodyWrapperElement = e; }}, 
	                this.renderEmptyDataSourceMessage(), 
	                this.renderGridBody(), 
	                this.renderColumnHeaders(), 
	                this.renderColumnFooters()), 
	            React.createElement(Fixed_1.Fixed, {className: "tree-grid-footer-wrapper"}, 
	                React.createElement(Layout_1.Layout, {type: "row", sizeTo: "content"}, 
	                    React.createElement(Fixed_1.Fixed, null, this.renderEditableButtons()), 
	                    React.createElement(Flex_1.Flex, null), 
	                    React.createElement(Fixed_1.Fixed, null, 
	                        React.createElement(Button_1.Button, {className: "is-smalln"}, "Выбрать"), 
	                        React.createElement(Button_1.Button, {className: "is-smalln"}, "Отмена")))
	            )));
	    };
	    return TreeGrid;
	}(Component_1.Component));
	exports.TreeGrid = TreeGrid;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Component_1 = __webpack_require__(5);
	var TreeGridColumns = (function (_super) {
	    __extends(TreeGridColumns, _super);
	    function TreeGridColumns(props, context) {
	        _super.call(this, props, context);
	    }
	    return TreeGridColumns;
	}(Component_1.Component));
	exports.TreeGridColumns = TreeGridColumns;


/***/ },
/* 42 */
/***/ function(module, exports) {

	"use strict";
	exports.Keycode = {
	    Esc: "Escape",
	    Space: " ",
	    Left: "ArrowLeft",
	    Up: "ArrowUp",
	    Down: "ArrowDown",
	    Right: "ArrowRight",
	    Del: "Delete",
	    Ins: "Insert",
	    Win: "Meta",
	    Menu: "ContextMenu",
	    Scroll: "ScrollLock",
	    Num: "NumLock",
	    Backspace: "Backspace",
	    Tab: "Tab",
	    Enter: "Enter",
	    Shift: "Shift",
	    Control: "Control",
	    Alt: "Alt",
	    Break: "Pause",
	    CapsLock: "CapsLock",
	    PageUp: "PageUp",
	    PageDown: "PageDown",
	    End: "End",
	    Home: "Home",
	    F1: "F1",
	    F2: "F2",
	    F3: "F3",
	    F4: "F4",
	    F5: "F5",
	    F6: "F6",
	    F7: "F7",
	    F8: "F8",
	    F9: "F9",
	    F10: "F10",
	    F11: "F11",
	    F12: "F12"
	};


/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	var cacheWidth = 0;
	window.addEventListener("resize", function (ev) {
	    cacheWidth = 0;
	    console.log("resize");
	});
	function getScrollbarWidth() {
	    if (cacheWidth > 0)
	        return cacheWidth;
	    var outer = document.createElement("div");
	    outer.style.visibility = "hidden";
	    outer.style.width = "100px";
	    outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	    document.body.appendChild(outer);
	    var widthNoScroll = outer.offsetWidth;
	    outer.style.overflow = "scroll";
	    var inner = document.createElement("div");
	    inner.style.width = "100%";
	    outer.appendChild(inner);
	    var widthWithScroll = inner.offsetWidth;
	    outer.parentNode.removeChild(outer);
	    cacheWidth = widthNoScroll - widthWithScroll;
	    return cacheWidth;
	}
	exports.getScrollbarWidth = getScrollbarWidth;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var getGridColumnInfos_1 = __webpack_require__(45);
	var Error_1 = __webpack_require__(6);
	var TreeGridArrayDataSource = (function () {
	    function TreeGridArrayDataSource(arrayObj, params) {
	        if (params === void 0) { params = {}; }
	        this.arrayObj = arrayObj;
	        this.params = params;
	    }
	    Object.defineProperty(TreeGridArrayDataSource.prototype, "isTreeGridDataSource", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridArrayDataSource.prototype.getTreeGridColumns = function () {
	        if (this.arrayObj.length === 0)
	            return [];
	        else
	            return getGridColumnInfos_1.getGridColumnInfos(this.arrayObj[0]).map(function (col) {
	                var ret = {};
	                _.assign(ret, col);
	                return ret;
	                // return ({
	                //     caption: col.caption,
	                //     width: col.width,
	                //     order: col.order,
	                //     propertyName: col.propertyName,
	                //     showHierarchyTree: col.showHierarchyTree,
	                //     showHierarchyPadding: col.showHierarchyPadding
	                // });
	            });
	    };
	    TreeGridArrayDataSource.prototype.getRows = function () {
	        return this.arrayObj;
	    };
	    TreeGridArrayDataSource.prototype.getRow = function (index) {
	        return this.arrayObj[index];
	    };
	    TreeGridArrayDataSource.prototype.getNewRow = function () {
	        if (this.params.getNewRow)
	            return this.params.getNewRow();
	        else {
	            Error_1.throwError("TreeGridArrayDataSource: method getNewRow() not defined");
	            throw ""; // fake typescript 2
	        }
	    };
	    TreeGridArrayDataSource.prototype.addRow = function (row) {
	        this.arrayObj.push(row);
	        return this.arrayObj.length - 1;
	    };
	    TreeGridArrayDataSource.prototype.deleteRow = function (rowIndex) {
	        var deletedItems = _.pullAt(this.arrayObj, rowIndex);
	        if (deletedItems.length === 0)
	            Error_1.throwError("TreeGridArrayDataSource.deleteRow(): invalid rowIndex (" + rowIndex + ")");
	    };
	    TreeGridArrayDataSource.prototype.getEmptyDataSourceMessage = function () {
	        if (this.params.getEmptyDataSourceMessage)
	            return this.params.getEmptyDataSourceMessage();
	        else
	            return "Пустой список.";
	    };
	    TreeGridArrayDataSource.prototype.getDeleteRowMessage = function () {
	        if (this.params.getDeleteRowMessage)
	            return this.params.getDeleteRowMessage();
	        else
	            return "Удалить запись!";
	    };
	    TreeGridArrayDataSource.prototype.getRowChildren = function (rowIndex) {
	        return [];
	    };
	    TreeGridArrayDataSource.prototype.canDragRow = function (rowIndex, mode) {
	        return true;
	    };
	    TreeGridArrayDataSource.prototype.canDropInto = function (dragRowIndex, targetRowIndex, mode) {
	        return false;
	    };
	    TreeGridArrayDataSource.prototype.canDropAfter = function (dragRowIndex, targetRowIndex, mode) {
	        return true;
	    };
	    TreeGridArrayDataSource.prototype.dropInto = function (dragRowIndex, targetRowIndex, mode) {
	        return false;
	    };
	    TreeGridArrayDataSource.prototype.dropAfter = function (dragRowIndex, targetRowIndex, mode) {
	        return true;
	    };
	    TreeGridArrayDataSource.prototype.refresh = function () {
	    };
	    return TreeGridArrayDataSource;
	}());
	exports.TreeGridArrayDataSource = TreeGridArrayDataSource;


/***/ },
/* 45 */
/***/ function(module, exports) {

	"use strict";
	function getGridColumnInfos(obj) {
	    var infos = obj.constructor.$$gridColumnInfos;
	    if (!infos)
	        return [];
	    infos = infos.filter(function (edt) { return obj instanceof edt.objectType; });
	    //console.log("getPropertyEditors") ;
	    //console.log(editors);
	    return infos;
	}
	exports.getGridColumnInfos = getGridColumnInfos;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var uuid = __webpack_require__(47);
	var moment = __webpack_require__(49);
	var Error_1 = __webpack_require__(6);
	var getConnectionId_1 = __webpack_require__(50);
	var Auth_1 = __webpack_require__(51);
	var Socket_1 = __webpack_require__(52);
	// общее с client и server ------------------
	var DataTable = (function () {
	    function DataTable() {
	        this.columns = [];
	        this.rows = [];
	    }
	    return DataTable;
	}());
	exports.DataTable = DataTable;
	var DataColumn = (function () {
	    function DataColumn(table) {
	        this.table = table;
	    }
	    return DataColumn;
	}());
	exports.DataColumn = DataColumn;
	var DataRow = (function () {
	    function DataRow($$table) {
	        this.$$table = $$table;
	    }
	    DataRow.prototype.$$getValue = function (columnIndex) {
	        if (columnIndex < 0 || columnIndex >= this.$$table.columns.length)
	            throw "DataRow.$$getValue(" + columnIndex + "): columnIndex out of range";
	        return this[this.$$table.columns[columnIndex].name];
	    };
	    return DataRow;
	}());
	exports.DataRow = DataRow;
	var SqlDb = (function () {
	    function SqlDb(dbName, dialect) {
	        if (dbName)
	            this.dbName = dbName;
	        if (dialect)
	            this.dialect = dialect;
	    }
	    // ищет в объекте свойство с заданным именем в режиме case insensitive,
	    // возвращает имя найденного свойства или null
	    SqlDb.prototype.getObjectPropNameCaseInsensitive = function (obj, propName) {
	        var upperPropName = propName.toUpperCase();
	        for (var objProp in obj) {
	            if (objProp.toUpperCase() === upperPropName)
	                return objProp;
	        }
	        return null;
	    };
	    // updateFromObject(sql: string | UpdateStmt, obj: any, unknownRecord: "error"|"ignore"|"insert" = "error"): Promise<"ok"|string> {
	    //
	    // }
	    SqlDb.prototype.selectToObject = function (sql, obj, unknownProps) {
	        var _this = this;
	        if (unknownProps === void 0) { unknownProps = "error"; }
	        var promise = new Promise(function (resolve, reject) {
	            _this.executeSQL(sql)
	                .then(function (table) {
	                if (table[0].rows.length === 0)
	                    reject("rows count === 0");
	                else {
	                    var row = table[0].rows[0];
	                    for (var prop in row) {
	                        if (prop.slice(0, 2) !== "$$") {
	                            if (obj.hasOwnProperty(prop))
	                                obj[prop] = row[prop];
	                            else {
	                                var realPropName = _this.getObjectPropNameCaseInsensitive(obj, prop);
	                                if (!realPropName) {
	                                    if (unknownProps === "assign")
	                                        obj[prop] = row[prop];
	                                    else if (unknownProps === "error")
	                                        Error_1.throwError("SqlDb.selectToObject(): object property '" + prop + "' not found");
	                                }
	                                else
	                                    obj[realPropName] = row[prop];
	                            }
	                        }
	                    }
	                    resolve(obj);
	                }
	            })
	                .catch(function (error) {
	                reject(error);
	            });
	        });
	        return promise;
	        // return this.executeSQL(sql).then((table: DataTable) => {
	        //     if (table.rows.length === 0)
	        //         throwError("table.rows.length===0");
	        //     else
	        //         obj.xxx = table.rows[0].getValue(0);
	        // });
	    };
	    // executeSQL(sql: string | SqlStmt): Promise<DataTable|string> {
	    //
	    //     let getSqlText = (): string => {
	    //         if ((sql as SqlStmt).toSql)
	    //             return (sql as SqlStmt).toSql(this.dialect);
	    //         else if (_.isString(sql))
	    //             return sql;
	    //         else {
	    //             throwError("SqlDb.executeSql(): invalid sql type");
	    //             throw  "fake";
	    //         }
	    //     };
	    //
	    //     let promise: Promise<DataTable|string> = new Promise(
	    //         (resolve: (str: DataTable) => void, reject: (error: string) => void) => {
	    //             let queryId = "query-" + Math.random().toString(36).slice(2);
	    //
	    //             let req: ExecuteSqlSocketRequest = {
	    //                 connectionId: getConnectionId(),
	    //                 dbName: this.dbName,
	    //                 sql: getSqlText(),
	    //                 queryId: queryId
	    //             };
	    //
	    //             socket.emit("executeSQL", req);
	    //
	    //             socket.once(queryId, (response: ExecuteSqlSocketAnswer) => {
	    //
	    //                     if (response.error) {
	    //                         reject(response.error);
	    //                     }
	    //                     else {
	    //                         let dataTable = new DataTable();
	    //
	    //                         if (response.columns) {
	    //                             for (let i = 0; i < response.columns!.length; i++) {
	    //                                 let dataColumn = new DataColumn(dataTable);
	    //                                 _.assign(dataColumn, response.columns![i]);
	    //                                 if (this.dialect === "mssql") {
	    //                                     //////////////////////////////////
	    //                                     // export var TYPES: {
	    //                                     //     VarChar:          sqlTypeFactoryWithLength;
	    //                                     //     NVarChar:         sqlTypeFactoryWithLength;
	    //                                     //     Text:             sqlTypeFactoryWithNoParams;
	    //                                     //     Int:              sqlTypeFactoryWithNoParams;
	    //                                     //     BigInt:           sqlTypeFactoryWithNoParams;
	    //                                     //     TinyInt:          sqlTypeFactoryWithNoParams;
	    //                                     //     SmallInt:         sqlTypeFactoryWithNoParams;
	    //                                     //     Bit:              sqlTypeFactoryWithNoParams;
	    //                                     //     Float:            sqlTypeFactoryWithNoParams;
	    //                                     //     Numeric:          sqlTypeFactoryWithPrecisionScale;
	    //                                     //     Decimal:          sqlTypeFactoryWithPrecisionScale;
	    //                                     //     Real:             sqlTypeFactoryWithNoParams;
	    //                                     //     Date:             sqlTypeFactoryWithNoParams;
	    //                                     //     DateTime:         sqlTypeFactoryWithNoParams;
	    //                                     //     DateTime2:        sqlTypeFactoryWithScale;
	    //                                     //     DateTimeOffset:   sqlTypeFactoryWithScale;
	    //                                     //     SmallDateTime:    sqlTypeFactoryWithNoParams;
	    //                                     //     Time:             sqlTypeFactoryWithScale;
	    //                                     //     UniqueIdentifier: sqlTypeFactoryWithNoParams;
	    //                                     //     SmallMoney:       sqlTypeFactoryWithNoParams;
	    //                                     //     Money:            sqlTypeFactoryWithNoParams;
	    //                                     //     Binary:           sqlTypeFactoryWithNoParams;
	    //                                     //     VarBinary:        sqlTypeFactoryWithLength;
	    //                                     //     Image:            sqlTypeFactoryWithNoParams;
	    //                                     //     Xml:              sqlTypeFactoryWithNoParams;
	    //                                     //     Char:             sqlTypeFactoryWithLength;
	    //                                     //     NChar:            sqlTypeFactoryWithLength;
	    //                                     //     NText:            sqlTypeFactoryWithNoParams;
	    //                                     //     TVP:              sqlTypeFactoryWithTvpType;
	    //                                     //     UDT:              sqlTypeFactoryWithNoParams;
	    //                                     //     Geography:        sqlTypeFactoryWithNoParams;
	    //                                     //     Geometry:         sqlTypeFactoryWithNoParams;
	    //                                     // };
	    //                                     //////////////////////////////////
	    //                                     if (dataColumn.type) {  // !!! у double почему-то не заполнен type, херня какая-то
	    //                                         if (dataColumn.type.indexOf("Date") >= 0 || dataColumn.type.indexOf("Time") >= 0) {
	    //                                             dataColumn.isDateTime = true;
	    //                                         }
	    //                                         if (dataColumn.type === "Date") {
	    //                                             dataColumn.isOnlyDate = true;
	    //                                         }
	    //                                         if (dataColumn.type === "UniqueIdentifier") {
	    //                                             dataColumn.isGuid = true;
	    //                                         }
	    //                                     }
	    //                                 }
	    //                                 else if (this.dialect === "pg") {
	    //                                     ///////////////////////////////////
	    //                                     //     Bool        ->   16
	    //                                     //     ByteA       ->   17
	    //                                     //     Char        ->   18
	    //                                     //     Name        ->   19
	    //                                     //     Int8        ->   20
	    //                                     //     Int2        ->   21
	    //                                     //     Int4        ->   23
	    //                                     //     RegProc     ->   24
	    //                                     //     Text        ->   25
	    //                                     //     Oid         ->   26
	    //                                     //     Tid         ->   27
	    //                                     //     Xid         ->   28
	    //                                     //     Cid         ->   29
	    //                                     //     Xml         ->  142
	    //                                     //     Point       ->  600
	    //                                     //     LSeg        ->  601
	    //                                     //     Path        ->  602
	    //                                     //     Box         ->  603
	    //                                     //     Polygon     ->  604
	    //                                     //     Line        ->  628
	    //                                     //     Cidr        ->  650
	    //                                     //     Float4      ->  700
	    //                                     //     Float8      ->  701
	    //                                     //     AbsTime     ->  702
	    //                                     //     RelTime     ->  703
	    //                                     //     TInterval   ->  704
	    //                                     //     Unknown     ->  705
	    //                                     //     Circle      ->  718
	    //                                     //     Money       ->  790
	    //                                     //     MacAddr     ->  829
	    //                                     //     Inet        ->  869
	    //                                     //     BpChar      -> 1042
	    //                                     //     VarChar     -> 1043
	    //                                     //     Date        -> 1082
	    //                                     //     Time        -> 1083
	    //                                     //     Timestamp   -> 1114
	    //                                     //     TimestampTZ -> 1184
	    //                                     //     Interval    -> 1186
	    //                                     //     TimeTZ      -> 1266
	    //                                     //     Bit         -> 1560
	    //                                     //     VarBit      -> 1562
	    //                                     //     Numeric     -> 1700
	    //                                     //     RefCursor   -> 1790
	    //                                     //     Record      -> 2249
	    //                                     //     Void        -> 2278
	    //                                     //     UUID        -> 2950
	    //                                     //     JSON        ->  114
	    //                                     //     JSONB       -> 3802
	    //                                     // /////////////////////////////////
	    //                                     if (
	    //                                         dataColumn.dataTypeID === 1082 ||
	    //                                         dataColumn.dataTypeID === 1083 ||
	    //                                         dataColumn.dataTypeID === 1114 ||
	    //                                         dataColumn.dataTypeID === 1184 ||
	    //                                         dataColumn.dataTypeID === 1186 ||
	    //                                         dataColumn.dataTypeID === 1266 ||
	    //                                         dataColumn.dataTypeID === 702 ||
	    //                                         dataColumn.dataTypeID === 703
	    //                                     ) {
	    //                                         dataColumn.isDateTime = true;
	    //                                     }
	    //                                     if (dataColumn.dataTypeID === 1082) {
	    //                                         dataColumn.isOnlyDate = true;
	    //                                     }
	    //                                     if (dataColumn.dataTypeID === 2950) {
	    //                                         dataColumn.isGuid = true;
	    //                                     }
	    //
	    //                                 }
	    //                                 else if (this.dialect === "mysql") {
	    //                                     ////////////////////////
	    //                                     // int	BIT = 16
	    //                                     // int	BLOB = 252
	    //                                     // int	CHAR = 1
	    //                                     // int	DATE = 10
	    //                                     // int	DATETIME = 12
	    //                                     // int	DECIMAL = 0
	    //                                     // int	DOUBLE = 5
	    //                                     // int	ENUM = 247
	    //                                     // int	FLOAT = 4
	    //                                     // int	GEOMETRY = 255
	    //                                     // int	INT24 = 9
	    //                                     // int	INTERVAL = 247
	    //                                     // int	LONG = 3
	    //                                     // int	LONG_BLOB = 251
	    //                                     // int	LONGLONG = 8
	    //                                     // int	MEDIUM_BLOB = 250
	    //                                     // int	NEWDATE = 14
	    //                                     // int	NEWDECIMAL = 246
	    //                                     // int	NULL = 6
	    //                                     // int	SET = 248
	    //                                     // int	SHORT = 2
	    //                                     // int	STRING = 254
	    //                                     // int	TIME = 11
	    //                                     // int	TIMESTAMP = 7
	    //                                     // int	TINY = 1
	    //                                     // int	TINY_BLOB = 249
	    //                                     // int	VAR_STRING = 253
	    //                                     // int	VARCHAR = 15
	    //                                     // int	YEAR = 13
	    //                                     ////////////////////////
	    //                                     dataColumn.mysqlDataType = dataColumn.type as any;
	    //                                     if (
	    //                                         dataColumn.mysqlDataType === 10 ||
	    //                                         dataColumn.mysqlDataType === 12 ||
	    //                                         dataColumn.mysqlDataType === 247 ||
	    //                                         dataColumn.mysqlDataType === 11 ||
	    //                                         dataColumn.mysqlDataType === 7
	    //                                     ) {
	    //                                         dataColumn.isDateTime = true;
	    //                                     }
	    //                                     if (dataColumn.mysqlDataType === 10) {
	    //                                         dataColumn.isOnlyDate = true;
	    //                                     }
	    //                                     if (dataColumn.mysqlDataType === 253 &&
	    //                                         dataColumn.length === 16 &&
	    //                                         dataColumn.charsetNr === 63) {
	    //                                         dataColumn.isGuid = true;
	    //                                     }
	    //                                 }
	    //                                 dataTable.columns.push(dataColumn);
	    //                             }
	    //                         }
	    //
	    //                         if (response.rows) {
	    //                             response.rows!.forEach((row: any) => {
	    //
	    //                                 let dataRow = new DataRow(dataTable);
	    //
	    //                                 dataTable.columns.forEach((col, index) => {
	    //                                     if (col.isDateTime) {
	    //                                         dataRow[col.name] = new Date(row[index]);
	    //                                         if (col.isOnlyDate)
	    //                                             dataRow[col.name].setHours(0, 0, 0, 0);
	    //                                         else {
	    //                                             if (this.dialect === "mssql") { // mssql - убираем timezone
	    //                                                 dataRow[col.name] = moment(dataRow[col.name]).add((dataRow[col.name] as Date).getTimezoneOffset(), "minutes").toDate();
	    //                                             }
	    //                                         }
	    //
	    //                                     }
	    //                                     else if (col.isGuid) {
	    //                                         if (this.dialect === "mysql") {
	    //                                             dataRow[col.name] = (uuid as any).unparse(new Uint8Array(row[index]));
	    //                                         }
	    //                                         else
	    //                                             dataRow[col.name] = row[index].toLowerCase();
	    //                                     }
	    //                                     else
	    //                                         dataRow[col.name] = row[index];
	    //
	    //                                 });
	    //
	    //                                 dataTable.rows.push(dataRow);
	    //                             });
	    //                         }
	    //
	    //                         resolve(dataTable);
	    //                     }
	    //
	    //                 }
	    //             );
	    //
	    //
	    //         }
	    //     );
	    //     return promise;
	    // }
	    // executeSQL(sql: string | SqlStmt | (string | SqlStmt)[]): Promise<DataTable|string> {
	    //
	    //     return checkAuth()
	    //         .then(() => {
	    //             let getSqlText = (): string => {
	    //                 if ((sql as SqlStmt).toSql)
	    //                     return (sql as SqlStmt).toSql(this.dialect);
	    //                 else if (_.isString(sql))
	    //                     return sql;
	    //                 else {
	    //                     throwError("SqlDb.executeSql(): invalid sql type");
	    //                     throw  "fake";
	    //                 }
	    //             };
	    //
	    //             let promise: Promise<DataTable|string> = new Promise(
	    //                 (resolve: (str: DataTable) => void, reject: (error: string) => void) => {
	    //                     let queryId = "query-" + Math.random().toString(36).slice(2);
	    //
	    //                     let req: ExecuteSqlSocketRequest = {
	    //                         connectionId: getConnectionId(),
	    //                         dbName: this.dbName,
	    //                         sql: getSqlText(),
	    //                         queryId: queryId
	    //                     };
	    //
	    //                     socket.emit("executeSql", req);
	    //
	    //                     socket.once(queryId, (response: ExecuteSqlSocketAnswer) => {
	    //
	    //                             if (response.error) {
	    //                                 reject(response.error);
	    //                             }
	    //                             else {
	    //                                 let dataTable = new DataTable();
	    //
	    //                                 if (response.columns) {
	    //                                     for (let i = 0; i < response.columns!.length; i++) {
	    //                                         let dataColumn = new DataColumn(dataTable);
	    //                                         _.assign(dataColumn, response.columns![i]);
	    //                                         if (this.dialect === "mssql") {
	    //                                             //////////////////////////////////
	    //                                             // export var TYPES: {
	    //                                             //     VarChar:          sqlTypeFactoryWithLength;
	    //                                             //     NVarChar:         sqlTypeFactoryWithLength;
	    //                                             //     Text:             sqlTypeFactoryWithNoParams;
	    //                                             //     Int:              sqlTypeFactoryWithNoParams;
	    //                                             //     BigInt:           sqlTypeFactoryWithNoParams;
	    //                                             //     TinyInt:          sqlTypeFactoryWithNoParams;
	    //                                             //     SmallInt:         sqlTypeFactoryWithNoParams;
	    //                                             //     Bit:              sqlTypeFactoryWithNoParams;
	    //                                             //     Float:            sqlTypeFactoryWithNoParams;
	    //                                             //     Numeric:          sqlTypeFactoryWithPrecisionScale;
	    //                                             //     Decimal:          sqlTypeFactoryWithPrecisionScale;
	    //                                             //     Real:             sqlTypeFactoryWithNoParams;
	    //                                             //     Date:             sqlTypeFactoryWithNoParams;
	    //                                             //     DateTime:         sqlTypeFactoryWithNoParams;
	    //                                             //     DateTime2:        sqlTypeFactoryWithScale;
	    //                                             //     DateTimeOffset:   sqlTypeFactoryWithScale;
	    //                                             //     SmallDateTime:    sqlTypeFactoryWithNoParams;
	    //                                             //     Time:             sqlTypeFactoryWithScale;
	    //                                             //     UniqueIdentifier: sqlTypeFactoryWithNoParams;
	    //                                             //     SmallMoney:       sqlTypeFactoryWithNoParams;
	    //                                             //     Money:            sqlTypeFactoryWithNoParams;
	    //                                             //     Binary:           sqlTypeFactoryWithNoParams;
	    //                                             //     VarBinary:        sqlTypeFactoryWithLength;
	    //                                             //     Image:            sqlTypeFactoryWithNoParams;
	    //                                             //     Xml:              sqlTypeFactoryWithNoParams;
	    //                                             //     Char:             sqlTypeFactoryWithLength;
	    //                                             //     NChar:            sqlTypeFactoryWithLength;
	    //                                             //     NText:            sqlTypeFactoryWithNoParams;
	    //                                             //     TVP:              sqlTypeFactoryWithTvpType;
	    //                                             //     UDT:              sqlTypeFactoryWithNoParams;
	    //                                             //     Geography:        sqlTypeFactoryWithNoParams;
	    //                                             //     Geometry:         sqlTypeFactoryWithNoParams;
	    //                                             // };
	    //                                             //////////////////////////////////
	    //                                             if (dataColumn.type) {  // !!! у double почему-то не заполнен type, херня какая-то
	    //                                                 if (dataColumn.type.indexOf("Date") >= 0 || dataColumn.type.indexOf("Time") >= 0) {
	    //                                                     dataColumn.isDateTime = true;
	    //                                                 }
	    //                                                 if (dataColumn.type === "Date") {
	    //                                                     dataColumn.isOnlyDate = true;
	    //                                                 }
	    //                                                 if (dataColumn.type === "UniqueIdentifier") {
	    //                                                     dataColumn.isGuid = true;
	    //                                                 }
	    //                                             }
	    //                                         }
	    //                                         else if (this.dialect === "pg") {
	    //                                             ///////////////////////////////////
	    //                                             //     Bool        ->   16
	    //                                             //     ByteA       ->   17
	    //                                             //     Char        ->   18
	    //                                             //     Name        ->   19
	    //                                             //     Int8        ->   20
	    //                                             //     Int2        ->   21
	    //                                             //     Int4        ->   23
	    //                                             //     RegProc     ->   24
	    //                                             //     Text        ->   25
	    //                                             //     Oid         ->   26
	    //                                             //     Tid         ->   27
	    //                                             //     Xid         ->   28
	    //                                             //     Cid         ->   29
	    //                                             //     Xml         ->  142
	    //                                             //     Point       ->  600
	    //                                             //     LSeg        ->  601
	    //                                             //     Path        ->  602
	    //                                             //     Box         ->  603
	    //                                             //     Polygon     ->  604
	    //                                             //     Line        ->  628
	    //                                             //     Cidr        ->  650
	    //                                             //     Float4      ->  700
	    //                                             //     Float8      ->  701
	    //                                             //     AbsTime     ->  702
	    //                                             //     RelTime     ->  703
	    //                                             //     TInterval   ->  704
	    //                                             //     Unknown     ->  705
	    //                                             //     Circle      ->  718
	    //                                             //     Money       ->  790
	    //                                             //     MacAddr     ->  829
	    //                                             //     Inet        ->  869
	    //                                             //     BpChar      -> 1042
	    //                                             //     VarChar     -> 1043
	    //                                             //     Date        -> 1082
	    //                                             //     Time        -> 1083
	    //                                             //     Timestamp   -> 1114
	    //                                             //     TimestampTZ -> 1184
	    //                                             //     Interval    -> 1186
	    //                                             //     TimeTZ      -> 1266
	    //                                             //     Bit         -> 1560
	    //                                             //     VarBit      -> 1562
	    //                                             //     Numeric     -> 1700
	    //                                             //     RefCursor   -> 1790
	    //                                             //     Record      -> 2249
	    //                                             //     Void        -> 2278
	    //                                             //     UUID        -> 2950
	    //                                             //     JSON        ->  114
	    //                                             //     JSONB       -> 3802
	    //                                             // /////////////////////////////////
	    //                                             if (
	    //                                                 dataColumn.dataTypeID === 1082 ||
	    //                                                 dataColumn.dataTypeID === 1083 ||
	    //                                                 dataColumn.dataTypeID === 1114 ||
	    //                                                 dataColumn.dataTypeID === 1184 ||
	    //                                                 dataColumn.dataTypeID === 1186 ||
	    //                                                 dataColumn.dataTypeID === 1266 ||
	    //                                                 dataColumn.dataTypeID === 702 ||
	    //                                                 dataColumn.dataTypeID === 703
	    //                                             ) {
	    //                                                 dataColumn.isDateTime = true;
	    //                                             }
	    //                                             if (dataColumn.dataTypeID === 1082) {
	    //                                                 dataColumn.isOnlyDate = true;
	    //                                             }
	    //                                             if (dataColumn.dataTypeID === 2950) {
	    //                                                 dataColumn.isGuid = true;
	    //                                             }
	    //
	    //                                         }
	    //                                         else if (this.dialect === "mysql") {
	    //                                             ////////////////////////
	    //                                             // int	BIT = 16
	    //                                             // int	BLOB = 252
	    //                                             // int	CHAR = 1
	    //                                             // int	DATE = 10
	    //                                             // int	DATETIME = 12
	    //                                             // int	DECIMAL = 0
	    //                                             // int	DOUBLE = 5
	    //                                             // int	ENUM = 247
	    //                                             // int	FLOAT = 4
	    //                                             // int	GEOMETRY = 255
	    //                                             // int	INT24 = 9
	    //                                             // int	INTERVAL = 247
	    //                                             // int	LONG = 3
	    //                                             // int	LONG_BLOB = 251
	    //                                             // int	LONGLONG = 8
	    //                                             // int	MEDIUM_BLOB = 250
	    //                                             // int	NEWDATE = 14
	    //                                             // int	NEWDECIMAL = 246
	    //                                             // int	NULL = 6
	    //                                             // int	SET = 248
	    //                                             // int	SHORT = 2
	    //                                             // int	STRING = 254
	    //                                             // int	TIME = 11
	    //                                             // int	TIMESTAMP = 7
	    //                                             // int	TINY = 1
	    //                                             // int	TINY_BLOB = 249
	    //                                             // int	VAR_STRING = 253
	    //                                             // int	VARCHAR = 15
	    //                                             // int	YEAR = 13
	    //                                             ////////////////////////
	    //                                             dataColumn.mysqlDataType = dataColumn.type as any;
	    //                                             if (
	    //                                                 dataColumn.mysqlDataType === 10 ||
	    //                                                 dataColumn.mysqlDataType === 12 ||
	    //                                                 dataColumn.mysqlDataType === 247 ||
	    //                                                 dataColumn.mysqlDataType === 11 ||
	    //                                                 dataColumn.mysqlDataType === 7
	    //                                             ) {
	    //                                                 dataColumn.isDateTime = true;
	    //                                             }
	    //                                             if (dataColumn.mysqlDataType === 10) {
	    //                                                 dataColumn.isOnlyDate = true;
	    //                                             }
	    //                                             if ((dataColumn.mysqlDataType === 253 || dataColumn.mysqlDataType === 254) &&
	    //                                                 dataColumn.length === 16 &&
	    //                                                 dataColumn.charsetNr === 63) {
	    //                                                 dataColumn.isGuid = true;
	    //                                             }
	    //                                             //console.log(dataColumn);
	    //                                         }
	    //                                         dataTable.columns.push(dataColumn);
	    //                                     }
	    //                                 }
	    //
	    //                                 if (response.rows) {
	    //                                     response.rows!.forEach((row: any) => {
	    //
	    //                                         let dataRow = new DataRow(dataTable);
	    //
	    //                                         dataTable.columns.forEach((col, index) => {
	    //                                             if (col.isDateTime) {
	    //                                                 dataRow[col.name] = new Date(row[index]);
	    //                                                 if (col.isOnlyDate)
	    //                                                     dataRow[col.name].setHours(0, 0, 0, 0);
	    //                                                 else {
	    //                                                     if (this.dialect === "mssql") { // mssql - убираем timezone
	    //                                                         dataRow[col.name] = moment(dataRow[col.name]).add((dataRow[col.name] as Date).getTimezoneOffset(), "minutes").toDate();
	    //                                                     }
	    //                                                 }
	    //
	    //                                             }
	    //                                             else if (col.isGuid) {
	    //                                                 if (this.dialect === "mysql") {
	    //                                                     if (_.isArrayBuffer(row[index]))
	    //                                                         dataRow[col.name] = (uuid as any).unparse(new Uint8Array(row[index]));
	    //                                                     else
	    //                                                         dataRow[col.name] = row[index];
	    //                                                 }
	    //                                                 else
	    //                                                     dataRow[col.name] = row[index].toLowerCase();
	    //                                             }
	    //                                             else
	    //                                                 dataRow[col.name] = row[index];
	    //
	    //                                         });
	    //
	    //                                         dataTable.rows.push(dataRow);
	    //                                     });
	    //                                 }
	    //
	    //                                 resolve(dataTable);
	    //                             }
	    //
	    //                         }
	    //                     );
	    //
	    //
	    //                 }
	    //             );
	    //             return promise;
	    //         });
	    //
	    // }
	    SqlDb.prototype.sqlBatchToStringArray = function (sql, dialect) {
	        var _this = this;
	        var ret = [];
	        if (_.isString(sql))
	            ret.push(sql);
	        else if (sql.toSql) {
	            ret.push.apply(ret, this.sqlBatchToStringArray(sql.toSql(dialect), dialect));
	        }
	        else if (_.isArray(sql)) {
	            sql.forEach(function (sqlItem) {
	                ret.push.apply(ret, _this.sqlBatchToStringArray(sqlItem, dialect));
	            });
	        }
	        return ret;
	    };
	    SqlDb.prototype.selectToBoolean = function (sql) {
	        return this.executeSQL(sql)
	            .then(function (tables) {
	            if (tables[0].rows.length === 0)
	                Error_1.throwError("rows count === 0");
	            else {
	                var value = tables[0].rows[0].$$getValue(0);
	                if (value === 0 || value === "false")
	                    return false;
	                else if (value === 1 || value === "true")
	                    return true;
	                else {
	                    //                            console.log(value);
	                    Error_1.throwError("SqlDb.selectToBoolean(): select result should be 0, 1, 'true' or 'false'");
	                }
	            }
	        });
	    };
	    SqlDb.prototype.selectToString = function (sql) {
	        return this.executeSQL(sql)
	            .then(function (tables) {
	            if (tables[0].rows.length === 0)
	                Error_1.throwError("rows count === 0");
	            else {
	                var value = tables[0].rows[0].$$getValue(0);
	                if (value === null || _.isString(value))
	                    return value;
	                else
	                    Error_1.throwError("SqlDb.selectToString(): select result should be a string");
	            }
	        });
	    };
	    SqlDb.prototype.selectToNumber = function (sql) {
	        return this.executeSQL(sql)
	            .then(function (tables) {
	            if (tables[0].rows.length === 0)
	                Error_1.throwError("rows count === 0");
	            else {
	                var value = tables[0].rows[0].$$getValue(0);
	                if (value === null || _.isNumber(value))
	                    return value;
	                else
	                    Error_1.throwError("SqlDb.selectToNumber(): select result should be a number");
	            }
	        });
	    };
	    SqlDb.prototype.selectToDate = function (sql) {
	        return this.executeSQL(sql)
	            .then(function (tables) {
	            if (tables[0].rows.length === 0)
	                Error_1.throwError("rows count === 0");
	            else {
	                var value = tables[0].rows[0].$$getValue(0);
	                if (value === null || _.isDate(value))
	                    return value;
	                else
	                    Error_1.throwError("SqlDb.selectToDate(): select result should be a date/time");
	            }
	        });
	    };
	    SqlDb.prototype.executeSQL = function (sql) {
	        var _this = this;
	        return Auth_1.checkAuth()
	            .then(function () {
	            // let getSqlText = (): string[] => {
	            //     return sql.map((_sql: any) => {
	            //         if ((_sql as SqlStmt).toSql)
	            //             return (_sql as SqlStmt).toSql(this.dialect);
	            //         else if (_.isString(_sql))
	            //             return _sql;
	            //     });
	            // };
	            var promise = new Promise(function (resolve, reject) {
	                var queryId = "query-" + Math.random().toString(36).slice(2);
	                var req = {
	                    connectionId: getConnectionId_1.getConnectionId(),
	                    dbName: _this.dbName,
	                    sql: _this.sqlBatchToStringArray(sql, _this.dialect),
	                    queryId: queryId
	                };
	                //console.log(this.dialect);
	                //console.log(req.sql);
	                Socket_1.socket.emit("executeSqlBatch", req);
	                Socket_1.socket.once(queryId, function (_response) {
	                    if (_response.error) {
	                        reject(_response.error);
	                    }
	                    else {
	                        var dataTables = _response.answers.map(function (response) {
	                            var dataTable = new DataTable();
	                            if (response.columns) {
	                                for (var i = 0; i < response.columns.length; i++) {
	                                    var dataColumn = new DataColumn(dataTable);
	                                    _.assign(dataColumn, response.columns[i]);
	                                    if (_this.dialect === "mssql") {
	                                        //////////////////////////////////
	                                        // export var TYPES: {
	                                        //     VarChar:          sqlTypeFactoryWithLength;
	                                        //     NVarChar:         sqlTypeFactoryWithLength;
	                                        //     Text:             sqlTypeFactoryWithNoParams;
	                                        //     Int:              sqlTypeFactoryWithNoParams;
	                                        //     BigInt:           sqlTypeFactoryWithNoParams;
	                                        //     TinyInt:          sqlTypeFactoryWithNoParams;
	                                        //     SmallInt:         sqlTypeFactoryWithNoParams;
	                                        //     Bit:              sqlTypeFactoryWithNoParams;
	                                        //     Float:            sqlTypeFactoryWithNoParams;
	                                        //     Numeric:          sqlTypeFactoryWithPrecisionScale;
	                                        //     Decimal:          sqlTypeFactoryWithPrecisionScale;
	                                        //     Real:             sqlTypeFactoryWithNoParams;
	                                        //     Date:             sqlTypeFactoryWithNoParams;
	                                        //     DateTime:         sqlTypeFactoryWithNoParams;
	                                        //     DateTime2:        sqlTypeFactoryWithScale;
	                                        //     DateTimeOffset:   sqlTypeFactoryWithScale;
	                                        //     SmallDateTime:    sqlTypeFactoryWithNoParams;
	                                        //     Time:             sqlTypeFactoryWithScale;
	                                        //     UniqueIdentifier: sqlTypeFactoryWithNoParams;
	                                        //     SmallMoney:       sqlTypeFactoryWithNoParams;
	                                        //     Money:            sqlTypeFactoryWithNoParams;
	                                        //     Binary:           sqlTypeFactoryWithNoParams;
	                                        //     VarBinary:        sqlTypeFactoryWithLength;
	                                        //     Image:            sqlTypeFactoryWithNoParams;
	                                        //     Xml:              sqlTypeFactoryWithNoParams;
	                                        //     Char:             sqlTypeFactoryWithLength;
	                                        //     NChar:            sqlTypeFactoryWithLength;
	                                        //     NText:            sqlTypeFactoryWithNoParams;
	                                        //     TVP:              sqlTypeFactoryWithTvpType;
	                                        //     UDT:              sqlTypeFactoryWithNoParams;
	                                        //     Geography:        sqlTypeFactoryWithNoParams;
	                                        //     Geometry:         sqlTypeFactoryWithNoParams;
	                                        // };
	                                        //////////////////////////////////
	                                        if (dataColumn.type) {
	                                            if (dataColumn.type.indexOf("Date") >= 0 || dataColumn.type.indexOf("Time") >= 0) {
	                                                dataColumn.isDateTime = true;
	                                            }
	                                            if (dataColumn.type === "Date") {
	                                                dataColumn.isOnlyDate = true;
	                                            }
	                                            if (dataColumn.type === "UniqueIdentifier") {
	                                                dataColumn.isGuid = true;
	                                            }
	                                        }
	                                    }
	                                    else if (_this.dialect === "pg") {
	                                        ///////////////////////////////////
	                                        //     Bool        ->   16
	                                        //     ByteA       ->   17
	                                        //     Char        ->   18
	                                        //     Name        ->   19
	                                        //     Int8        ->   20
	                                        //     Int2        ->   21
	                                        //     Int4        ->   23
	                                        //     RegProc     ->   24
	                                        //     Text        ->   25
	                                        //     Oid         ->   26
	                                        //     Tid         ->   27
	                                        //     Xid         ->   28
	                                        //     Cid         ->   29
	                                        //     Xml         ->  142
	                                        //     Point       ->  600
	                                        //     LSeg        ->  601
	                                        //     Path        ->  602
	                                        //     Box         ->  603
	                                        //     Polygon     ->  604
	                                        //     Line        ->  628
	                                        //     Cidr        ->  650
	                                        //     Float4      ->  700
	                                        //     Float8      ->  701
	                                        //     AbsTime     ->  702
	                                        //     RelTime     ->  703
	                                        //     TInterval   ->  704
	                                        //     Unknown     ->  705
	                                        //     Circle      ->  718
	                                        //     Money       ->  790
	                                        //     MacAddr     ->  829
	                                        //     Inet        ->  869
	                                        //     BpChar      -> 1042
	                                        //     VarChar     -> 1043
	                                        //     Date        -> 1082
	                                        //     Time        -> 1083
	                                        //     Timestamp   -> 1114
	                                        //     TimestampTZ -> 1184
	                                        //     Interval    -> 1186
	                                        //     TimeTZ      -> 1266
	                                        //     Bit         -> 1560
	                                        //     VarBit      -> 1562
	                                        //     Numeric     -> 1700
	                                        //     RefCursor   -> 1790
	                                        //     Record      -> 2249
	                                        //     Void        -> 2278
	                                        //     UUID        -> 2950
	                                        //     JSON        ->  114
	                                        //     JSONB       -> 3802
	                                        // /////////////////////////////////
	                                        if (dataColumn.dataTypeID === 1082 ||
	                                            dataColumn.dataTypeID === 1083 ||
	                                            dataColumn.dataTypeID === 1114 ||
	                                            dataColumn.dataTypeID === 1184 ||
	                                            dataColumn.dataTypeID === 1186 ||
	                                            dataColumn.dataTypeID === 1266 ||
	                                            dataColumn.dataTypeID === 702 ||
	                                            dataColumn.dataTypeID === 703) {
	                                            dataColumn.isDateTime = true;
	                                        }
	                                        if (dataColumn.dataTypeID === 1082) {
	                                            dataColumn.isOnlyDate = true;
	                                        }
	                                        if (dataColumn.dataTypeID === 2950) {
	                                            dataColumn.isGuid = true;
	                                        }
	                                        if (dataColumn.dataTypeID === 20) {
	                                            dataColumn.isPgBigInt = true;
	                                        }
	                                    }
	                                    else if (_this.dialect === "mysql") {
	                                        ////////////////////////
	                                        // int	BIT = 16
	                                        // int	BLOB = 252
	                                        // int	CHAR = 1
	                                        // int	DATE = 10
	                                        // int	DATETIME = 12
	                                        // int	DECIMAL = 0
	                                        // int	DOUBLE = 5
	                                        // int	ENUM = 247
	                                        // int	FLOAT = 4
	                                        // int	GEOMETRY = 255
	                                        // int	INT24 = 9
	                                        // int	INTERVAL = 247
	                                        // int	LONG = 3
	                                        // int	LONG_BLOB = 251
	                                        // int	LONGLONG = 8
	                                        // int	MEDIUM_BLOB = 250
	                                        // int	NEWDATE = 14
	                                        // int	NEWDECIMAL = 246
	                                        // int	NULL = 6
	                                        // int	SET = 248
	                                        // int	SHORT = 2
	                                        // int	STRING = 254
	                                        // int	TIME = 11
	                                        // int	TIMESTAMP = 7
	                                        // int	TINY = 1
	                                        // int	TINY_BLOB = 249
	                                        // int	VAR_STRING = 253
	                                        // int	VARCHAR = 15
	                                        // int	YEAR = 13
	                                        ////////////////////////
	                                        dataColumn.mysqlDataType = dataColumn.type;
	                                        if (dataColumn.mysqlDataType === 10 ||
	                                            dataColumn.mysqlDataType === 12 ||
	                                            dataColumn.mysqlDataType === 247 ||
	                                            dataColumn.mysqlDataType === 11 ||
	                                            dataColumn.mysqlDataType === 7) {
	                                            dataColumn.isDateTime = true;
	                                        }
	                                        if (dataColumn.mysqlDataType === 10) {
	                                            dataColumn.isOnlyDate = true;
	                                        }
	                                        if ((dataColumn.mysqlDataType === 253 || dataColumn.mysqlDataType === 254) &&
	                                            dataColumn.length === 16 &&
	                                            dataColumn.charsetNr === 63) {
	                                            dataColumn.isGuid = true;
	                                        }
	                                    }
	                                    dataTable.columns.push(dataColumn);
	                                }
	                            }
	                            if (response.rows) {
	                                response.rows.forEach(function (row) {
	                                    var dataRow = new DataRow(dataTable);
	                                    dataTable.columns.forEach(function (col, index) {
	                                        if (col.isDateTime) {
	                                            dataRow[col.name] = new Date(row[index]);
	                                            if (col.isOnlyDate)
	                                                dataRow[col.name].setHours(0, 0, 0, 0);
	                                            else {
	                                                if (_this.dialect === "mssql") {
	                                                    dataRow[col.name] = moment(dataRow[col.name]).add(dataRow[col.name].getTimezoneOffset(), "minutes").toDate();
	                                                }
	                                            }
	                                        }
	                                        else if (col.isGuid) {
	                                            if (_this.dialect === "mysql") {
	                                                if (_.isArrayBuffer(row[index]))
	                                                    dataRow[col.name] = uuid.unparse(new Uint8Array(row[index]));
	                                                else
	                                                    dataRow[col.name] = row[index];
	                                            }
	                                            else
	                                                dataRow[col.name] = row[index].toLowerCase();
	                                        }
	                                        else if (col.isPgBigInt) {
	                                            dataRow[col.name] = Number.parseInt(row[index]);
	                                        }
	                                        else
	                                            dataRow[col.name] = row[index];
	                                    });
	                                    dataTable.rows.push(dataRow);
	                                });
	                            }
	                            return dataTable;
	                        });
	                        resolve(dataTables);
	                    }
	                });
	            });
	            return promise;
	        });
	    };
	    return SqlDb;
	}());
	exports.SqlDb = SqlDb;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php
	
	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required
	var _rng = __webpack_require__(48);
	
	// Maps for number <-> hex string conversion
	var _byteToHex = [];
	var _hexToByte = {};
	for (var i = 0; i < 256; i++) {
	  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	  _hexToByte[_byteToHex[i]] = i;
	}
	
	// **`parse()` - Parse a UUID into it's component bytes**
	function parse(s, buf, offset) {
	  var i = (buf && offset) || 0, ii = 0;
	
	  buf = buf || [];
	  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	    if (ii < 16) { // Don't overflow!
	      buf[i + ii++] = _hexToByte[oct];
	    }
	  });
	
	  // Zero out remaining bytes if string was short
	  while (ii < 16) {
	    buf[i + ii++] = 0;
	  }
	
	  return buf;
	}
	
	// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	function unparse(buf, offset) {
	  var i = offset || 0, bth = _byteToHex;
	  return  bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]];
	}
	
	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html
	
	// random #'s we need to init node and clockseq
	var _seedBytes = _rng();
	
	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [
	  _seedBytes[0] | 0x01,
	  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	];
	
	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	// Previous uuid creation time
	var _lastMSecs = 0, _lastNSecs = 0;
	
	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];
	
	  options = options || {};
	
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
	
	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
	
	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
	
	  // Time since last uuid creation (in msecs)
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
	
	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }
	
	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }
	
	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }
	
	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;
	
	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;
	
	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;
	
	  // `time_mid`
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;
	
	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;
	
	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;
	
	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;
	
	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; n++) {
	    b[i + n] = node[n];
	  }
	
	  return buf ? buf : unparse(b);
	}
	
	// **`v4()` - Generate random UUID**
	
	// See https://github.com/broofa/node-uuid for API details
	function v4(options, buf, offset) {
	  // Deprecated - 'format' argument, as supported in v1.2
	  var i = buf && offset || 0;
	
	  if (typeof(options) == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};
	
	  var rnds = options.random || (options.rng || _rng)();
	
	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;
	
	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ii++) {
	      buf[i + ii] = rnds[ii];
	    }
	  }
	
	  return buf || unparse(rnds);
	}
	
	// Export public API
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	uuid.parse = parse;
	uuid.unparse = unparse;
	
	module.exports = uuid;


/***/ },
/* 48 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	var rng;
	
	if (global.crypto && crypto.getRandomValues) {
	  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	  // Moderately fast, high quality
	  var _rnds8 = new Uint8Array(16);
	  rng = function whatwgRNG() {
	    crypto.getRandomValues(_rnds8);
	    return _rnds8;
	  };
	}
	
	if (!rng) {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var  _rnds = new Array(16);
	  rng = function() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return _rnds;
	  };
	}
	
	module.exports = rng;
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = moment;

/***/ },
/* 50 */
/***/ function(module, exports) {

	"use strict";
	if (!localStorage.getItem("buhta-connection-id"))
	    localStorage.setItem("buhta-connection-id", Math.random().toString(36).slice(2));
	function getConnectionId() {
	    return localStorage.getItem("buhta-connection-id");
	}
	exports.getConnectionId = getConnectionId;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var getConnectionId_1 = __webpack_require__(50);
	var Socket_1 = __webpack_require__(52);
	var Error_1 = __webpack_require__(6);
	var authOk;
	var userId = null;
	function getUserId() {
	    if (userId !== null)
	        return userId;
	    else {
	        Error_1.throwError("userId is null");
	        throw "fake";
	    }
	}
	exports.getUserId = getUserId;
	function auth(login, password) {
	    var promise = new Promise(function (resolve, reject) {
	        var queryId = "query-" + Math.random().toString(36).slice(2);
	        var req = {
	            connectionId: getConnectionId_1.getConnectionId(),
	            queryId: queryId,
	            login: login,
	            password: password
	        };
	        Socket_1.socket.emit("auth", req);
	        //console.log("socket.emit");
	        Socket_1.socket.once(queryId, function (response) {
	            //console.log("socket.emit.response");
	            //console.log(response);
	            if (response.error) {
	                authOk = false;
	                userId = null;
	                reject(response.error);
	            }
	            else {
	                authOk = true;
	                userId = response.userId;
	                resolve("ok");
	            }
	        });
	    });
	    return promise;
	}
	exports.auth = auth;
	function checkAuth() {
	    //console.log("checkAuth");
	    if (authOk) {
	        //  console.log("checkAuthOk");
	        return new Promise(function (resolve, reject) {
	            resolve("ok");
	        });
	    }
	    else {
	        //console.log("checkAuth-req");
	        return auth("admin", "admin");
	    }
	}
	exports.checkAuth = checkAuth;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var io = __webpack_require__(53);
	exports.socket = io.connect();


/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = io;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SqlDb_1 = __webpack_require__(46);
	var CheckTableExistsStmt_1 = __webpack_require__(55);
	var Error_1 = __webpack_require__(6);
	var CreateTableStmt_1 = __webpack_require__(58);
	var UpsertStmt_1 = __webpack_require__(60);
	var SqlCore_1 = __webpack_require__(57);
	var objectToHostJavaScript_1 = __webpack_require__(61);
	var SelectStmt_1 = __webpack_require__(62);
	var defaultSchema;
	function getSchema() {
	    if (!defaultSchema) {
	        defaultSchema = new Schema(new SqlDb_1.SqlDb("schema", "mssql"));
	    }
	    return defaultSchema;
	}
	exports.getSchema = getSchema;
	var Schema = (function () {
	    function Schema(db) {
	        this.db = db;
	        this.objects_cache = {};
	    }
	    Schema.prototype.resetObjectCache = function (id) {
	        delete this.objects_cache[id];
	    };
	    Schema.prototype.getObject = function (id) {
	        // foreach (var helperTable in HelperTables)
	        // if (helperTable.ID==ID)
	        // return helperTable as T;
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var objConstructor = _this.objects_cache[id];
	            if (!objConstructor) {
	                var select = new SelectStmt_1.SelectStmt()
	                    .table("SchemaObject")
	                    .column("jsCode")
	                    .where("id", "=", new SqlCore_1.SqlGuidValue(id));
	                _this.db.selectToString(select)
	                    .then(function (jsCode) {
	                    objConstructor = eval("(function(){return " + jsCode + "})");
	                    _this.objects_cache[id] = objConstructor;
	                    var obj = objConstructor();
	                    obj.$$schema = _this;
	                    resolve(obj);
	                })
	                    .catch(function (error) {
	                    reject(error);
	                });
	            }
	            else {
	                var obj = objConstructor();
	                obj.$$schema = _this;
	                resolve(obj);
	            }
	        });
	    };
	    Schema.prototype.saveObject = function (objectToSave) {
	        var _this = this;
	        if (!objectToSave.id)
	            objectToSave.id = SqlCore_1.getNewGuid();
	        //if (!objectToSave.createDate)
	        //  objectToSave.createDate = new Date();
	        var sql = new UpsertStmt_1.UpsertStmt("SchemaObject")
	            .column("id", new SqlCore_1.SqlGuidValue(objectToSave.id))
	            .column("parentObjectId", new SqlCore_1.SqlGuidValue(objectToSave.parentObjectID))
	            .column("name", new SqlCore_1.SqlStringValue(objectToSave.name))
	            .column("description", new SqlCore_1.SqlStringValue(objectToSave.description))
	            .column("createDate", objectToSave.createDate)
	            .column("createUserId", new SqlCore_1.SqlGuidValue(objectToSave.createUserID))
	            .column("changeDate", objectToSave.changeDate)
	            .column("changeUserId", new SqlCore_1.SqlGuidValue(objectToSave.changeUserID))
	            .column("lockDateTime", objectToSave.lockDateTime)
	            .column("lockedByUserId", new SqlCore_1.SqlGuidValue(objectToSave.lockedByUserID))
	            .column("jsCode", new SqlCore_1.SqlStringValue(objectToHostJavaScript_1.objectToHostJavaScript(objectToSave)))
	            .column("position", objectToSave.position)
	            .where("id", "=", new SqlCore_1.SqlGuidValue(objectToSave.id));
	        return this.db.executeSQL(sql).then(function () {
	            //console.log("resetObjectCache " + objectToSave.id);
	            _this.resetObjectCache(objectToSave.id);
	        });
	        // var sql = new StringBuilder();
	        // sql.AppendLine(@"BEGIN TRAN");
	        //
	        // sql.AppendLine(@"
	        //                    INSERT [dbo].[SchemaObjectHistory](
	        // [ID],[ParentObjectID],[Name],[Description],[JSON],
	        // [RootClass],[RootType],[CreateDateTime],[UpdateDateTime],
	        // [CreateUser],[UpdateUser])
	        // SELECT
	        // [ID],[ParentObjectID],[Name],[Description],[JSON],
	        // [RootClass],[RootType],[CreateDateTime],[UpdateDateTime],
	        // [CreateUser],[UpdateUser]
	        // FROM [dbo].[SchemaObject]
	        // WHERE ID=" + objectToSave.ID.AsSQL());
	        //
	        //
	        // sql.AppendLine(@"IF NOT EXISTS(SELECT ID FROM SchemaObject WHERE ID=" + objectToSave.ID.AsSQL() + @")");
	        // sql.AppendLine(@"  INSERT SchemaObject(ID) VALUES(" + objectToSave.ID.AsSQL() + @")");
	        //
	        // sql.AppendLine(@"UPDATE SchemaObject SET");
	        // if (objectToSave.Name != null)
	        // sql.AppendLine(@"  Name=" + objectToSave.Name.AsSQL() + @",");
	        //
	        // if (objectToSave.Description != null)
	        // sql.AppendLine(@"  Description=" + objectToSave.Description.AsSQL() + @",");
	        //
	        // sql.AppendLine(@"  RootClass=" + objectToSave.GetType().Name.AsSQL() + @",");
	        // sql.AppendLine(@"  RootType=" + objectToSave.GetTypeDisplay.AsSQL() + @",");
	        //
	        // if (objectToSave.ParentObjectID != null)
	        // sql.AppendLine(@"  ParentObjectID=" + objectToSave.ParentObjectID.AsSQL() + @",");
	        // else
	        // sql.AppendLine(@"  ParentObjectID=NULL,");
	        //
	        // if (objectToSave.CreateDate.Year > 1)
	        // sql.AppendLine(@"  CreateDateTime=" + objectToSave.CreateDate.AsSQL() + @",");
	        // else
	        // sql.AppendLine(@"  CreateDateTime=GetDate(),");
	        //
	        // //if (objectToSave.ChangeDate != null)
	        // //sql.AppendLine(@"  UpdateDateTime=" + objectToSave.ChangeDate.AsSQL() + @",");
	        // //else
	        // sql.AppendLine(@"  UpdateDateTime=GetDate(),");
	        //
	        // if (objectToSave.CreateUserID != null)
	        // sql.AppendLine(@"  CreateUser=" + objectToSave.CreateUserID.AsSQL() + @",");
	        // else
	        // sql.AppendLine(@"  CreateUser=NULL,");
	        //
	        // if (objectToSave.ChangeUserID != null)
	        // sql.AppendLine(@"  UpdateUser=" + objectToSave.ChangeUserID.AsSQL() + @",");
	        // else
	        // sql.AppendLine(@"  UpdateUser=NULL,");
	        //
	        //
	        //
	        // sql.AppendLine(@"  JSON=" + objectToSave.GetJsonText().AsSQL() + @" ");
	        //
	        // sql.AppendLine(@"WHERE ID=" + objectToSave.ID.AsSQL());
	        //
	        // sql.AppendLine(@"COMMIT");
	        // using (var db = GetMetadataDbManager())
	        // {
	        //     db.SetCommand(sql.ToString()).ExecuteNonQuery();
	        // }
	        // if (AfterSaveSchemaObject!=null)
	        // {
	        //     AfterSaveSchemaObject(objectToSave);
	        // }
	    };
	    Schema.prototype.initSchemaStorage = function () {
	        var _this = this;
	        var batch = [];
	        return this.db.selectToBoolean(new CheckTableExistsStmt_1.CheckTableExistsStmt("SchemaObject"))
	            .then(function (isTableExists) {
	            if (isTableExists)
	                Error_1.throwError("таблица 'SchemaObject' уже существует, выберите чистую базу данных");
	            var sql = new CreateTableStmt_1.CreateTableStmt("SchemaObject")
	                .primaryKeyColumn("id", "guid")
	                .column("parentObjectId", "guid")
	                .column("name", "string", 255)
	                .column("description", "string", 1000)
	                .column("createDate", "datetime")
	                .column("createUserId", "guid")
	                .column("changeDate", "datetime")
	                .column("changeUserId", "guid")
	                .column("lockDateTime", "datetime")
	                .column("lockedByUserId", "guid")
	                .column("jsCode", "text")
	                .column("position", "int");
	            _this.db.executeSQL(sql);
	        });
	        // .then(() => {
	        //
	        //
	        // });
	    };
	    return Schema;
	}());
	exports.Schema = Schema;
	//     public string SchemaSqlUrl { get; set; }
	// public int? SchemaSqlPort { get; set; }
	// public string SchemaSqlDatabase { get; set; }
	// public string SchemaSqlLogin { get; set; }
	// public string SchemaSqlPassword { get; set; }
	// public bool SchemaIsTest { get; set; }
	//
	// public delegate void AfterSaveSchemaObjectEventHandler(SchemaObject schemaObject);
	//
	// public event AfterSaveSchemaObjectEventHandler AfterSaveSchemaObject;
	// public Dictionary<Guid, SchemaObject_cache> Objects_cache
	// {
	//     get
	//     {
	//         if (objects_cache == null || objects_cache.Count == 0)
	//         {
	//             using (var db = GetMetadataDbManager())
	//             {
	//                 objects_cache = db.SetCommand("SELECT * FROM SchemaObject").ExecuteDictionary<Guid, SchemaObject_cache>("ID");
	//                 foreach (var cache in objects_cache.Values)
	//                 cache.Schema = this;
	//             }
	//         }
	//         return objects_cache;
	//
	//     }
	// }
	//public ImageCollection Images16 = new ImageCollection();


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var SqlEmitter_1 = __webpack_require__(56);
	var Error_1 = __webpack_require__(6);
	// возвращает 1 или 0 если таблица существует/не существует
	var CheckTableExistsStmt = (function () {
	    function CheckTableExistsStmt(table) {
	        if (table)
	            this.table(table);
	    }
	    CheckTableExistsStmt.prototype.table = function (table) {
	        if (_.isString(table))
	            this._table = { table: table };
	        else
	            this._table = table;
	        return this;
	    };
	    CheckTableExistsStmt.prototype.emitTableName = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.raw)
	            e.emit(table.raw);
	        else {
	            if (e.dialect === "mssql" && table.table.startsWith("#")) {
	                e.emitStringValue("tempdb.." + table.table);
	            }
	            else {
	                if (table.db && table.table)
	                    e.emitStringValue(table.db + ".." + table.table);
	                else if (table.table)
	                    e.emitStringValue(table.table);
	            }
	        }
	        return this;
	    };
	    CheckTableExistsStmt.prototype.toSql = function (dialect) {
	        var e = new SqlEmitter_1.SqlEmitter();
	        e.dialect = dialect;
	        e.noLevels = false;
	        if (dialect === "mssql") {
	            e.emit("SELECT CASE WHEN OBJECT_ID(");
	            this.emitTableName(this._table, e, "");
	            e.emit(",'U') IS NULL THEN 0 ELSE 1 END AS result");
	        }
	        else if (dialect === "pg") {
	            e.emit("SELECT COUNT(1) FROM pg_catalog.pg_class c ");
	            e.emit("JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ");
	            e.emit("WHERE  n.nspname = 'public' AND c.relname = ");
	            this.emitTableName(this._table, e, "");
	        }
	        else if (dialect === "mysql") {
	            e.emit("SELECT COUNT(1) AS result FROM Information_schema.Tables ");
	            e.emit("where table_schema=SCHEMA() AND table_name=");
	            this.emitTableName(this._table, e, "");
	        }
	        else {
	            Error_1.throwError("CheckTableExistsStmt.toSql(): invalid sql dialect '" + dialect + "'");
	        }
	        return e.toSql();
	    };
	    return CheckTableExistsStmt;
	}());
	exports.CheckTableExistsStmt = CheckTableExistsStmt;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var SqlCore_1 = __webpack_require__(57);
	var Error_1 = __webpack_require__(6);
	var SqlEmitter = (function () {
	    function SqlEmitter() {
	        this.sql = [];
	    }
	    SqlEmitter.prototype.clear = function () {
	        this.sql = [];
	    };
	    SqlEmitter.prototype.emit = function (str) {
	        this.sql.push(str);
	        return this;
	    };
	    SqlEmitter.prototype.emitStringValue = function (str) {
	        this.sql.push(new SqlCore_1.SqlStringValue(str).toSql(this.dialect));
	        return this;
	    };
	    SqlEmitter.prototype.emitLevel = function (level) {
	        if (!this.noLevels)
	            this.sql.push(level);
	        return this;
	    };
	    SqlEmitter.prototype.emitLine = function () {
	        if (this.noLevels)
	            this.sql.push(" ");
	        else
	            this.sql.push("\n");
	        return this;
	    };
	    SqlEmitter.prototype.checkForInvalidChars = function (name) {
	        var char = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            char[_i - 1] = arguments[_i];
	        }
	        char.forEach(function (char) {
	            if (name.indexOf(char) >= 0)
	                Error_1.throwError("invalid character '" + char + "' in the sql-identifier '" + name + "'");
	        });
	    };
	    SqlEmitter.prototype.emitQuotedName = function (name) {
	        if (name.slice(0, 1) === "'" && name.slice(-1) === "'")
	            this.sql.push(name); // строка живьем, когда в одиночных в кавычках
	        else {
	            this.checkForInvalidChars(name, "[", "]", "`", "\"");
	            if (this.dialect === "mssql")
	                this.sql.push("[" + name + "]");
	            else if (this.dialect === "pg")
	                this.sql.push("\"" + name + "\"");
	            else if (this.dialect === "mysql")
	                this.sql.push("`" + name + "`");
	            else {
	                Error_1.throwError("SqlEmitter: invalid sql dialect '" + this.dialect + "'");
	            }
	        }
	        return this;
	    };
	    SqlEmitter.prototype.emitBeginTransaction = function () {
	        if (this.dialect === "mssql")
	            this.sql.push("BEGIN TRAN");
	        else if (this.dialect === "pg")
	            this.sql.push("START TRANSACTION");
	        else if (this.dialect === "mysql")
	            this.sql.push("START TRANSACTION");
	        else {
	            Error_1.throwError("SqlEmitter: invalid sql dialect '" + this.dialect + "'");
	        }
	        return this;
	    };
	    SqlEmitter.prototype.emitCommit = function () {
	        if (this.dialect === "mssql")
	            this.sql.push("COMMIT");
	        else if (this.dialect === "pg")
	            this.sql.push("COMMIT");
	        else if (this.dialect === "mysql")
	            this.sql.push("COMMIT");
	        else {
	            Error_1.throwError("SqlEmitter: invalid sql dialect '" + this.dialect + "'");
	        }
	        return this;
	    };
	    SqlEmitter.prototype.emitRollback = function () {
	        if (this.dialect === "mssql")
	            this.sql.push("ROLLBACK");
	        else if (this.dialect === "pg")
	            this.sql.push("ROLLBACK");
	        else if (this.dialect === "mysql")
	            this.sql.push("ROLLBACK");
	        else {
	            Error_1.throwError("SqlEmitter: invalid sql dialect '" + this.dialect + "'");
	        }
	        return this;
	    };
	    // emitQuotedName(nameOrValue: string | SqlValue): SqlEmitter {
	    //     console.log(nameOrValue);
	    //     if ((nameOrValue as SqlValue).toSql)
	    //         this.sql.push((nameOrValue as SqlValue).toSql());
	    //     else {
	    //         let name = nameOrValue.toString();
	    //         if ((name.slice(0, 1) === "'" || name.slice(0, 2) === "N'") && name.slice(-1) === "'")
	    //             this.sql.push(name); // строка живьем, когда в одиночных в кавычках
	    //         else {
	    //             this.checkForInvalidChars(name, "[", "]", "`", "\"", "N'");
	    //
	    //             if (this.dialect === "mssql")
	    //                 this.sql.push("[" + name + "]");
	    //             else if (this.dialect === "pg")
	    //                 this.sql.push("\"" + name + "\"");
	    //             else if (this.dialect === "mysql")
	    //                 this.sql.push("`" + name + "`");
	    //             else {
	    //                 throwError("SqlEmitter: invalid sql dialect '" + this.dialect + "'");
	    //             }
	    //         }
	    //     }
	    //     return this;
	    // }
	    SqlEmitter.prototype.emitOperand = function (operand) {
	        if (operand === null)
	            this.emit(new SqlCore_1.SqlNullValue().toSql(this.dialect));
	        else if (_.isNumber(operand))
	            this.emit(operand.toString());
	        else if (_.isString(operand))
	            this.emitQuotedName(operand);
	        else if (operand instanceof SqlCore_1.SqlValue)
	            this.emit(operand.toSql(this.dialect));
	        else if (_.isDate(operand))
	            this.emit(new SqlCore_1.SqlDateTimeValue(operand).toSql(this.dialect));
	        else if (_.isNumber(operand))
	            this.emit(new SqlCore_1.SqlNumberValue(operand).toSql(this.dialect));
	        else if (operand.raw || operand.colName) {
	        }
	        else
	            Error_1.throwError("SelectStmt.emitOperand(): invalid operand type");
	        return this;
	    };
	    SqlEmitter.prototype.emitWhere = function (where, level) {
	        this.emitLevel(level);
	        this.emit("(");
	        if (where.raw)
	            this.emit(where.raw);
	        else {
	            this.emitOperand(where.operand1).emit(" ");
	            if (where.operand2 === null ||
	                where.operand2 instanceof SqlCore_1.SqlNullValue ||
	                where.operand2.value === null) {
	                if (where.oper === "=")
	                    this.emit("IS NULL");
	                else if (where.oper === "<>")
	                    this.emit("IS NOT NULL");
	                else
	                    Error_1.throwError("SelectStmt.emitOperand(): invalid compare operation '" + where.oper + "' for NULL");
	            }
	            else {
	                this.emit(where.oper).emit(" ");
	                this.emitOperand(where.operand2);
	            }
	        }
	        this.emit(")");
	    };
	    SqlEmitter.prototype.toSql = function () {
	        return this.sql.join("");
	    };
	    return SqlEmitter;
	}());
	exports.SqlEmitter = SqlEmitter;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var moment = __webpack_require__(49);
	var uuid = __webpack_require__(47);
	var Error_1 = __webpack_require__(6);
	var SqlValue = (function () {
	    function SqlValue() {
	    }
	    SqlValue.prototype.toSql = function (dialect) {
	        console.log("toSql1");
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    return SqlValue;
	}());
	exports.SqlValue = SqlValue;
	function getNewGuid() {
	    return uuid.v1().toString();
	}
	exports.getNewGuid = getNewGuid;
	function mssql_escape_string(str) {
	    return str.replace(/./g, function (char) {
	        switch (char) {
	            case "'":
	                return "''";
	            case "?":
	                return "'+CHAR(63)+N'";
	            default:
	                return char;
	        }
	    });
	}
	function pg_escape_string(str) {
	    return str.replace(/./g, function (char) {
	        switch (char) {
	            case "\0":
	                return "";
	            case "'":
	                return "''";
	            default:
	                return char;
	        }
	    });
	}
	function mysql_escape_string(str) {
	    return str.replace(/[\0\x08\x09\x1a\n\r"'\\]/g, function (char) {
	        switch (char) {
	            case "\0":
	                return "\\0";
	            case "\x08":
	                return "\\b";
	            case "\x09":
	                return "\\t";
	            case "\x1a":
	                return "\\Z";
	            case "\n":
	                return "\\n";
	            case "\r":
	                return "\\r";
	            case "\"":
	            case "'":
	            case "\\":
	                return "\\" + char;
	            default:
	                throw "mysql_escape_string?";
	        }
	    });
	}
	var SqlStringValue = (function (_super) {
	    __extends(SqlStringValue, _super);
	    function SqlStringValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    SqlStringValue.prototype.toSql = function (dialect) {
	        if (this.value === null)
	            return new SqlNullValue().toSql(dialect);
	        else {
	            if (dialect === "mssql")
	                //return "N'" + this.value.replace("'", "''").replace("?", "'+CHAR(63)+N'") + "'";
	                return "N'" + mssql_escape_string(this.value) + "'";
	            else if (dialect === "pg")
	                // симол с кодом 0 запрещен в postgresql, поэтому стираем его
	                //            return "'" + this.value.replace("'", "''").replace("?", "'||CHR(63)||'").replace("\0", "") + "'";
	                return "'" + pg_escape_string(this.value) + "'";
	            else if (dialect === "mysql")
	                return "'" + mysql_escape_string(this.value) + "'";
	            else {
	                Error_1.throwError("invalid sql dialect " + dialect);
	                throw "fake";
	            }
	        }
	    };
	    return SqlStringValue;
	}(SqlValue));
	exports.SqlStringValue = SqlStringValue;
	var SqlNumberValue = (function (_super) {
	    __extends(SqlNumberValue, _super);
	    function SqlNumberValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    SqlNumberValue.prototype.toSql = function (dialect) {
	        return this.value.toString();
	    };
	    return SqlNumberValue;
	}(SqlValue));
	exports.SqlNumberValue = SqlNumberValue;
	var SqlDateValue = (function (_super) {
	    __extends(SqlDateValue, _super);
	    function SqlDateValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    SqlDateValue.prototype.toSql = function (dialect) {
	        if (dialect === "mssql")
	            return "CONVERT(DATE,'" + moment(this.value).format("YYYYMMDD") + "')";
	        else if (dialect === "pg")
	            return "DATE '" + moment(this.value).format("YYYY-MM-DD") + "'";
	        else if (dialect === "mysql")
	            return "STR_TO_DATE('" + moment(this.value).format("YYYY-MM-DD") + "','%Y-%c-%d')";
	        else {
	            Error_1.throwError("invalid sql dialect " + dialect);
	            throw "fake";
	        }
	    };
	    return SqlDateValue;
	}(SqlValue));
	exports.SqlDateValue = SqlDateValue;
	function toHexString(bytes) {
	    return bytes.map(function (byte) {
	        return ("00" + (byte & 0xFF).toString(16)).slice(-2);
	    }).join("");
	}
	function mysql_guid_to_str(guid) {
	    return "0x" + toHexString(guid);
	}
	var SqlGuidValue = (function (_super) {
	    __extends(SqlGuidValue, _super);
	    function SqlGuidValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    SqlGuidValue.prototype.toSql = function (dialect) {
	        if (this.value === null)
	            return new SqlNullValue().toSql(dialect);
	        else {
	            if (dialect === "mssql")
	                return "CONVERT(UNIQUEIDENTIFIER,'" + this.value + "')";
	            else if (dialect === "pg")
	                return "UUID '" + this.value + "'";
	            else if (dialect === "mysql")
	                return "convert(" + mysql_guid_to_str(uuid.parse(this.value)) + ",binary(16))";
	            else {
	                Error_1.throwError("invalid sql dialect " + dialect);
	                throw "fake";
	            }
	        }
	    };
	    return SqlGuidValue;
	}(SqlValue));
	exports.SqlGuidValue = SqlGuidValue;
	var SqlNullValue = (function (_super) {
	    __extends(SqlNullValue, _super);
	    function SqlNullValue() {
	        _super.call(this);
	    }
	    SqlNullValue.prototype.toSql = function (dialect) {
	        if (dialect === "mssql")
	            return "NULL";
	        else if (dialect === "pg")
	            return "NULL";
	        else if (dialect === "mysql")
	            return "NULL";
	        else {
	            Error_1.throwError("invalid sql dialect " + dialect);
	            throw "fake";
	        }
	    };
	    return SqlNullValue;
	}(SqlValue));
	exports.SqlNullValue = SqlNullValue;
	var SqlNewGuidValue = (function (_super) {
	    __extends(SqlNewGuidValue, _super);
	    function SqlNewGuidValue() {
	        _super.call(this);
	    }
	    SqlNewGuidValue.prototype.toSql = function (dialect) {
	        if (!this.value)
	            this.value = getNewGuid();
	        if (dialect === "mssql")
	            return "CONVERT(UNIQUEIDENTIFIER,'" + this.value + "')";
	        else if (dialect === "pg")
	            return "UUID '" + this.value + "'";
	        else if (dialect === "mysql")
	            return "convert(" + mysql_guid_to_str(uuid.parse(this.value)) + ",binary(16))";
	        else {
	            Error_1.throwError("invalid sql dialect " + dialect);
	            throw "fake";
	        }
	    };
	    return SqlNewGuidValue;
	}(SqlValue));
	exports.SqlNewGuidValue = SqlNewGuidValue;
	var SqlDateTimeValue = (function (_super) {
	    __extends(SqlDateTimeValue, _super);
	    function SqlDateTimeValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    SqlDateTimeValue.prototype.toSql = function (dialect) {
	        if (dialect === "mssql")
	            return "CONVERT(DATETIME2,'" + moment(this.value).format("YYYYMMDD HH:mm:ss.SSS") + "')";
	        else if (dialect === "pg")
	            return "TIMESTAMP(3)'" + moment(this.value).format("YYYY-MM-DD HH:mm:ss.SSS") + "'";
	        else if (dialect === "mysql")
	            // timezone не воспринимает
	            return "STR_TO_DATE('" + moment(this.value).format("YYYY-MM-DD HH:mm:ss.SSS") + "','%Y-%c-%d %k:%i:%s.%f')";
	        else {
	            Error_1.throwError("invalid sql dialect " + dialect);
	            throw "fake";
	        }
	    };
	    return SqlDateTimeValue;
	}(SqlValue));
	exports.SqlDateTimeValue = SqlDateTimeValue;
	// export function asSqlString(str: any, dialect: SqlDialect) {
	//     if (dialect === "mssql")
	//         return "N'" + str.toString().replace("'", "''").replace("?", "'+CHAR(63)+N'") + "'";
	//     else if (dialect === "pg")
	//     // симол с кодом 0 запрещен в postgresql, поэтому стираем его
	//         return "'" + str.toString().replace("'", "''").replace("?", "'||CHR(63)||'").replace("\0", "") + "'";
	//     else if (dialect === "mysql")
	//         return "'" + mysql_escape_string(str) + "'";
	//     else {
	//         throwError("invalid sql dialect " + dialect);
	//         throw "fake";
	//     }
	// }
	// export function asSqlDate(date: Date, dialect: SqlDialect) {
	//     if (dialect === "mssql")
	//         return "CONVERT(DATETIME,'" + moment(date).format("YYYYMMDD HH:mm:ss.SSS") + "')";
	//     else if (dialect === "pg")
	//         return "'" + moment(date).format("YYYY-MM-DD HH:mm:ss.SSS") + "'";
	//     else if (dialect === "mysql")
	//         return "'" + moment(date).format("YYYY-MM-DD HH:mm:ss.SSS") + "'";
	//     else {
	//         throwError("invalid sql dialect " + dialect);
	//         throw "fake";
	//     }
	// }


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var SqlEmitter_1 = __webpack_require__(56);
	var Error_1 = __webpack_require__(6);
	var DropTableIfExistsStmt_1 = __webpack_require__(59);
	var CreateTableStmt = (function () {
	    function CreateTableStmt(table) {
	        this.columns = [];
	        if (table)
	            this.table(table);
	    }
	    CreateTableStmt.prototype.primaryKeyColumn = function (column, dataType, dataLen, decimals) {
	        if (_.isObject(column)) {
	            this.columns.push(column);
	        }
	        else {
	            this.columns.push({
	                column: column.toString(),
	                dataType: dataType,
	                dataLen: dataLen,
	                decimals: decimals,
	                notNull: true,
	                primaryKey: true
	            });
	        }
	        return this;
	    };
	    CreateTableStmt.prototype.column = function (column, dataType, dataLen, decimals) {
	        if (_.isObject(column)) {
	            this.columns.push(column);
	        }
	        else {
	            this.columns.push({
	                column: column.toString(),
	                dataType: dataType,
	                dataLen: dataLen,
	                decimals: decimals
	            });
	        }
	        return this;
	    };
	    CreateTableStmt.prototype.table = function (table) {
	        if (_.isString(table))
	            this._table = { table: table };
	        else
	            this._table = table;
	        return this;
	    };
	    CreateTableStmt.prototype.emitTableName = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.db)
	            e.emitQuotedName(table.db).emit("..");
	        if (!table.table && !table.raw)
	            Error_1.throwError("CreateTableStmt: table.name or table.raw not defined");
	        if (table.table) {
	            if (this.isTempTable && !table.table.startsWith("#"))
	                Error_1.throwError("CreateTableStmt: temporary table name must begin with '#' char");
	            if (!this.isTempTable && table.table.startsWith("#"))
	                Error_1.throwError("CreateTableStmt: persistent table name should not begin with '#' char");
	            e.emitQuotedName(table.table);
	        }
	        if (table.raw)
	            e.emit(table.raw);
	        return this;
	    };
	    CreateTableStmt.prototype.emitColumnDataType = function (col, e) {
	        if (e.dialect === "mssql")
	            this.emitColumnDataTypeMsSql(col, e);
	        else if (e.dialect === "pg")
	            this.emitColumnDataTypePg(col, e);
	        else if (e.dialect === "mysql")
	            this.emitColumnDataTypeMySql(col, e);
	        else
	            Error_1.throwError("CreateTableStmt.emitColumnDataType(): invalid sql dialect '" + e.dialect + "'");
	    };
	    CreateTableStmt.prototype.emitColumnDataTypeMsSql = function (col, e) {
	        switch (col.dataType) {
	            case "sbyte":
	                e.emit("SMALLINT");
	                break;
	            case "byte":
	                e.emit("TINYINT");
	                break;
	            case "short":
	                e.emit("SMALLINT");
	                break;
	            case "ushort":
	                e.emit("INT");
	                break;
	            case "int":
	                e.emit("INT");
	                break;
	            case "uint":
	                e.emit("BIGINT");
	                break;
	            case "long":
	                e.emit("BIGINT");
	                break;
	            case "ulong":
	                e.emit("DECIMAL(38)");
	                break;
	            case "float":
	                e.emit("REAL");
	                break;
	            case "double":
	                e.emit("FLOAT");
	                break;
	            case "decimal":
	                if (!col.dataLen || col.dataLen < 0 || col.dataLen > 38)
	                    Error_1.throwError("'Precision' of decimal column '" + col.column + "' must be 0..38");
	                if (!col.decimals || col.decimals < 0 || col.decimals > 38)
	                    Error_1.throwError("'Scale' of decimal column '" + col.column + "' must be 0..38");
	                e.emit("DECIMAL(" + col.dataLen + "," + col.decimals + ")");
	                break;
	            case "string":
	                if (!col.dataLen || col.dataLen < 1 || col.dataLen > 4000)
	                    Error_1.throwError("'Length' of string column '" + col.column + "' must be 1..4000");
	                e.emit("NVARCHAR(" + col.dataLen + ")");
	                break;
	            case "text":
	                e.emit("NVARCHAR(MAX)");
	                break;
	            case "guid":
	                e.emit("UNIQUEIDENTIFIER");
	                break;
	            case "date":
	                e.emit("DATE");
	                break;
	            //case "datetime": e.emit("DATETIMEOFFSET"); break;
	            case "datetime":
	                e.emit("DATETIME2");
	                break;
	            case "timestamp":
	                e.emit("DATETIME2 DEFAULT(GETDATE())");
	                break;
	            case "blob":
	                e.emit(" IMAGE");
	                break;
	            default:
	                Error_1.throwError("NotImplemented");
	        }
	    };
	    CreateTableStmt.prototype.emitColumnDataTypePg = function (col, e) {
	        switch (col.dataType) {
	            case "sbyte":
	                e.emit("SMALLINT");
	                break;
	            case "byte":
	                e.emit("SMALLINT");
	                break;
	            case "short":
	                e.emit("SMALLINT");
	                break;
	            case "ushort":
	                e.emit("INT");
	                break;
	            case "int":
	                e.emit("INT");
	                break;
	            case "uint":
	                e.emit("BIGINT");
	                break;
	            case "long":
	                e.emit("BIGINT");
	                break;
	            case "ulong":
	                e.emit("NUMERIC(38)");
	                break;
	            case "float":
	                e.emit("REAL");
	                break;
	            case "double":
	                e.emit("DOUBLE PRECISION");
	                break;
	            case "decimal":
	                if (!col.dataLen || col.dataLen < 0 || col.dataLen > 38)
	                    Error_1.throwError("'Precision' of decimal column '" + col.column + "' must be 0..38");
	                if (!col.decimals || col.decimals < 0 || col.decimals > 38)
	                    Error_1.throwError("'Scale' of decimal column '" + col.column + "' must be 0..38");
	                e.emit("NUMERIC(" + col.dataLen + "," + col.decimals + ")");
	                break;
	            case "string":
	                if (!col.dataLen || col.dataLen < 1 || col.dataLen > 4000)
	                    Error_1.throwError("'Length' of string column '" + col.column + "' must be 1..4000");
	                e.emit("VARCHAR(" + col.dataLen + ")");
	                break;
	            case "text":
	                e.emit("TEXT");
	                break;
	            case "guid":
	                e.emit("UUID");
	                break;
	            case "date":
	                e.emit("DATE");
	                break;
	            case "datetime":
	                e.emit("TIMESTAMP");
	                break;
	            //case "datetime": e.emit("TIMESTAMP WITH TIME ZONE"); break;
	            case "timestamp":
	                e.emit("TIMESTAMP DEFAULT CURRENT_TIMESTAMP");
	                break;
	            case "blob":
	                e.emit(" BYTEA");
	                break;
	            default:
	                Error_1.throwError("NotImplemented");
	        }
	    };
	    CreateTableStmt.prototype.emitColumnDataTypeMySql = function (col, e) {
	        switch (col.dataType) {
	            case "sbyte":
	                e.emit("TINYINT");
	                break;
	            case "byte":
	                e.emit("TINYINT UNSIGNED");
	                break;
	            case "short":
	                e.emit("SMALLINT");
	                break;
	            case "ushort":
	                e.emit("SMALLINT UNSIGNED");
	                break;
	            case "int":
	                e.emit("INT");
	                break;
	            case "uint":
	                e.emit("INT UNSIGNED");
	                break;
	            case "long":
	                e.emit("BIGINT");
	                break;
	            case "ulong":
	                e.emit("BIGINT UNSIGNED");
	                break;
	            case "float":
	                e.emit("FLOAT");
	                break;
	            case "double":
	                e.emit("DOUBLE");
	                break;
	            case "decimal":
	                if (!col.dataLen || col.dataLen < 0 || col.dataLen > 38)
	                    Error_1.throwError("'Precision' of decimal column '" + col.column + "' must be 0..38");
	                if (!col.decimals || col.decimals < 0 || col.decimals > 38)
	                    Error_1.throwError("'Scale' of decimal column '" + col.column + "' must be 0..38");
	                e.emit("DECIMAL(" + col.dataLen + "," + col.decimals + ")");
	                break;
	            case "string":
	                if (!col.dataLen || col.dataLen < 1 || col.dataLen > 4000)
	                    Error_1.throwError("'Length' of string column '" + col.column + "' must be 1..4000");
	                e.emit("VARCHAR(" + col.dataLen + ")");
	                break;
	            case "text":
	                e.emit("LONGTEXT");
	                break;
	            case "guid":
	                e.emit("BINARY(16)");
	                break;
	            case "date":
	                e.emit("DATE");
	                break;
	            case "datetime":
	                e.emit("DATETIME(3)");
	                break;
	            case "timestamp":
	                e.emit("TIMESTAMP");
	                break;
	            case "blob":
	                e.emit(" LONGBLOB");
	                break;
	            default:
	                Error_1.throwError("NotImplemented");
	        }
	    };
	    CreateTableStmt.prototype.emitCreateColumn = function (col, e, level) {
	        e.emitLevel(level);
	        if (!(col.column && col.dataType) && col.raw === undefined)
	            Error_1.throwError("CreateTableStmt: column.name+column.dataType or column.raw not defined");
	        if ((col.column || col.dataType) && col.raw !== undefined)
	            Error_1.throwError("CreateTableStmt: column.name+column.dataType and column.raw defined");
	        if (col.column)
	            e.emitQuotedName(col.column);
	        e.emit(" ");
	        this.emitColumnDataType(col, e);
	        if (col.notNull)
	            e.emit(" NOT NULL");
	        if (col.primaryKey)
	            e.emit(" PRIMARY KEY");
	        if (col.raw !== undefined)
	            e.emit(col.raw);
	    };
	    CreateTableStmt.prototype.toSql = function (dialect) {
	        var _this = this;
	        var e = new SqlEmitter_1.SqlEmitter();
	        e.dialect = dialect;
	        e.noLevels = false;
	        if (this.isTempTable) {
	            if (e.dialect === "mssql")
	                e.emit("CREATE TABLE ");
	            else if (e.dialect === "pg")
	                e.emit("CREATE TEMPORARY TABLE ");
	            else if (e.dialect === "mysql")
	                e.emit("CREATE TEMPORARY TABLE ");
	            else
	                Error_1.throwError("CreateTableStmt.emitColumnDataType(): invalid sql dialect '" + e.dialect + "'");
	        }
	        else
	            e.emit("CREATE TABLE ");
	        this.emitTableName(this._table, e, "");
	        e.emit("(").emitLine();
	        this.columns.forEach(function (col, index) {
	            _this.emitCreateColumn(col, e, "  ");
	            if (index !== _this.columns.length - 1)
	                e.emit(",");
	            e.emitLine();
	        });
	        e.emit(")").emitLine();
	        // Indexes.ForEach(index =>
	        // {
	        //     sql.Append(DbHelper.BatchDelimiter);
	        //     index.EmitCreateSql(sql, lang, identStr);
	        // });
	        if (this.isTempTable)
	            return [new DropTableIfExistsStmt_1.DropTableIfExistsStmt(this._table), e.toSql()];
	        else
	            return e.toSql();
	    };
	    return CreateTableStmt;
	}());
	exports.CreateTableStmt = CreateTableStmt;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var SqlEmitter_1 = __webpack_require__(56);
	var Error_1 = __webpack_require__(6);
	var DropTableIfExistsStmt = (function () {
	    function DropTableIfExistsStmt(table) {
	        if (table)
	            this.table(table);
	    }
	    DropTableIfExistsStmt.prototype.table = function (table) {
	        if (_.isString(table))
	            this._table = { table: table };
	        else
	            this._table = table;
	        return this;
	    };
	    DropTableIfExistsStmt.prototype.emitDropTable = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.db)
	            e.emitQuotedName(table.db).emit("..");
	        if (!table.table && !table.raw)
	            Error_1.throwError("DropTableIfExistsStmt: table.name or table.raw not defined");
	        if (table.table)
	            e.emitQuotedName(table.table);
	        if (table.raw)
	            e.emit(table.raw);
	        return this;
	    };
	    DropTableIfExistsStmt.prototype.emitDropTableName = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.raw)
	            e.emit(table.raw);
	        else {
	            if (e.dialect === "mssql" && table.table.startsWith("#")) {
	                e.emitStringValue("tempdb.." + table.table);
	            }
	            else {
	                if (table.db && table.table)
	                    e.emitStringValue(table.db + ".." + table.table);
	                else if (table.table)
	                    e.emitStringValue(table.table);
	            }
	        }
	        return this;
	    };
	    DropTableIfExistsStmt.prototype.toSql = function (dialect) {
	        var e = new SqlEmitter_1.SqlEmitter();
	        e.dialect = dialect;
	        e.noLevels = false;
	        if (dialect === "mssql") {
	            e.emit("IF OBJECT_ID(");
	            this.emitDropTableName(this._table, e, "");
	            e.emit(",'U') IS NOT NULL ");
	            e.emit("DROP TABLE ");
	            this.emitDropTable(this._table, e, "");
	        }
	        else if (dialect === "pg") {
	            e.emit("DROP TABLE IF EXISTS ");
	            this.emitDropTable(this._table, e, "");
	        }
	        else if (dialect === "mysql") {
	            e.emit("DROP TABLE IF EXISTS ");
	            this.emitDropTable(this._table, e, "");
	        }
	        else {
	            Error_1.throwError("DropTableIfExistsStmt.toSql(): invalid sql dialect '" + dialect + "'");
	        }
	        return e.toSql();
	    };
	    return DropTableIfExistsStmt;
	}());
	exports.DropTableIfExistsStmt = DropTableIfExistsStmt;


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Error_1 = __webpack_require__(6);
	var _ = __webpack_require__(4);
	var SqlCore_1 = __webpack_require__(57);
	var SqlEmitter_1 = __webpack_require__(56);
	var UpsertStmt = (function () {
	    function UpsertStmt(table) {
	        this._UpsertTable = [];
	        this._UpsertColumns = [];
	        this._selectTable = [];
	        this._selectColumns = [];
	        this._where = [];
	        if (table)
	            this.table(table);
	    }
	    UpsertStmt.prototype.column = function (column, value) {
	        if (_.isString(column))
	            this._UpsertColumns.push({ colName: column });
	        else if (column.colName)
	            this._UpsertColumns.push(column);
	        else if (column.raw)
	            this._UpsertColumns.push({ raw: column.raw });
	        else
	            Error_1.throwError("UpsertStmt.column(): invalid column type");
	        if (value === null)
	            this._selectColumns.push({ value: new SqlCore_1.SqlNullValue() });
	        else if (value instanceof SqlCore_1.SqlValue)
	            this._selectColumns.push({ value: value });
	        else if (_.isString(value))
	            //            this._selectColumns.push({colName: value});
	            this._selectColumns.push({ value: new SqlCore_1.SqlStringValue(value) });
	        else if (_.isNumber(value) || _.isDate(value))
	            this._selectColumns.push({ raw: value });
	        else if (value.raw)
	            this._selectColumns.push({ raw: value.raw });
	        else
	            this._selectColumns.push(value);
	        return this;
	    };
	    UpsertStmt.prototype.table = function (table) {
	        if (this._UpsertTable.length > 0)
	            Error_1.throwError("UpsertStmt.table(): one Upsert table is already defined");
	        if (_.isString(table))
	            this._UpsertTable.push({ tableName: table });
	        else
	            this._UpsertTable.push(table);
	        return this;
	    };
	    UpsertStmt.prototype.tableRaw = function (rawSql) {
	        if (this._UpsertTable.length > 0)
	            Error_1.throwError("UpsertStmt.table(): one Upsert table is already defined");
	        this._UpsertTable.push({ raw: rawSql });
	        return this;
	    };
	    UpsertStmt.prototype.fromTable = function (table) {
	        if (_.isString(table))
	            this._selectTable.push({ tableName: table });
	        else
	            this._selectTable.push(table);
	        return this;
	    };
	    UpsertStmt.prototype.fromTableRaw = function (rawSql) {
	        this._selectTable.push({ raw: rawSql });
	        return this;
	    };
	    UpsertStmt.prototype.where = function (operand1, oper, operand2) {
	        this._where.push({ operand1: operand1, oper: oper, operand2: operand2 });
	        return this;
	    };
	    UpsertStmt.prototype.emitUpsertTable = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.dbName)
	            e.emitQuotedName(table.dbName).emit("..");
	        if (!table.tableName && !table.raw)
	            Error_1.throwError("UpsertStmt: table.tableName or table.raw not defined");
	        if (table.tableName)
	            e.emitQuotedName(table.tableName);
	        if (table.raw)
	            e.emit(table.raw);
	    };
	    UpsertStmt.prototype.emitUpdateColumn = function (col, e, level) {
	        e.emitLevel(level);
	        if (!col.colName && col.raw === undefined)
	            Error_1.throwError("UpsertStmt: column.colName or column.raw not defined");
	        if (col.colName)
	            e.emitQuotedName(col.colName);
	        if (col.raw !== undefined)
	            e.emit(col.raw);
	    };
	    UpsertStmt.prototype.emitInsertColumn = function (col, e, level) {
	        e.emitLevel(level);
	        if (!col.colName && col.raw === undefined)
	            Error_1.throwError("UpsertStmt: column.colName or column.raw not defined");
	        if (col.colName)
	            e.emitQuotedName(col.colName);
	        if (col.raw !== undefined)
	            e.emit(col.raw);
	    };
	    UpsertStmt.prototype.emitSelectColumn = function (col, e, level) {
	        e.emitLevel(level);
	        if (col.tableName)
	            e.emitQuotedName(col.tableName).emit(".");
	        if (!col.colName && col.raw === undefined && col.value === undefined)
	            Error_1.throwError("UpsertStmt: column.colName or column.raw or column.value not defined");
	        if (col.colName)
	            e.emitQuotedName(col.colName);
	        if (col.value !== undefined)
	            e.emit(col.value.toSql(e.dialect));
	        if (col.raw !== undefined) {
	            if (_.isNumber(col.raw))
	                e.emit(new SqlCore_1.SqlNumberValue(col.raw).toSql(e.dialect));
	            else if (_.isDate(col.raw))
	                e.emit(new SqlCore_1.SqlDateTimeValue(col.raw).toSql(e.dialect));
	            else if (_.isString(col.raw))
	                e.emit(col.raw);
	            else {
	                Error_1.throwError("UpsertStmt.emitSelectColumn(): invalid column 'raw' type");
	            }
	        }
	        if (col.as)
	            e.emit(" ").emitQuotedName(col.as);
	    };
	    UpsertStmt.prototype.emitSelectTable = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.dbName)
	            e.emitQuotedName(table.dbName).emit("..");
	        if (!table.tableName && !table.raw)
	            Error_1.throwError("UpsertStmt: table.tableName or table.raw not defined");
	        if (table.tableName)
	            e.emitQuotedName(table.tableName);
	        if (table.raw)
	            e.emit(table.raw);
	        if (table.as)
	            e.emit(" ").emitQuotedName(table.as);
	        return this;
	    };
	    UpsertStmt.prototype.toSql = function (dialect) {
	        var _this = this;
	        var batch = [];
	        var e = new SqlEmitter_1.SqlEmitter();
	        e.dialect = dialect;
	        e.noLevels = false;
	        if (this._UpsertTable.length === 0)
	            Error_1.throwError("UpsertStmt: Upsert table not defined");
	        e.emitBeginTransaction();
	        batch.push(e.toSql());
	        e.clear();
	        // if (dialect === "mssql") {
	        //     e.emitBeginTransaction().emitLine();
	        // }
	        //
	        // if (dialect === "pg") {
	        //     e.emit("DO $$ BEGIN").emitLine();
	        // }
	        //
	        // if (dialect === "mysql") {
	        //     e.emitBeginTransaction().emitLine();
	        // }
	        e.emit("UPDATE ");
	        this.emitUpsertTable(this._UpsertTable[0], e, "");
	        e.emit(" SET").emitLine();
	        this._UpsertColumns.forEach(function (col, index) {
	            _this.emitUpdateColumn(col, e, "  ");
	            e.emit("=");
	            _this.emitSelectColumn(_this._selectColumns[index], e, "");
	            if (index !== _this._UpsertColumns.length - 1)
	                e.emit(",");
	            e.emitLine();
	        });
	        if (this._selectTable.length > 0) {
	            e.emit("FROM").emitLine();
	            this._selectTable.forEach(function (table, index) {
	                _this.emitSelectTable(table, e, "  ");
	                if (index !== _this._selectTable.length - 1)
	                    e.emit(",");
	                e.emitLine();
	            });
	        }
	        if (this._where.length > 0) {
	            e.emit("WHERE").emitLine();
	            this._where.forEach(function (where, index) {
	                e.emitWhere(where, "  ");
	                if (index !== _this._where.length - 1)
	                    e.emit(" AND ");
	                e.emitLine();
	            });
	        }
	        batch.push(e.toSql());
	        e.clear();
	        e.emit("INSERT INTO ");
	        this.emitUpsertTable(this._UpsertTable[0], e, "");
	        e.emit("(").emitLine();
	        this._UpsertColumns.forEach(function (col, index) {
	            _this.emitInsertColumn(col, e, "  ");
	            if (index !== _this._UpsertColumns.length - 1)
	                e.emit(",");
	            e.emitLine();
	        });
	        e.emit(")").emitLine();
	        if (this._selectTable.length > 0) {
	            e.emit("SELECT").emitLine();
	            this._selectColumns.forEach(function (col, index) {
	                _this.emitSelectColumn(col, e, "  ");
	                if (index !== _this._selectColumns.length - 1)
	                    e.emit(",");
	                e.emitLine();
	            });
	            if (this._selectTable.length > 0) {
	                e.emit("FROM").emitLine();
	                this._selectTable.forEach(function (table, index) {
	                    _this.emitSelectTable(table, e, "  ");
	                    if (index !== _this._selectTable.length - 1)
	                        e.emit(",");
	                    e.emitLine();
	                });
	            }
	            if (this._where.length > 0) {
	                e.emit("WHERE").emitLine();
	                this._where.forEach(function (where, index) {
	                    e.emitWhere(where, "  ");
	                    //if (index !== this._where.length - 1)
	                    //  e.emit(" AND ");
	                    e.emitLine();
	                });
	            }
	            e.emit("NOT EXISTS (").emitLine();
	            e.emit("  SELECT 1 FROM table WHERE ").emitLine();
	            this._where.forEach(function (where, index) {
	                e.emitWhere(where, "    ");
	                if (index !== _this._where.length - 1)
	                    e.emit(" AND ");
	                e.emitLine();
	            });
	            e.emit(")");
	        }
	        else {
	            e.emit("SELECT ").emitLine();
	            this._selectColumns.forEach(function (col, index) {
	                _this.emitSelectColumn(col, e, "  ");
	                if (index !== _this._selectColumns.length - 1)
	                    e.emit(",");
	                e.emitLine();
	            });
	            e.emit("WHERE NOT EXISTS (").emitLine();
	            e.emit("  SELECT 1 FROM ");
	            this.emitUpsertTable(this._UpsertTable[0], e, "");
	            e.emit(" WHERE ").emitLine();
	            this._where.forEach(function (where, index) {
	                e.emitWhere(where, "    ");
	                if (index !== _this._where.length - 1)
	                    e.emit(" AND ");
	                e.emitLine();
	            });
	            e.emit(")");
	        }
	        batch.push(e.toSql());
	        e.clear();
	        e.emitCommit();
	        batch.push(e.toSql());
	        // e.emit(";").emitLine();
	        //
	        // if (dialect === "mssql") {
	        //     e.emitCommit().emitLine();
	        // }
	        // if (dialect === "pg") {
	        //     e.emitCommit();
	        //     e.emit("END$$;");
	        // }
	        // if (dialect === "mysql") {
	        //     e.emitCommit().emitLine();
	        // }
	        return batch;
	    };
	    return UpsertStmt;
	}());
	exports.UpsertStmt = UpsertStmt;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	var getObjectConstructorName_1 = __webpack_require__(12);
	function objectToHostJavaScript(obj, refs) {
	    var noRefs = false;
	    if (refs === undefined) {
	        refs = [];
	        noRefs = true;
	    }
	    if (refs[obj.$$refId])
	        return "refs[" + obj.$$refId + "]";
	    var js = [];
	    js.push("(function (refs){");
	    if (!obj.$$getHostConstructor)
	        Error_1.throwError("objectToHostJavaScript(): saved object '" + getObjectConstructorName_1.getObjectConstructorName(obj) + "' must have function '$$getHostConstructor'");
	    var constructorName = obj.$$getHostConstructor();
	    obj.$$refId = refs.length;
	    refs.push(obj);
	    js.push("if (refs === undefined) refs = [];");
	    js.push("var obj=new " + constructorName + "();");
	    js.push("refs[" + obj.$$refId + "] = obj;");
	    var _loop_1 = function(propName) {
	        if (obj.hasOwnProperty(propName) && propName.substring(0, 2) !== "$$" && !_.isFunction(obj[propName])) {
	            var propValue_1 = obj[propName];
	            js.push("obj." + propName + "=");
	            if (propValue_1 === null)
	                js.push("null");
	            else if (_.isNumber(propValue_1))
	                js.push(propValue_1.toString());
	            else if (_.isString(propValue_1))
	                js.push(JSON.stringify(propValue_1));
	            else if (_.isDate(propValue_1))
	                js.push("new Date(\"" + propValue_1.toISOString() + "\")");
	            else if (_.isArray(propValue_1)) {
	                js.push("[");
	                propValue_1.forEach(function (item, index) {
	                    js.push(objectToHostJavaScript(item, refs));
	                    if (index < propValue_1.length - 1)
	                        js.push(",");
	                });
	                js.push("]");
	            }
	            else if (_.isObject(propValue_1))
	                js.push(objectToHostJavaScript(propValue_1, refs));
	            else
	                Error_1.throwError("objectToHostJavaScript(): unknown type for property '" + propName + "'");
	            js.push(";");
	        }
	    };
	    for (var propName in obj) {
	        _loop_1(propName);
	    }
	    if (noRefs) {
	        js.push("return obj;})()");
	        return js_beautify(js.join(""));
	    }
	    else {
	        js.push("return obj;})(refs)");
	        return js.join("");
	    }
	}
	exports.objectToHostJavaScript = objectToHostJavaScript;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Error_1 = __webpack_require__(6);
	var _ = __webpack_require__(4);
	var SqlCore_1 = __webpack_require__(57);
	var SqlEmitter_1 = __webpack_require__(56);
	var SelectStmt = (function () {
	    function SelectStmt() {
	        this._selectColumns = [];
	        this._selectTable = [];
	        this._where = [];
	    }
	    SelectStmt.prototype.column = function () {
	        var _this = this;
	        var column = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            column[_i - 0] = arguments[_i];
	        }
	        column.forEach(function (col) {
	            if (col instanceof SqlCore_1.SqlValue)
	                _this._selectColumns.push({ value: col });
	            else if (col === "*")
	                _this._selectColumns.push({ raw: "*" });
	            else if (_.isString(col))
	                _this._selectColumns.push({ colName: col });
	            else if (col.raw !== undefined)
	                _this._selectColumns.push({ raw: col.raw });
	            else if (col.colName)
	                _this._selectColumns.push(col);
	            else
	                Error_1.throwError("SelectStmt.column(): invalid column type");
	        });
	        return this;
	    };
	    SelectStmt.prototype.columnAs = function (column, as) {
	        if (column instanceof SqlCore_1.SqlValue)
	            this._selectColumns.push({ value: column, as: as });
	        else if (_.isString(column))
	            this._selectColumns.push({ colName: column, as: as });
	        else {
	            column.as = as;
	            this._selectColumns.push(column);
	        }
	        return this;
	    };
	    SelectStmt.prototype.columnRaw = function (rawSql) {
	        this._selectColumns.push({ raw: rawSql });
	        return this;
	    };
	    SelectStmt.prototype.table = function (table) {
	        if (_.isString(table))
	            this._selectTable.push({ tableName: table });
	        else
	            this._selectTable.push(table);
	        return this;
	    };
	    SelectStmt.prototype.tableRaw = function (rawSql) {
	        this._selectTable.push({ raw: rawSql });
	        return this;
	    };
	    SelectStmt.prototype.tableAs = function (table, as) {
	        if (_.isString(table))
	            this._selectTable.push({ tableName: table, as: as });
	        else {
	            table.as = as;
	            this._selectTable.push(table);
	        }
	        return this;
	    };
	    SelectStmt.prototype.where = function (operand1, oper, operand2) {
	        this._where.push({ operand1: operand1, oper: oper, operand2: operand2 });
	        return this;
	    };
	    SelectStmt.prototype.emitSelectColumn = function (col, e, level) {
	        e.emitLevel(level);
	        if (col.tableName)
	            e.emitQuotedName(col.tableName).emit(".");
	        if (!col.colName && col.raw === undefined && col.value === undefined)
	            Error_1.throwError("SelectStmt: column.name or column.raw or column.value not defined");
	        if (col.colName)
	            e.emitQuotedName(col.colName);
	        if (col.value !== undefined)
	            e.emit(col.value.toSql(e.dialect));
	        if (col.raw) {
	            if (_.isNumber(col.raw))
	                e.emit(new SqlCore_1.SqlNumberValue(col.raw).toSql(e.dialect));
	            else if (_.isDate(col.raw))
	                e.emit(new SqlCore_1.SqlDateTimeValue(col.raw).toSql(e.dialect));
	            else if (_.isString(col.raw))
	                e.emit(col.raw);
	            else
	                Error_1.throwError("SelectStmt.emitSelectColumn(): invalid column 'raw' type");
	        }
	        if (col.as)
	            e.emit(" ").emitQuotedName(col.as);
	    };
	    SelectStmt.prototype.emitSelectTable = function (table, e, level) {
	        e.emitLevel(level);
	        if (table.dbName)
	            e.emitQuotedName(table.dbName).emit("..");
	        if (!table.tableName && !table.raw)
	            Error_1.throwError("SelectStmt: table.tableName or table.raw not defined");
	        if (table.tableName)
	            e.emitQuotedName(table.tableName);
	        if (table.raw)
	            e.emit(table.raw);
	        if (table.as)
	            e.emit(" ").emitQuotedName(table.as);
	        return this;
	    };
	    SelectStmt.prototype.toSql = function (dialect) {
	        var _this = this;
	        var e = new SqlEmitter_1.SqlEmitter();
	        e.dialect = dialect;
	        e.noLevels = this instanceof InlineSelectStmt;
	        e.emit("SELECT").emitLine();
	        this._selectColumns.forEach(function (col, index) {
	            _this.emitSelectColumn(col, e, "  ");
	            if (index !== _this._selectColumns.length - 1)
	                e.emit(",");
	            e.emitLine();
	        });
	        if (this._selectTable.length > 0) {
	            e.emit("FROM").emitLine();
	            this._selectTable.forEach(function (table, index) {
	                _this.emitSelectTable(table, e, "  ");
	                if (index !== _this._selectTable.length - 1)
	                    e.emit(",");
	                e.emitLine();
	            });
	        }
	        if (this._where.length > 0) {
	            e.emit("WHERE").emitLine();
	            this._where.forEach(function (where, index) {
	                e.emitWhere(where, "  ");
	                if (index !== _this._where.length - 1)
	                    e.emit(" AND ");
	                e.emitLine();
	            });
	        }
	        return e.toSql();
	    };
	    return SelectStmt;
	}());
	exports.SelectStmt = SelectStmt;
	var InlineSelectStmt = (function (_super) {
	    __extends(InlineSelectStmt, _super);
	    function InlineSelectStmt() {
	        _super.apply(this, arguments);
	    }
	    return InlineSelectStmt;
	}(SelectStmt));
	exports.InlineSelectStmt = InlineSelectStmt;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var SchemaComponent_1 = __webpack_require__(64);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var Panel_1 = __webpack_require__(68);
	var SchemaForm = (function (_super) {
	    __extends(SchemaForm, _super);
	    function SchemaForm() {
	        _super.apply(this, arguments);
	    }
	    SchemaForm.prototype.getProps = function () {
	        return {
	            sizeTo: "parent"
	        };
	    };
	    SchemaForm.prototype.getComponent = function () {
	        return Panel_1.Panel;
	        // let children = this.children.map((child) => {
	        //     return child.getComponent();
	        // });
	        //
	        // this.reactElement = <Panel sizeTo = "parent" > {children} </Panel>;
	        // return this.reactElement;
	        // let props: PanelProps = {
	        //     sizeTo: this.sizeTo
	        // };
	        //
	        // //if (this.children.length > 0) {
	        //     let children = this.children.map((child) => {
	        //         return child.getComponent();
	        //     });
	        // //}
	        // return React.createElement(Panel, props, children);
	        // //return new Panel(props, null);
	    };
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя формы"
	        })
	    ], SchemaForm.prototype, "name", void 0);
	    return SchemaForm;
	}(SchemaComponent_1.SchemaComponent));
	exports.SchemaForm = SchemaForm;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var SchemaObject_1 = __webpack_require__(65);
	var Error_1 = __webpack_require__(6);
	var SchemaComponentDesigner_1 = __webpack_require__(66);
	var SchemaComponent = (function (_super) {
	    __extends(SchemaComponent, _super);
	    function SchemaComponent() {
	        _super.apply(this, arguments);
	        this.children = [];
	    }
	    //reactElement: React.ReactElement<any>;
	    // get context(): ComponentContext {
	    //     return (this.reactElement as any).context;
	    // }
	    SchemaComponent.prototype.getProps = function () {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    SchemaComponent.prototype.getComponent = function () {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    SchemaComponent.prototype.render = function () {
	        var children = this.children.map(function (child) {
	            if (_.isString(child))
	                return child;
	            else
	                return child.render();
	        });
	        return React.createElement(this.getComponent(), this.getProps(), children);
	    };
	    SchemaComponent.prototype.getDesigner = function () {
	        return (React.createElement(SchemaComponentDesigner_1.SchemaComponentDesigner, {designedObject: this}));
	    };
	    return SchemaComponent;
	}(SchemaObject_1.SchemaObject));
	exports.SchemaComponent = SchemaComponent;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var DesignedObject_1 = __webpack_require__(11);
	var SqlCore_1 = __webpack_require__(57);
	var Error_1 = __webpack_require__(6);
	var SchemaObject = (function (_super) {
	    __extends(SchemaObject, _super);
	    function SchemaObject($$schema) {
	        _super.call(this);
	        this.$$schema = $$schema;
	        this.id = null;
	        this.parentObjectID = null;
	        this.name = null;
	        this.description = null;
	        this.createDate = null;
	        this.createUserID = null;
	        this.changeDate = null;
	        this.changeUserID = null;
	        this.lockDateTime = null;
	        this.lockedByUserID = null;
	        this.position = 0;
	    }
	    Object.defineProperty(SchemaObject.prototype, "schema", {
	        get: function () {
	            return this.$$schema;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SchemaObject.prototype.prepareNew = function () {
	        if (!this.id)
	            this.id = newSchemaObjectId();
	        if (!this.name)
	            this.name = "НовыйОбъект";
	    };
	    SchemaObject.prototype.getTypeDisplay = function () {
	        return "Объект";
	    };
	    SchemaObject.prototype.getDesigner = function () {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    SchemaObject.prototype.save = function () {
	        return this.schema.saveObject(this);
	    };
	    return SchemaObject;
	}(DesignedObject_1.DesignedObject));
	exports.SchemaObject = SchemaObject;
	function newSchemaObjectId() {
	    return SqlCore_1.getNewGuid();
	}
	exports.newSchemaObjectId = newSchemaObjectId;
	//
	// public virtual void Validate(ValidateErrorList error)
	// {
	//     if (ID == Guid.Empty)
	//         error.AddError(Name, "Пустое поле 'ID'.");
	//     if (string.IsNullOrWhiteSpace(Name))
	//         error.AddError(Name, "Не заполнено поле 'Имя'.");
	// }
	//
	// //public void Save()
	// //{
	// //    App.Schema.SchemaObjectsCollection.Save<SchemaObject>(this);
	//
	// //}
	//
	// public virtual string DisplayName
	// {
	//     get
	//     {
	//         return GetModulePrefix() + Name;
	//     }
	// }
	//
	//
	// public string GetModulePrefix()
	// {
	//     var module = GetModule();
	//     if (module == null)
	//         return "";
	//     else
	//         return module.Prefix + ".";
	// }
	//
	// public SchemaModule GetModule()
	// {
	//     if (this is SchemaModule)
	//     return null;
	// else
	//     if (ParentObjectID == null)
	//         return null;
	//     else
	//     {
	//         var parent = GetParentObject();
	//         if (parent is SchemaModule)
	//         return parent as SchemaModule;
	//     else
	//         return parent.GetModule();
	//     }
	// }
	//
	// SchemaObject cached_ParentObject;
	// public SchemaObject GetParentObject()
	// {
	//     if (ParentObjectID == null)
	//         return null;
	//     else
	//     if (cached_ParentObject == null)
	//     {
	//         cached_ParentObject = App.Schema.GetSampleObject<SchemaObject>((Guid)ParentObjectID);
	//     }
	//     return cached_ParentObject;
	// }
	//
	//
	//
	// public event PropertyChangedEventHandler PropertyChanged;
	//
	// public virtual string GetSchemaDesignerDisplayName()
	// {
	//     return Name;
	// }
	//
	// public virtual Bitmap GetSchemaDesignerImage()
	// {
	//     return GetImage();
	// }
	//
	// public virtual Color GetSchemaDesinerColor()
	// {
	//     return Color.Black;
	// }
	//
	// public virtual string GetSchemaDesignerDescription()
	// {
	//     return Description;
	// }
	//
	//
	// public virtual DateTime? GetSchemaDesignerChangeDate()
	// {
	//     if (ChangeDate == null)
	// return CreateDate;
	// else
	// return ChangeDate;
	// }
	//
	// public virtual string GetSchemaDesignerChangeUser()
	// {
	//     if (ChangeUserID == null)
	//         return App.Schema.GetObjectName(CreateUserID);
	//     else
	//         return App.Schema.GetObjectName(ChangeUserID);
	// }
	//
	// public void SaveChanges()
	// {
	//     App.Schema.SaveObject(this);
	//     needSave = false;
	//
	// }
	//
	// public void CancelChanges()
	// {
	//     needSave = false;
	// }


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Snapshot_1 = __webpack_require__(26);
	//import {Observable} from "../../buhta-core/Observable";
	var deepClone_1 = __webpack_require__(27);
	var Layout_1 = __webpack_require__(7);
	var Flex_1 = __webpack_require__(9);
	var Tabs_1 = __webpack_require__(20);
	var Fixed_1 = __webpack_require__(8);
	var Button_1 = __webpack_require__(22);
	var TreeGrid_1 = __webpack_require__(40);
	var TreeGridColumns_1 = __webpack_require__(41);
	var TreeGridColumn_1 = __webpack_require__(36);
	var TreeGridComponentChildrenDataSource_1 = __webpack_require__(67);
	var isDeepEqual_1 = __webpack_require__(29);
	var Auth_1 = __webpack_require__(51);
	var getObjectConstructorName_1 = __webpack_require__(12);
	var ObjectDesigner_1 = __webpack_require__(17);
	var SchemaComponentDesigner = (function (_super) {
	    __extends(SchemaComponentDesigner, _super);
	    function SchemaComponentDesigner(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.snapshot = new Snapshot_1.Snapshot();
	        // renderPropertyDesigners(): JSX.Element[] {
	        //     let ret: JSX.Element[] = [];
	        //
	        //     getPropertyEditors(this.observableDesignedObject).forEach((propInfo: PropertyEditorInfo, index: number) => {
	        //         //console.log(propInfo);
	        //         let editorProps: BasePropertyEditorProps & PropertyEditorInfo = {
	        //             designedObject: this.observableDesignedObject,
	        //             //propertyEditorInfo: propInfo,
	        //             index: index,
	        //             key: index,
	        //             onChange: this.props.onChange,
	        //
	        //             // это из propInfo: PropertyEditorInfo, заполяется далее через _.assign
	        //             propertyName: "",
	        //             objectType: DesignedObject,
	        //             editorType: BasePropertyEditor,
	        //             propertyType: null
	        //         };
	        //
	        //         _.assign(editorProps, propInfo);
	        //
	        //         if (!editorProps.inputCaption)
	        //             editorProps.inputCaption = editorProps.propertyName;
	        //         //console.log(editorProps);
	        //
	        //         ret.push(React.createElement(propInfo.editorType, editorProps, {}));
	        //     });
	        //
	        //     return ret;
	        // }
	        this.handleSaveButtonClick = function (sender, e) {
	            if (_this.props.onSaveChanges)
	                _this.props.onSaveChanges();
	            if (_this.clonedDesignedObject.createDate === null) {
	                _this.clonedDesignedObject.createDate = new Date();
	            }
	            if (_this.clonedDesignedObject.createUserID === null) {
	                _this.clonedDesignedObject.createUserID = Auth_1.getUserId();
	            }
	            _this.clonedDesignedObject.changeDate = new Date();
	            _this.clonedDesignedObject.changeUserID = Auth_1.getUserId();
	            _this.clonedDesignedObject.save()
	                .then(function () {
	                _this.getParentWindow().close();
	            })
	                .catch(function (error) {
	                _this.showErrorWindow(error);
	            });
	            e.stopPropagation();
	        };
	        this.handleCancelButtonClick = function (sender, e) {
	            if (_this.props.onCancelChanges)
	                _this.props.onCancelChanges();
	            _this.getParentWindow().close();
	            e.stopPropagation();
	        };
	        // handleSaveChanges = () => {
	        //     console.log("save-changes");
	        //     //console.log(this.props.designedObject);
	        //     _.assign(this.props.designedObject, this.observableDesignedObject);
	        //     if (this.props.onSaveChanges)
	        //         this.props.onSaveChanges();
	        //
	        // }
	        //
	        // handleCancelChanges = () => {
	        //     console.log("cancel-changes");
	        //     //this.snapshot.restoreObject(this.props.designedObject, "root");
	        //     if (this.props.onCancelChanges)
	        //         this.props.onCancelChanges();
	        //     //console.log(this.props.designedObject);
	        // }
	        // handleGetNeedToSave = (): boolean => {
	        //     return this.needToSave;
	        // }
	        this.handleTestButtonClick = function () {
	            //this.openEditForm(this.state.rows[this.state.focusedRowIndex]);
	            var openParam = {
	                title: "\u0442\u0435\u0441\u0442 '" + getObjectConstructorName_1.getObjectConstructorName(_this.clonedDesignedObject) + "'",
	                top: 350,
	                left: 350
	            };
	            _this.getParentDesktop().openSchemaForm(_this.clonedDesignedObject, openParam);
	        };
	        this.handleUpdateButtonClick = function () {
	            var designedObject = _this.treeGridState.getFocusedRow();
	            var win = React.createElement(ObjectDesigner_1.ObjectDesigner, {designedObject: designedObject, onSaveChanges: function () { _this.treeGridState.refreshFocusedRow(); }});
	            var openParam = {
	                title: "редактирование",
	                autoPosition: "parent-center",
	                parentWindowId: _this.getParentWindowId()
	            };
	            _this.getParentDesktop().openWindow(win, openParam);
	        };
	        this.handleInsertButtonClick = function () {
	            //this.openInsertForm();
	        };
	        this.handleDeleteButtonClick = function () {
	            //this.openDeleteForm(this.state.rows[this.state.focusedRowIndex]);
	        };
	        this.handleTreeGridChangeFocusedRow = function (state) {
	            _this.treeGridState = state;
	            //console.log("handleTreeGridChangeFocusedRow:" + state.focusedRowIndex);
	            //this.openDeleteForm(this.state.rows[this.state.focusedRowIndex]);
	        };
	        this.props = props;
	    }
	    //observableDesignedObject: SchemaComponent;
	    SchemaComponentDesigner.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	        this.needToSave = false;
	        this.clonedDesignedObject = deepClone_1.deepClone(this.props.designedObject);
	    };
	    SchemaComponentDesigner.prototype.startCheckDesignedObjectIsChanged = function () {
	        var _this = this;
	        this.compareInterval = setInterval(function () {
	            console.log("deepCompare");
	            if (!isDeepEqual_1.isDeepEqual(_this.clonedDesignedObject, _this.props.designedObject)) {
	                clearInterval(_this.compareInterval);
	                _this.needToSave = true;
	                _this.forceUpdate();
	            }
	        }, 200);
	    };
	    SchemaComponentDesigner.prototype.willUnmount = function () {
	        _super.prototype.willUnmount.call(this);
	        clearInterval(this.compareInterval);
	    };
	    SchemaComponentDesigner.prototype.didMount = function () {
	        _super.prototype.didMount.call(this);
	        this.startCheckDesignedObjectIsChanged();
	        //this.snapshot.saveObject(this.props.designedObject, "root");
	    };
	    SchemaComponentDesigner.prototype.renderEditableButtons = function () {
	        var buttons = [];
	        buttons.push(React.createElement(Button_1.Button, {key: "insert", className: "is-outlined is-success", onClick: this.handleInsertButtonClick}, "Добавить"));
	        buttons.push(React.createElement(Button_1.Button, {key: "update", className: "is-outlined is-info", onClick: this.handleUpdateButtonClick}, "Изменить"));
	        buttons.push(React.createElement(Button_1.Button, {key: "delete", className: "is-outlined is-danger", onClick: this.handleDeleteButtonClick}, "Удалить"));
	        return buttons;
	    };
	    SchemaComponentDesigner.prototype.render = function () {
	        var dataSourceParam = {};
	        var dataSource = new TreeGridComponentChildrenDataSource_1.TreeGridComponentChildrenDataSource(this.clonedDesignedObject.children, dataSourceParam);
	        this.addClassName("object-designer");
	        this.addProps({ onChange: this.props.onChange });
	        this.addStyles({ height: "100%" });
	        return (React.createElement("div", __assign({}, this.getRenderProps()), 
	            React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent"}, 
	                React.createElement(Flex_1.Flex, null, 
	                    React.createElement(Tabs_1.Tabs, {sizeTo: "parent", onWillMount: function (state) { console.log("onWillMount-auto-form-tabs"); }, onChangeActiveTab: function (state, tab) { console.log("setActiveTab"); console.log(tab); }}, 
	                        React.createElement(Tabs_1.Tab, {key: "1", title: "Основная"}, 
	                            React.createElement(Layout_1.Layout, {type: "column", sizeTo: "parent"}, 
	                                React.createElement(Flex_1.Flex, null, 
	                                    React.createElement(TreeGrid_1.TreeGrid, {dataSource: dataSource, treeMode: "childrenList", autoExpandNodesToLevel: 100, editable: true, denyInsert: true, dragDropNodes: true, onChangeFocusedRow: this.handleTreeGridChangeFocusedRow}, 
	                                        React.createElement(TreeGridColumns_1.TreeGridColumns, null, 
	                                            React.createElement(TreeGridColumn_1.TreeGridColumn, {caption: "Control", propertyName: "$$controlName", showHierarchyTree: true, width: 200}), 
	                                            React.createElement(TreeGridColumn_1.TreeGridColumn, {caption: "Свойства", propertyName: "$$controlMainProps", width: 300}), 
	                                            React.createElement(TreeGridColumn_1.TreeGridColumn, {caption: "События", propertyName: "$$controlEvents", width: 300}))
	                                    )
	                                ), 
	                                React.createElement(Fixed_1.Fixed, null, this.renderEditableButtons()))
	                        ), 
	                        React.createElement(Tabs_1.Tab, {key: "2", title: "Кто-когда"}))
	                ), 
	                React.createElement(Fixed_1.Fixed, null, 
	                    React.createElement(Layout_1.Layout, {className: "auto-form-footer", type: "row", sizeTo: "content"}, 
	                        React.createElement(Flex_1.Flex, null, 
	                            React.createElement(Button_1.Button, {onClick: this.handleTestButtonClick}, "Тест")
	                        ), 
	                        React.createElement(Fixed_1.Fixed, null, 
	                            React.createElement(Button_1.Button, {visible: this.needToSave, className: "is-success is-outlined", onClick: this.handleSaveButtonClick}, "Сохранить"), 
	                            React.createElement(Button_1.Button, {onClick: this.handleCancelButtonClick}, this.needToSave ? "Отмена" : "Закрыть")))
	                ))
	        ));
	    };
	    return SchemaComponentDesigner;
	}(Component_1.Component));
	exports.SchemaComponentDesigner = SchemaComponentDesigner;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	var TreeGridComponentChildrenDataSource = (function () {
	    function TreeGridComponentChildrenDataSource(componentChildren, params) {
	        if (params === void 0) { params = {}; }
	        this.componentChildren = componentChildren;
	        this.params = params;
	        this.refresh();
	    }
	    TreeGridComponentChildrenDataSource.prototype.pushFlatRecursive = function (item, parent) {
	        var _this = this;
	        item.$$flatIndex = this.flat.length;
	        item.$$flatParent = parent;
	        this.flat.push(item);
	        //console.log({push: item.$$flatIndex, parent: item.$$flatParent});
	        item.children.forEach(function (child) {
	            _this.pushFlatRecursive(child, item);
	        });
	    };
	    TreeGridComponentChildrenDataSource.prototype.refresh = function () {
	        var _this = this;
	        //console.error("------refresh-----");
	        this.flat = [];
	        this.componentChildren.forEach(function (child) {
	            _this.pushFlatRecursive(child, null);
	        });
	    };
	    Object.defineProperty(TreeGridComponentChildrenDataSource.prototype, "isTreeGridDataSource", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridComponentChildrenDataSource.prototype.getTreeGridColumns = function () {
	        return [];
	        // if (this.componentChildren.length === 0)
	        //     return [];
	        // else
	        //     return getGridColumnInfos(this.componentChildren[0]).map<TreeGridColumnProps>((col) => {
	        //
	        //         let ret: any = {};
	        //         _.assign(ret, col);
	        //         return ret;
	        //
	        //         // return ({
	        //         //     caption: col.caption,
	        //         //     width: col.width,
	        //         //     order: col.order,
	        //         //     propertyName: col.propertyName,
	        //         //     showHierarchyTree: col.showHierarchyTree,
	        //         //     showHierarchyPadding: col.showHierarchyPadding
	        //         // });
	        //     });
	    };
	    TreeGridComponentChildrenDataSource.prototype.getRows = function () {
	        return this.componentChildren;
	    };
	    TreeGridComponentChildrenDataSource.prototype.getRow = function (rowIndex) {
	        return this.flat[rowIndex];
	    };
	    TreeGridComponentChildrenDataSource.prototype.getRowChildren = function (rowIndex) {
	        return this.flat[rowIndex].children;
	    };
	    TreeGridComponentChildrenDataSource.prototype.getNewRow = function () {
	        if (this.params.getNewRow)
	            return this.params.getNewRow();
	        else {
	            Error_1.throwError("TreeGridComponentChildrenDataSource: method getNewRow() not defined");
	            throw ""; // fake typescript 2
	        }
	    };
	    TreeGridComponentChildrenDataSource.prototype.addRow = function (row) {
	        this.componentChildren.push(row);
	        return this.componentChildren.length - 1;
	    };
	    TreeGridComponentChildrenDataSource.prototype.deleteRow = function (rowIndex) {
	        var deletedItems = _.pullAt(this.componentChildren, rowIndex);
	        if (deletedItems.length === 0)
	            Error_1.throwError("TreeGridComponentChildrenDataSource.deleteRow(): invalid rowIndex (" + rowIndex + ")");
	    };
	    TreeGridComponentChildrenDataSource.prototype.getEmptyDataSourceMessage = function () {
	        if (this.params.getEmptyDataSourceMessage)
	            return this.params.getEmptyDataSourceMessage();
	        else
	            return "Пустой список.";
	    };
	    TreeGridComponentChildrenDataSource.prototype.getDeleteRowMessage = function () {
	        if (this.params.getDeleteRowMessage)
	            return this.params.getDeleteRowMessage();
	        else
	            return "Удалить запись!";
	    };
	    TreeGridComponentChildrenDataSource.prototype.canDragRow = function (rowIndex, mode) {
	        if (this.flat[rowIndex] === undefined)
	            return false;
	        return true;
	    };
	    TreeGridComponentChildrenDataSource.prototype.hasParent = function (rowIndex, parentIndex) {
	        var parentRow = this.flat[rowIndex].$$flatParent;
	        if (parentRow && parentRow.$$flatIndex === parentIndex)
	            return true;
	        while (parentRow) {
	            parentRow = parentRow.$$flatParent;
	            if (parentRow && parentRow.$$flatIndex === parentIndex)
	                return true;
	        }
	        return false;
	    };
	    TreeGridComponentChildrenDataSource.prototype.canDropInto = function (dragRowIndex, targetRowIndex, mode) {
	        if (this.flat[dragRowIndex] === undefined || this.flat[targetRowIndex] === undefined)
	            return false;
	        if (targetRowIndex === dragRowIndex || this.hasParent(targetRowIndex, dragRowIndex))
	            return false;
	        return true;
	    };
	    TreeGridComponentChildrenDataSource.prototype.canDropAfter = function (dragRowIndex, targetRowIndex, mode) {
	        if (this.flat[dragRowIndex] === undefined || this.flat[targetRowIndex] === undefined)
	            return false;
	        if (targetRowIndex === dragRowIndex || this.hasParent(targetRowIndex, dragRowIndex))
	            return false;
	        return true;
	    };
	    TreeGridComponentChildrenDataSource.prototype.dropInto = function (dragRowIndex, targetRowIndex, mode) {
	        //console.log("drop-into");
	        var dragParentChildren;
	        if (this.flat[dragRowIndex].$$flatParent !== null)
	            dragParentChildren = this.flat[dragRowIndex].$$flatParent.children;
	        else
	            dragParentChildren = this.componentChildren;
	        var deleted = _.pullAt(dragParentChildren, dragParentChildren.indexOf(this.flat[dragRowIndex]));
	        if (deleted[0] !== this.flat[dragRowIndex])
	            throw "internal error 'deleted[0] !== this.flat[dragRowIndex]' 78";
	        //        console.log(deleted);
	        this.flat[targetRowIndex].children.push(this.flat[dragRowIndex]);
	        this.refresh();
	        // todo copy пока не работает, надо делать deep copy ноды
	    };
	    TreeGridComponentChildrenDataSource.prototype.dropAfter = function (dragRowIndex, targetRowIndex, mode) {
	        //console.log("drop-after");
	        var dragParentChildren;
	        if (this.flat[dragRowIndex].$$flatParent !== null)
	            dragParentChildren = this.flat[dragRowIndex].$$flatParent.children;
	        else
	            dragParentChildren = this.componentChildren;
	        var targetParentChildren;
	        if (this.flat[targetRowIndex].$$flatParent !== null)
	            targetParentChildren = this.flat[targetRowIndex].$$flatParent.children;
	        else
	            targetParentChildren = this.componentChildren;
	        // if (targetParentChildren === undefined || targetParentChildren === null)
	        //     throw "internal error 'deleted[0] !== this.flat[dragRowIndex]' 99";
	        // if (dragParentChildren === undefined || dragParentChildren === null)
	        //     throw  "err";
	        if (targetParentChildren !== dragParentChildren) {
	            targetParentChildren.splice(targetParentChildren.indexOf(this.flat[targetRowIndex]) + 1, 0, this.flat[dragRowIndex]);
	            var deleted = _.pullAt(dragParentChildren, dragParentChildren.indexOf(this.flat[dragRowIndex]));
	            if (deleted[0] !== this.flat[dragRowIndex]) {
	                throw "internal error 'deleted[0] !== this.flat[dragRowIndex]' 99";
	            }
	        }
	        else {
	            var toPos = targetParentChildren.indexOf(this.flat[targetRowIndex]);
	            var fromPos = targetParentChildren.indexOf(this.flat[dragRowIndex]);
	            if (toPos > fromPos)
	                targetParentChildren.splice(toPos, 0, targetParentChildren.splice(fromPos, 1)[0]);
	            else
	                targetParentChildren.splice(toPos + 1, 0, targetParentChildren.splice(fromPos, 1)[0]);
	        }
	        this.refresh();
	        // todo copy пока не работает, надо делать deep copy ноды
	    };
	    return TreeGridComponentChildrenDataSource;
	}());
	exports.TreeGridComponentChildrenDataSource = TreeGridComponentChildrenDataSource;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var Component_1 = __webpack_require__(5);
	var Panel = (function (_super) {
	    __extends(Panel, _super);
	    function Panel() {
	        _super.apply(this, arguments);
	    }
	    Panel.prototype.render = function () {
	        this.clearStyles();
	        //this.addClassName("Layout");
	        //this.addStyles({display: "flex", position: "relative", flexDirection: this.props.type});
	        if (this.props.sizeTo === "parent") {
	            this.addStyles({ height: "100%" });
	        }
	        //      this.addProps({onClick: this.props.onClick});
	        return (React.createElement("div", __assign({}, this.getRenderProps()), this.props.children));
	    };
	    return Panel;
	}(Component_1.Component));
	exports.Panel = Panel;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var BaseControl_1 = __webpack_require__(70);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var Button_1 = __webpack_require__(22);
	var OneWayBinderPropertyEditor_1 = __webpack_require__(71);
	var ButtonControl = (function (_super) {
	    __extends(ButtonControl, _super);
	    function ButtonControl() {
	        _super.apply(this, arguments);
	    }
	    ButtonControl.prototype.beforeRender = function () {
	        _super.prototype.beforeRender.call(this);
	    };
	    ButtonControl.prototype.getProps = function () {
	        if (_.isString(this.text))
	            return { text: this.text };
	        else
	            return { text: this.text.getValue() };
	    };
	    ButtonControl.prototype.getComponent = function () {
	        return Button_1.Button;
	    };
	    Object.defineProperty(ButtonControl.prototype, "$$controlName", {
	        get: function () {
	            return "<Button>";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ButtonControl.prototype, "$$controlMainProps", {
	        get: function () {
	            return (React.createElement("span", null, 
	                "text=\"", 
	                this.text.toString(), 
	                "\""));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        OneWayBinderPropertyEditor_1.OneWayBinderEditor({
	            inputCaption: "Текст"
	        })
	    ], ButtonControl.prototype, "text", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Текст2"
	        })
	    ], ButtonControl.prototype, "text2", void 0);
	    return ButtonControl;
	}(BaseControl_1.BaseControl));
	exports.ButtonControl = ButtonControl;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var DesignedObject_1 = __webpack_require__(11);
	var Error_1 = __webpack_require__(6);
	var BaseControl = (function (_super) {
	    __extends(BaseControl, _super);
	    function BaseControl() {
	        _super.apply(this, arguments);
	        this.children = [];
	    }
	    //    reactElement: Component<any, any>;
	    BaseControl.prototype.getProps = function () {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    BaseControl.prototype.getComponent = function () {
	        return undefined;
	    };
	    BaseControl.prototype.beforeRender = function () {
	    };
	    BaseControl.prototype.render = function () {
	        this.beforeRender();
	        var children = this.children.map(function (child) {
	            // if (_.isString(child))
	            //     return child;
	            // else
	            return child.render();
	        });
	        var comp = this.getComponent();
	        if (comp !== undefined)
	            return React.createElement(this.getComponent(), this.getProps(), children);
	        else
	            return undefined;
	    };
	    Object.defineProperty(BaseControl.prototype, "$$controlName", {
	        get: function () {
	            return "<baseControl>";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseControl.prototype, "$$controlMainProps", {
	        get: function () {
	            return React.createElement("div", null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return BaseControl;
	}(DesignedObject_1.DesignedObject));
	exports.BaseControl = BaseControl;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var BasePropertyEditor_1 = __webpack_require__(14);
	var registerPropertyEditor_1 = __webpack_require__(15);
	var OneWayBinderInput_1 = __webpack_require__(72);
	var OneWayBinderPropertyEditor = (function (_super) {
	    __extends(OneWayBinderPropertyEditor, _super);
	    function OneWayBinderPropertyEditor() {
	        _super.apply(this, arguments);
	    }
	    OneWayBinderPropertyEditor.prototype.handleChange = function (event) {
	        // this.props.designedObject[this.props.propertyName] = (event.target as any).value;
	        // console.log("change === " + this.props.propertyName + " " + this.props.designedObject[this.props.propertyName]);
	    };
	    OneWayBinderPropertyEditor.prototype.render = function () {
	        var autoFormControlProps = {
	            inputCaption: this.props.inputCaption,
	            inputTab: this.props.inputTab,
	            inputGroup: this.props.inputGroup,
	            inputDescription: this.props.inputDescription
	        };
	        this.addProps(autoFormControlProps);
	        return (React.createElement(OneWayBinderInput_1.OneWayBinderInput, __assign({bindObject: this.props.designedObject, bindPropName: this.props.propertyName, onChange: this.props.onChange}, this.getRenderProps())));
	    };
	    return OneWayBinderPropertyEditor;
	}(BasePropertyEditor_1.BasePropertyEditor));
	exports.OneWayBinderPropertyEditor = OneWayBinderPropertyEditor;
	function OneWayBinderEditor(params) {
	    return function (target, propertyName) {
	        //  console.log({target, propertyName, constr:target.constructor});
	        var propertyEditorInfo = {
	            propertyName: propertyName,
	            objectType: target.constructor,
	            editorType: OneWayBinderPropertyEditor,
	            propertyType: null
	        };
	        _.assign(propertyEditorInfo, params);
	        registerPropertyEditor_1.registerPropertyEditor(propertyEditorInfo);
	        // registerPropertyEditor({
	        //     inputCaption: params.inputCaption,
	        //     inputTab: params.inputTab,
	        //     inputGroup: params.inputGroup,
	        //     inputDescription: params.inputDescription,
	        //     propertyName: propertyName,
	        //
	        //     objectType: target.constructor,
	        //     editorType: OneWayBinderPropertyEditor,
	        //     propertyType: OneWayBinder
	        // });
	    };
	}
	exports.OneWayBinderEditor = OneWayBinderEditor;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var OneWayBinder_1 = __webpack_require__(73);
	var SelectInput_1 = __webpack_require__(75);
	var OneWayBinder_StringValue_1 = __webpack_require__(76);
	var OneWayBinder_NumberValue_1 = __webpack_require__(77);
	var Error_1 = __webpack_require__(6);
	// export class OneWayBinderInputState extends ComponentState<OneWayBinderInputProps> {
	//     constructor(private input: OneWayBinderInput) {
	//         super(input);
	//     }
	//     editedValue: OneWayBinder<any>;
	// }
	var OneWayBinderInput = (function (_super) {
	    __extends(OneWayBinderInput, _super);
	    function OneWayBinderInput(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.getText = function () {
	            if (_this.props.bindObject && _this.props.bindPropName) {
	                if (_this.props.bindObject[_this.props.bindPropName])
	                    return _this.props.bindObject[_this.props.bindPropName].toString();
	                else
	                    return "";
	            }
	            else
	                return "<unbinded>";
	        };
	        this.handleOnChange = function (event) {
	            if (_this.props.bindObject && _this.props.bindPropName)
	                _this.props.bindObject[_this.props.bindPropName] = event.target.value;
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.handleSelectChange = function () {
	            if (_this.props.bindObject && _this.props.bindPropName)
	                _this.props.bindObject[_this.props.bindPropName] = _this.activeBinder;
	            //console.log("this.activeBinder");
	            //console.log(this.activeBinder);
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.handleValueChange = function () {
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.props = props;
	    }
	    OneWayBinderInput.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	    };
	    OneWayBinderInput.prototype.render = function () {
	        var _this = this;
	        var binder = this.props.bindObject[this.props.bindPropName];
	        if (_.isString(binder)) {
	            binder = new OneWayBinder_StringValue_1.OneWayBinder_StringValue(binder);
	            this.props.bindObject[this.props.bindPropName] = binder;
	        }
	        else if (_.isNumber(binder)) {
	            binder = new OneWayBinder_NumberValue_1.OneWayBinder_NumberValue(binder);
	            this.props.bindObject[this.props.bindPropName] = binder;
	        }
	        else if (!(binder instanceof OneWayBinder_1.OneWayBinder))
	            Error_1.throwError("OneWayBinderInput.render(): invalid edited value type");
	        if (!this.activeBinder)
	            this.activeBinder = binder;
	        if (!this.selectDataSource)
	            this.selectDataSource = OneWayBinder_1.getOneWayBinderTypesDataSource(this.activeBinder);
	        return (React.createElement("p", {className: "control has-addons"}, 
	            React.createElement(SelectInput_1.SelectInput, {bindObject: this, bindPropName: "activeBinder", valuesDataSource: this.selectDataSource, onChange: this.handleSelectChange}), 
	            this.activeBinder.renderValueEditor(function () {
	                _this.handleValueChange();
	            })));
	    };
	    return OneWayBinderInput;
	}(Component_1.Component));
	exports.OneWayBinderInput = OneWayBinderInput;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var DesignedObject_1 = __webpack_require__(11);
	var Error_1 = __webpack_require__(6);
	var SelectInputDataSourceFromArray_1 = __webpack_require__(74);
	function getOneWayBinderTypesDataSource(activeBinder) {
	    return new SelectInputDataSourceFromArray_1.SelectInputDataSourceFromArray(registeredOneWayBinders.map(function (binderInfo) {
	        var retDataSourceItem = {
	            label: binderInfo.binderName,
	            value: binderInfo.createBinderCallback()
	        };
	        if (activeBinder !== undefined && activeBinder.constructor === retDataSourceItem.value.constructor)
	            retDataSourceItem.value = activeBinder;
	        return retDataSourceItem;
	    }));
	}
	exports.getOneWayBinderTypesDataSource = getOneWayBinderTypesDataSource;
	var registeredOneWayBinders = [];
	function registerOneWayBinder(binderName, createBinderCallback) {
	    var info = {
	        binderName: binderName,
	        createBinderCallback: createBinderCallback
	    };
	    registeredOneWayBinders.push(info);
	}
	exports.registerOneWayBinder = registerOneWayBinder;
	var OneWayBinder = (function (_super) {
	    __extends(OneWayBinder, _super);
	    function OneWayBinder() {
	        _super.apply(this, arguments);
	    }
	    OneWayBinder.prototype.getValue = function () {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    OneWayBinder.prototype.renderValueEditor = function (onChangeCallback) {
	        Error_1.throwAbstractError();
	        throw "fake";
	    };
	    return OneWayBinder;
	}(DesignedObject_1.DesignedObject));
	exports.OneWayBinder = OneWayBinder;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _ = __webpack_require__(4);
	var Error_1 = __webpack_require__(6);
	var SelectInputDataSourceFromArray = (function () {
	    function SelectInputDataSourceFromArray(arr) {
	        this.arr = arr;
	    }
	    SelectInputDataSourceFromArray.prototype.getItems = function () {
	        if (!this.cachedItems) {
	            this.cachedItems = this.arr.map(function (item, index) {
	                if (_.isString(item) || _.isNumber(item) || _.isDate(item))
	                    return { label: item.toString(), value: item, disabled: false };
	                else if (_.isArray(item))
	                    return { label: item[1], value: item[0], disabled: item[3] };
	                else if (_.isObject(item)) {
	                    var value = item.value;
	                    if (value === undefined)
	                        value = item;
	                    var label = item.label;
	                    if (label === undefined && item.label.toString())
	                        label = item.toString();
	                    if (label === undefined)
	                        label = "?";
	                    var disabled = item.disabled;
	                    if (disabled === undefined)
	                        disabled = false;
	                    return { label: label, value: value, disabled: disabled };
	                }
	                else {
	                    Error_1.throwError("SelectInputDataSourceFromArray: invalid select item type");
	                    throw "fake";
	                }
	            });
	        }
	        return this.cachedItems;
	    };
	    return SelectInputDataSourceFromArray;
	}());
	exports.SelectInputDataSourceFromArray = SelectInputDataSourceFromArray;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var Component_1 = __webpack_require__(5);
	var SelectInputDataSourceFromArray_1 = __webpack_require__(74);
	var SelectInput = (function (_super) {
	    __extends(SelectInput, _super);
	    function SelectInput(props, context) {
	        var _this = this;
	        _super.call(this, props, context);
	        this.getValue = function () {
	            for (var i = 0; i < _this.ds.getItems().length; i++) {
	                if (_this.ds.getItems()[i].value === _this.props.bindObject[_this.props.bindPropName])
	                    return i.toString();
	            }
	            return "-1";
	        };
	        this.handleOnChange = function (event) {
	            if (_this.props.bindObject && _this.props.bindPropName)
	                _this.props.bindObject[_this.props.bindPropName] = _this.ds.getItems()[event.target.value].value;
	            //  console.log("select");
	            //  console.log(this.ds.getItems()[(event.target as any).value].value);
	            _this.forceUpdate();
	            if (_this.props.onChange)
	                _this.props.onChange();
	        };
	        this.props = props;
	    }
	    SelectInput.prototype.willMount = function () {
	        _super.prototype.willMount.call(this);
	    };
	    SelectInput.prototype.renderOptions = function () {
	        return this.ds.getItems().map(function (item, index) {
	            return (React.createElement("option", {value: index, key: index, disabled: item.disabled}, item.label));
	        });
	    };
	    SelectInput.prototype.render = function () {
	        if (_.isArray(this.props.valuesDataSource))
	            this.ds = new SelectInputDataSourceFromArray_1.SelectInputDataSourceFromArray(this.props.valuesDataSource);
	        else
	            this.ds = this.props.valuesDataSource;
	        this.clearStyles();
	        this.addClassName("select");
	        this.addStyles(this.props.style);
	        return (React.createElement("span", __assign({}, this.getRenderProps()), 
	            React.createElement("select", {type: "text", value: this.getValue(), onChange: this.handleOnChange}, this.renderOptions())
	        ));
	    };
	    return SelectInput;
	}(Component_1.Component));
	exports.SelectInput = SelectInput;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var OneWayBinder_1 = __webpack_require__(73);
	var Input_1 = __webpack_require__(16);
	OneWayBinder_1.registerOneWayBinder("Строка", function () { return new OneWayBinder_StringValue(); });
	var OneWayBinder_StringValue = (function (_super) {
	    __extends(OneWayBinder_StringValue, _super);
	    function OneWayBinder_StringValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    OneWayBinder_StringValue.prototype.getValue = function () {
	        if (this.value === undefined)
	            return "<не определено>";
	        else
	            return this.value;
	    };
	    OneWayBinder_StringValue.prototype.renderValueEditor = function (onChangeCallback) {
	        //onChange={this.handleOnChange}
	        return (React.createElement(Input_1.Input, {type: Input_1.InputType.Text, bindObject: this, bindPropName: "value", onChange: function () { if (onChangeCallback)
	            onChangeCallback(); }}));
	    };
	    return OneWayBinder_StringValue;
	}(OneWayBinder_1.OneWayBinder));
	exports.OneWayBinder_StringValue = OneWayBinder_StringValue;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(1);
	var OneWayBinder_1 = __webpack_require__(73);
	var Input_1 = __webpack_require__(16);
	OneWayBinder_1.registerOneWayBinder("Число", function () { return new OneWayBinder_NumberValue(); });
	var OneWayBinder_NumberValue = (function (_super) {
	    __extends(OneWayBinder_NumberValue, _super);
	    function OneWayBinder_NumberValue(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    OneWayBinder_NumberValue.prototype.getValue = function () {
	        if (this.value === undefined)
	            return NaN;
	        else
	            return this.value;
	    };
	    OneWayBinder_NumberValue.prototype.renderValueEditor = function (onChangeCallback) {
	        //onChange={this.handleOnChange}
	        return (React.createElement(Input_1.Input, {type: Input_1.InputType.Number, bindObject: this, bindPropName: "value", onChange: function () { if (onChangeCallback)
	            onChangeCallback(); }}));
	    };
	    return OneWayBinder_NumberValue;
	}(OneWayBinder_1.OneWayBinder));
	exports.OneWayBinder_NumberValue = OneWayBinder_NumberValue;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BaseControl_1 = __webpack_require__(70);
	var Panel_1 = __webpack_require__(68);
	var PanelControl = (function (_super) {
	    __extends(PanelControl, _super);
	    function PanelControl() {
	        _super.apply(this, arguments);
	    }
	    PanelControl.prototype.beforeRender = function () {
	        _super.prototype.beforeRender.call(this);
	    };
	    PanelControl.prototype.getProps = function () {
	        return { sizeTo: this.sizeTo };
	    };
	    PanelControl.prototype.getComponent = function () {
	        return Panel_1.Panel;
	    };
	    Object.defineProperty(PanelControl.prototype, "$$controlName", {
	        get: function () {
	            return "<Panel>";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return PanelControl;
	}(BaseControl_1.BaseControl));
	exports.PanelControl = PanelControl;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var BaseControl_1 = __webpack_require__(70);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var SelectPropertyEditor_1 = __webpack_require__(80);
	var LocalVariableControl = (function (_super) {
	    __extends(LocalVariableControl, _super);
	    function LocalVariableControl() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(LocalVariableControl.prototype, "$$controlName", {
	        get: function () {
	            return "var " + this.variableName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя переменной"
	        })
	    ], LocalVariableControl.prototype, "variableName", void 0);
	    __decorate([
	        SelectPropertyEditor_1.SelectEditor({
	            inputCaption: "Тип переменной",
	            selectValues: ["number", ["string", "Строка"], "date", "guid"]
	        })
	    ], LocalVariableControl.prototype, "variableType", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "значение"
	        })
	    ], LocalVariableControl.prototype, "initValue", void 0);
	    return LocalVariableControl;
	}(BaseControl_1.BaseControl));
	exports.LocalVariableControl = LocalVariableControl;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var React = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var BasePropertyEditor_1 = __webpack_require__(14);
	var registerPropertyEditor_1 = __webpack_require__(15);
	var SelectInput_1 = __webpack_require__(75);
	var SelectPropertyEditor = (function (_super) {
	    __extends(SelectPropertyEditor, _super);
	    function SelectPropertyEditor() {
	        _super.apply(this, arguments);
	    }
	    SelectPropertyEditor.prototype.handleChange = function (event) {
	        // this.props.designedObject[this.props.propertyName] = (event.target as any).value;
	        // console.log("change === " + this.props.propertyName + " " + this.props.designedObject[this.props.propertyName]);
	    };
	    SelectPropertyEditor.prototype.render = function () {
	        var autoFormControlProps = {
	            inputCaption: this.props.inputCaption,
	            inputTab: this.props.inputTab,
	            inputGroup: this.props.inputGroup,
	            inputDescription: this.props.inputDescription
	        };
	        this.addProps(autoFormControlProps);
	        return (React.createElement(SelectInput_1.SelectInput, __assign({bindObject: this.props.designedObject, bindPropName: this.props.propertyName, valuesDataSource: this.props.selectValues, onChange: this.props.onChange}, this.getRenderProps())));
	    };
	    return SelectPropertyEditor;
	}(BasePropertyEditor_1.BasePropertyEditor));
	exports.SelectPropertyEditor = SelectPropertyEditor;
	function SelectEditor(params) {
	    return function (target, propertyName) {
	        //  console.log({target, propertyName, constr:target.constructor});
	        var propertyEditorInfo = {
	            propertyName: propertyName,
	            objectType: target.constructor,
	            editorType: SelectPropertyEditor,
	            propertyType: null
	        };
	        _.assign(propertyEditorInfo, params);
	        registerPropertyEditor_1.registerPropertyEditor(propertyEditorInfo);
	        // registerPropertyEditor({
	        //     inputCaption: params.inputCaption,
	        //     inputTab: params.inputTab,
	        //     inputGroup: params.inputGroup,
	        //     inputDescription: params.inputDescription,
	        //     propertyName: propertyName,
	        //
	        //     objectType: target.constructor,
	        //     editorType: SelectPropertyEditor,
	        //     propertyType: SelectInput
	        // });
	    };
	}
	exports.SelectEditor = SelectEditor;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(1);
	var App_1 = __webpack_require__(31);
	var SelectInput_1 = __webpack_require__(75);
	var SelectInputDataSourceFromArray_1 = __webpack_require__(74);
	var OneWayBinderInput_1 = __webpack_require__(72);
	/**
	 * Created by Kostia on 06.08.2016.
	 */
	function showTestSelectControlForm() {
	    var opts = [];
	    opts.push({ label: "один", value: 1 });
	    opts.push({ label: "два", value: 2 });
	    opts.push({ label: "три", value: 3 });
	    var testObj = { value: 300 };
	    var values = new SelectInputDataSourceFromArray_1.SelectInputDataSourceFromArray([100, 200, 300]);
	    var win = (React.createElement("div", null, 
	        React.createElement("select", {className: "select", style: { width: 450 }, value: 333, onChange: function (e) { console.log(e); }}, 
	            React.createElement("optgroup", {label: "Swedish Cars"}, 
	                React.createElement("option", {value: "volvo", style: { color: "red" }}, "Volvo"), 
	                React.createElement("option", {value: "saab"}, "Saab"), 
	                React.createElement("option", {value: "audi"}, "Audi"), 
	                React.createElement("option", {value: "volvo"}, "Volvo"), 
	                React.createElement("option", {value: "saab"}, "Saab")), 
	            React.createElement("option", {value: "volvo"}, "Volvo"), 
	            React.createElement("option", {value: "saab"}, "Saab"), 
	            React.createElement("option", {value: "mercedes"}, "Mercedes"), 
	            React.createElement("option", {value: "audi"}, "Audi"), 
	            React.createElement("option", {value: "volvo"}, "Volvo"), 
	            React.createElement("option", {value: "saab"}, "Saab"), 
	            React.createElement("option", {value: 333}, "Mercedes жопа333"), 
	            React.createElement("option", {value: "audi"}, "Audi"), 
	            React.createElement("option", {value: "volvo"}, "Volvo"), 
	            React.createElement("option", {value: "saab"}, "Saab"), 
	            React.createElement("option", {value: "mercedes"}, "Mercedes"), 
	            React.createElement("option", {value: "audi"}, "Audi"), 
	            React.createElement("option", {value: "volvo"}, "Volvo"), 
	            React.createElement("option", {value: "saab"}, "Saab"), 
	            React.createElement("option", {value: "mercedes"}, "Mercedes"), 
	            React.createElement("option", {value: "audi"}, "Audi")), 
	        React.createElement(SelectInput_1.SelectInput, {style: { width: 350 }, bindObject: testObj, bindPropName: "value", valuesDataSource: values, onChange: function () { console.log(testObj.value); }}), 
	        React.createElement(OneWayBinderInput_1.OneWayBinderInput, {style: { width: 300 }, bindObject: testObj, bindPropName: "value", onChange: function () { console.log(testObj.value); }})));
	    var openParam = {
	        title: "showTestSelectControlForm",
	        top: 50,
	        left: 50,
	        height: 400,
	        width: 500
	    };
	    App_1.appInstance.desktop.openWindow(win, openParam);
	}
	exports.showTestSelectControlForm = showTestSelectControlForm;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SchemaObject_1 = __webpack_require__(65);
	var SchemaTable_1 = __webpack_require__(83);
	var SchemaTableColumn_1 = __webpack_require__(84);
	var SchemaForm_1 = __webpack_require__(63);
	var ButtonControl_1 = __webpack_require__(69);
	var PanelControl_1 = __webpack_require__(78);
	var LocalVariableControl_1 = __webpack_require__(79);
	var OneWayBinder_NumberValue_1 = __webpack_require__(77);
	var OneWayBinder_StringValue_1 = __webpack_require__(76);
	exports.buhtaHost = {};
	exports.buhtaHost.SchemaObject = SchemaObject_1.SchemaObject;
	exports.buhtaHost.SchemaTable = SchemaTable_1.SchemaTable;
	exports.buhtaHost.SchemaTableColumn = SchemaTableColumn_1.SchemaTableColumn;
	exports.buhtaHost.SchemaForm = SchemaForm_1.SchemaForm;
	exports.buhtaHost.ButtonControl = ButtonControl_1.ButtonControl;
	exports.buhtaHost.PanelControl = PanelControl_1.PanelControl;
	exports.buhtaHost.LocalVariableControl = LocalVariableControl_1.LocalVariableControl;
	exports.buhtaHost.OneWayBinder_NumberValue = OneWayBinder_NumberValue_1.OneWayBinder_NumberValue;
	exports.buhtaHost.OneWayBinder_StringValue = OneWayBinder_StringValue_1.OneWayBinder_StringValue;
	window.buhta = exports.buhtaHost;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var SchemaObject_1 = __webpack_require__(65);
	var ListPropertyEditor_1 = __webpack_require__(39);
	var SchemaTableColumn_1 = __webpack_require__(84);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var SchemaTable = (function (_super) {
	    __extends(SchemaTable, _super);
	    function SchemaTable() {
	        _super.apply(this, arguments);
	        this.columns = [];
	    }
	    SchemaTable.prototype.addColumn = function (initCallback) {
	        var col = new SchemaTableColumn_1.SchemaTableColumn(this);
	        if (initCallback)
	            initCallback(col);
	        this.columns.push(col);
	        return col;
	    };
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя таблицы"
	        })
	    ], SchemaTable.prototype, "name", void 0);
	    __decorate([
	        ListPropertyEditor_1.ListEditor({
	            inputTab: "Колонки",
	            getNewListItem: function (table) {
	                return new SchemaTableColumn_1.SchemaTableColumn(table);
	            }
	        })
	    ], SchemaTable.prototype, "columns", void 0);
	    return SchemaTable;
	}(SchemaObject_1.SchemaObject));
	exports.SchemaTable = SchemaTable;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var DesignedObject_1 = __webpack_require__(11);
	var StringPropertyEditor_1 = __webpack_require__(13);
	var TreeGridColumn_1 = __webpack_require__(36);
	var SchemaTableColumn = (function (_super) {
	    __extends(SchemaTableColumn, _super);
	    function SchemaTableColumn(table) {
	        _super.call(this);
	        this.table = table;
	    }
	    SchemaTableColumn.prototype.toString = function () {
	        return this.name + " of (" + this.table.name + ")";
	    };
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "Имя колонки",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "Имя колонки"
	        }),
	        TreeGridColumn_1.GridColumn({ caption: "Имя колонки" })
	    ], SchemaTableColumn.prototype, "name", void 0);
	    __decorate([
	        StringPropertyEditor_1.StringEditor({
	            inputCaption: "тип",
	            inputTab: "Главная",
	            inputGroup: "Основная",
	            inputDescription: "sql тип колонки"
	        }),
	        TreeGridColumn_1.GridColumn({ caption: "Тип" })
	    ], SchemaTableColumn.prototype, "dataType", void 0);
	    return SchemaTableColumn;
	}(DesignedObject_1.DesignedObject));
	exports.SchemaTableColumn = SchemaTableColumn;


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,